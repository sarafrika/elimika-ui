// This file is auto-generated by @hey-api/openapi-ts

export type ResponseDtoVoid = {
  data?: {
    [key: string]: unknown
  }
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type PermissionDto = {
  uuid?: string
  moduleName?: string
  permissionName?: string
  description?: string
}

export type RoleDtoReadable = {
  uuid?: string
  organisation_uuid: string
  name: string
  description?: string
  active?: boolean
  permissions?: Array<PermissionDto>
  readonly created_date?: Date
  readonly modified_date?: Date
}

export type RoleDtoWritable = {
  uuid?: string
  organisation_uuid: string
  name: string
  description?: string
  active?: boolean
  permissions?: Array<PermissionDto>
}

/**
 * Complete user profile information including personal details, authentication, and organizational data
 */
export type UserReadable = {
  /**
   * **[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.
   */
  readonly uuid?: string
  /**
   * **[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.
   */
  first_name: string
  /**
   * **[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.
   */
  middle_name?: string
  /**
   * **[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.
   */
  last_name: string
  /**
   * **[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.
   */
  email: string
  /**
   * **[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.
   */
  phone_number: string
  /**
   * **[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.
   */
  dob: Date
  /**
   * **[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.
   */
  username: string
  /**
   * **[OPTIONAL]** UUID of the organization this user belongs to. Links user to their organizational context and determines available resources. Can be null for system administrators.
   */
  organisation_uuid?: string
  /**
   * **[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.
   */
  active: boolean
  /**
   * **[OPTIONAL]** Set of roles assigned to this user. Determines user permissions and access levels within the system. Can be empty for users with no specific roles assigned.
   */
  roles?: Array<RoleDtoReadable>
  /**
   * **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
   */
  gender?: "MALE" | "FEMALE" | "OTHER" | "PREFER_NOT_TO_SAY"
  /**
   * **[OPTIONAL]** List of domain roles that define the user's functional areas within the system. Determines available features and workflows. Can contain multiple values.
   */
  user_domain: "student" | "instructor" | "admin" | "organisation_user"
  displayName?: string
  fullName?: string
  /**
   * **[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.
   */
  readonly profile_image_url?: string
  /**
   * **[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.
   */
  readonly created_date?: Date
  /**
   * **[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.
   */
  readonly modified_date?: Date
}

/**
 * Complete user profile information including personal details, authentication, and organizational data
 */
export type UserWritable = {
  /**
   * **[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.
   */
  first_name: string
  /**
   * **[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.
   */
  middle_name?: string
  /**
   * **[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.
   */
  last_name: string
  /**
   * **[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.
   */
  email: string
  /**
   * **[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.
   */
  phone_number: string
  /**
   * **[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.
   */
  dob: Date
  /**
   * **[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.
   */
  username: string
  /**
   * **[OPTIONAL]** UUID of the organization this user belongs to. Links user to their organizational context and determines available resources. Can be null for system administrators.
   */
  organisation_uuid?: string
  /**
   * **[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.
   */
  active: boolean
  /**
   * **[OPTIONAL]** Set of roles assigned to this user. Determines user permissions and access levels within the system. Can be empty for users with no specific roles assigned.
   */
  roles?: Array<RoleDtoWritable>
  /**
   * **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
   */
  gender?: "MALE" | "FEMALE" | "OTHER" | "PREFER_NOT_TO_SAY"
  /**
   * **[OPTIONAL]** List of domain roles that define the user's functional areas within the system. Determines available features and workflows. Can contain multiple values.
   */
  user_domain: "student" | "instructor" | "admin" | "organisation_user"
  displayName?: string
  fullName?: string
}

export type ApiResponseUserReadable = {
  success?: boolean
  data?: UserReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseUserWritable = {
  success?: boolean
  data?: UserWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type UserGroupDtoReadable = {
  uuid?: string
  organisation_uuid?: string
  name: string
  active: boolean
  readonly created_date?: Date
  readonly modified_date?: Date
}

export type UserGroupDtoWritable = {
  uuid?: string
  organisation_uuid?: string
  name: string
  active: boolean
}

export type ApiResponseUserGroupDtoReadable = {
  success?: boolean
  data?: UserGroupDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseUserGroupDtoWritable = {
  success?: boolean
  data?: UserGroupDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type TrainingSessionDto = {
  uuid?: string
  course_uuid: string
  trainer_uuid: string
  start_date: Date
  end_date: Date
  class_mode: string
  location?: string
  meeting_link?: string
  schedule?: string
  capacity_limit?: number
  current_enrollment_count?: number
  waiting_list_count?: number
  group_or_individual: string
}

/**
 * Student profile information including guardian contacts and academic details. Links to a base user account.
 */
export type StudentReadable = {
  /**
   * **[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.
   */
  readonly uuid?: string
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.
   */
  user_uuid: string
  /**
   * **[REQUIRED]** Full name of the primary guardian/parent. This is the main emergency contact for the student.
   */
  first_guardian_name: string
  /**
   * **[REQUIRED]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.
   */
  first_guardian_mobile: string
  /**
   * **[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.
   */
  second_guardian_name?: string
  /**
   * **[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.
   */
  second_guardian_mobile?: string
  allGuardianContacts?: Array<string>
  primaryGuardianContact?: string
  secondaryGuardianContact?: string
  /**
   * **[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.
   */
  readonly created_date?: Date
  /**
   * **[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.
   */
  readonly created_by?: string
  /**
   * **[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.
   */
  readonly updated_date?: Date
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.
   */
  readonly updated_by?: string
}

/**
 * Student profile information including guardian contacts and academic details. Links to a base user account.
 */
export type StudentWritable = {
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.
   */
  user_uuid: string
  /**
   * **[REQUIRED]** Full name of the primary guardian/parent. This is the main emergency contact for the student.
   */
  first_guardian_name: string
  /**
   * **[REQUIRED]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.
   */
  first_guardian_mobile: string
  /**
   * **[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.
   */
  second_guardian_name?: string
  /**
   * **[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.
   */
  second_guardian_mobile?: string
  allGuardianContacts?: Array<string>
  primaryGuardianContact?: string
  secondaryGuardianContact?: string
}

export type ApiResponseRoleDtoReadable = {
  success?: boolean
  data?: RoleDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseRoleDtoWritable = {
  success?: boolean
  data?: RoleDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type UpdatePrerequisiteRequestDto = {
  prerequisiteTypeId?: bigint
  courseId?: bigint
  requiredForCourseId?: bigint
  minimumScore?: number
}

export type UpdatePrerequisiteGroupRequestDto = {
  courseId?: bigint
  groupType?: "AND" | "OR"
  prerequisiteIds?: Array<bigint>
}

export type OrganisationDtoReadable = {
  uuid?: string
  name: string
  description?: string
  active?: boolean
  code?: string
  readonly slug?: string
  domain: string
  readonly created_date?: Date
  readonly updated_date?: Date
}

export type OrganisationDtoWritable = {
  uuid?: string
  name: string
  description?: string
  active?: boolean
  code?: string
  domain: string
}

export type ApiResponseOrganisationDtoReadable = {
  success?: boolean
  data?: OrganisationDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseOrganisationDtoWritable = {
  success?: boolean
  data?: OrganisationDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

/**
 * Comprehensive instructor profile including professional qualifications, training experience, certifications, and location data for educational service delivery
 */
export type InstructorReadable = {
  /**
   * **[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.
   */
  readonly uuid?: string
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.
   */
  user_uuid: string
  /**
   * **[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  latitude?: number
  /**
   * **[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  longitude?: number
  /**
   * **[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.
   */
  website?: string
  /**
   * **[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.
   */
  bio?: string
  /**
   * **[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.
   */
  professional_headline?: string
  /**
   * **[OPTIONAL]** List of professional bodies and associations the instructor is affiliated with. Used to verify professional standing and credibility.
   */
  professional_bodies?: Array<ProfessionalBodyDto>
  /**
   * **[OPTIONAL]** Detailed training and teaching experience history. Documents instructor's practical experience in delivering educational content.
   */
  training_experiences?: Array<TrainingExperienceDto>
  /**
   * **[OPTIONAL]** Professional certifications and qualifications held by the instructor. Used to verify expertise and authorize teaching specific subjects.
   */
  certifications?: Array<UserCertificationDto>
  totalProfessionalCredentials?: number
  formattedLocation?: string
  profileComplete?: boolean
  /**
   * **[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.
   */
  readonly full_name?: string
  /**
   * **[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.
   */
  readonly created_date?: Date
  /**
   * **[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.
   */
  readonly created_by?: string
  /**
   * **[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.
   */
  readonly updated_date?: Date
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.
   */
  readonly updated_by?: string
}

/**
 * Comprehensive instructor profile including professional qualifications, training experience, certifications, and location data for educational service delivery
 */
export type InstructorWritable = {
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.
   */
  user_uuid: string
  /**
   * **[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  latitude?: number
  /**
   * **[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  longitude?: number
  /**
   * **[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.
   */
  website?: string
  /**
   * **[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.
   */
  bio?: string
  /**
   * **[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.
   */
  professional_headline?: string
  /**
   * **[OPTIONAL]** List of professional bodies and associations the instructor is affiliated with. Used to verify professional standing and credibility.
   */
  professional_bodies?: Array<ProfessionalBodyDto>
  /**
   * **[OPTIONAL]** Detailed training and teaching experience history. Documents instructor's practical experience in delivering educational content.
   */
  training_experiences?: Array<TrainingExperienceDto>
  /**
   * **[OPTIONAL]** Professional certifications and qualifications held by the instructor. Used to verify expertise and authorize teaching specific subjects.
   */
  certifications?: Array<UserCertificationDto>
  totalProfessionalCredentials?: number
  formattedLocation?: string
  profileComplete?: boolean
}

export type ProfessionalBodyDto = {
  /**
   * Name of the professional body
   */
  body_name: string
  /**
   * Membership number assigned by the body
   */
  membership_no: string
  /**
   * Date when the user became a member (ISO 8601 format)
   */
  member_since: Date
  /**
   * UUID of the user associated with this membership
   */
  user_uuid: string
}

export type TrainingExperienceDto = {
  /**
   * Name of the organisation where the experience was gained
   */
  organisation_name: string
  /**
   * Job title held during the training or experience
   */
  job_title: string
  /**
   * Description of responsibilities and tasks performed
   */
  work_description: string
  /**
   * Start date of the training/experience (ISO 8601 format)
   */
  start_date: Date
  /**
   * End date of the training/experience (ISO 8601 format)
   */
  end_date: Date
  /**
   * UUID of the user associated with this training/experience
   */
  user_uuid: string
}

export type UserCertificationDto = {
  /**
   * Date the certificate was issued (ISO 8601 format)
   */
  issued_date: Date
  /**
   * Name of the issuing organization
   */
  issued_by: string
  /**
   * URL pointing to the certificate resource
   */
  certificate_url: string
  /**
   * UUID of the user who owns this certificate
   */
  user_uuid: string
}

export type PricingRequestDto = {
  isFree?: boolean
  originalPrice?: number
  salePrice?: number
}

export type UpdateCourseCategoryRequestDto = {
  id?: bigint
  name: string
  description?: string
}

export type UpdateCourseLearningObjectiveRequestDto = {
  id?: bigint
  objective?: string
}

export type UpdateCourseRequestDto = {
  name?: string
  description?: string
  thumbnailUrl?: string
  durationHours?: number
  difficultyLevel?: "beginner" | "intermediate" | "advanced"
  minAge?: number
  maxAge?: number
  pricing?: PricingRequestDto
  learningObjectives?: Array<UpdateCourseLearningObjectiveRequestDto>
  categories?: Array<UpdateCourseCategoryRequestDto>
}

export type CategoryResponseDto = {
  id?: bigint
  name?: string
  description?: string
}

export type CourseLearningObjectiveResponseDto = {
  id?: bigint
  objective?: string
}

export type CourseResponseDto = {
  id?: bigint
  name?: string
  code?: string
  description?: string
  durationHours?: number
  difficultyLevel?: "beginner" | "intermediate" | "advanced"
  minAge?: number
  maxAge?: number
  classLimit?: number
  pricing?: PricingResponseDto
  learningObjectives?: Array<CourseLearningObjectiveResponseDto>
  categories?: Array<CategoryResponseDto>
}

export type PricingResponseDto = {
  isFree?: boolean
  originalPrice?: number
  salePrice?: number
}

export type ResponseDtoCourseResponseDto = {
  data?: CourseResponseDto
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type UpdateLessonRequestDto = {
  title?: string
  description?: string
  content?: string
  lessonOrder?: number
  isPublished?: boolean
}

export type UpdateCategoryRequestDto = {
  id?: bigint
  name?: string
  description?: string
}

export type ResponseDtoCategoryResponseDto = {
  data?: CategoryResponseDto
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type UpdateAssessmentRequestDto = {
  title?: string
  type?: string
  description?: string
  maximumScore?: number
  passingScore?: number
  dueDate?: Date
  timeLimit?: number
  courseId?: bigint
  lessonId?: bigint
}

export type UpdateAnswerOptionRequestDto = {
  optionText?: string
  correct?: boolean
  orderInQuestion?: number
}

export type UpdateQuestionRequestDto = {
  description?: string
  questionType?: string
  pointValue?: number
  orderInAssessment?: number
  answerOptions?: Array<UpdateAnswerOptionRequestDto>
}

export type ApiResponseVoid = {
  success?: boolean
  data?: {
    [key: string]: unknown
  }
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseTrainingSessionDto = {
  success?: boolean
  data?: TrainingSessionDto
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseStudentReadable = {
  success?: boolean
  data?: StudentReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseStudentWritable = {
  success?: boolean
  data?: StudentWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type CreatePrerequisiteRequestDto = {
  prerequisiteTypeId?: bigint
  courseId?: bigint
  requiredForCourseId?: bigint
  minimumScore?: number
}

export type CreatePrerequisiteGroupRequestDto = {
  courseId?: bigint
  groupType?: "AND" | "OR"
  prerequisiteIds?: Array<bigint>
}

export type CreatePrerequisiteTypeRequestDto = {
  name?: string
}

export type ApiResponseInstructorReadable = {
  success?: boolean
  data?: InstructorReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseInstructorWritable = {
  success?: boolean
  data?: InstructorWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type CreateCourseLearningObjectiveRequestDto = {
  objective?: string
}

export type CreateCourseRequestDto = {
  name?: string
  description?: string
  thumbnailUrl?: string
  difficultyLevel?: "beginner" | "intermediate" | "advanced"
  durationHours?: number
  minAge?: number
  maxAge?: number
  classLimit?: number
  pricing?: PricingRequestDto
  learningObjectives?: Array<CreateCourseLearningObjectiveRequestDto>
  categories?: Array<UpdateCourseCategoryRequestDto>
  instructorIds?: Array<bigint>
}

export type CreateLessonContentDto = {
  title?: string
  displayOrder?: number
  duration?: number
  contentType?: string
  contentText?: string
}

export type CreateLessonRequestDto = {
  title?: string
  description?: string
  lessonOrder?: number
  isPublished?: boolean
  content?: Array<CreateLessonContentDto>
  resources?: Array<CreateLessonResourceRequestDto>
}

export type CreateLessonResourceRequestDto = {
  title?: string
  resourceUrl?: string
  displayOrder?: number
}

export type LessonContentResponseDto = {
  id?: bigint
  title?: string
  displayOrder?: number
  duration?: number
  contentType?: string
}

export type LessonResourceResponseDto = {
  id?: bigint
  title?: string
  resourceUrl?: string
  displayOrder?: number
}

export type LessonResponseDto = {
  id?: bigint
  title?: string
  description?: string
  lessonOrder?: number
  isPublished?: boolean
  content?: Array<LessonContentResponseDto>
  resources?: Array<LessonResourceResponseDto>
}

export type ResponseDtoLessonResponseDto = {
  data?: LessonResponseDto
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type CreateCategoryRequestDto = {
  name: string
  description?: string
}

export type CreateAssessmentRequestDto = {
  title?: string
  type?: string
  description?: string
  maximumScore?: number
  passingScore?: number
  dueDate?: Date
  timeLimit?: number
  courseId?: bigint
  lessonId?: bigint
}

export type CreateAnswerOptionRequestDto = {
  optionText?: string
  correct?: boolean
  orderInQuestion?: number
}

export type CreateQuestionRequestDto = {
  description?: string
  questionType?: string
  pointValue?: number
  orderInAssessment?: number
  answerOptions?: Array<CreateAnswerOptionRequestDto>
}

export type Pageable = {
  page?: number
  size?: number
  sort?: Array<string>
}

export type ApiResponsePagedDtoUserReadable = {
  success?: boolean
  data?: PagedDtoUserReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoUserWritable = {
  success?: boolean
  data?: PagedDtoUserWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PageLinks = {
  first?: string
  previous?: string
  self?: string
  next?: string
  last?: string
}

export type PageMetadata = {
  pageNumber?: number
  pageSize?: number
  totalElements?: bigint
  totalPages?: number
  hasNext?: boolean
  hasPrevious?: boolean
  first?: boolean
  last?: boolean
}

export type PagedDtoUserReadable = {
  content?: Array<UserReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoUserWritable = {
  content?: Array<UserWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type ApiResponsePagedDtoRoleDtoReadable = {
  success?: boolean
  data?: PagedDtoRoleDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoRoleDtoWritable = {
  success?: boolean
  data?: PagedDtoRoleDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoRoleDtoReadable = {
  content?: Array<RoleDtoReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoRoleDtoWritable = {
  content?: Array<RoleDtoWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type ApiResponsePagedDtoUserGroupDtoReadable = {
  success?: boolean
  data?: PagedDtoUserGroupDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoUserGroupDtoWritable = {
  success?: boolean
  data?: PagedDtoUserGroupDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoUserGroupDtoReadable = {
  content?: Array<UserGroupDtoReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoUserGroupDtoWritable = {
  content?: Array<UserGroupDtoWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type ApiResponsePagedDtoTrainingSessionDto = {
  success?: boolean
  data?: PagedDtoTrainingSessionDto
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoTrainingSessionDto = {
  content?: Array<TrainingSessionDto>
  metadata?: PageMetadata
  links?: PageLinks
}

export type Page = {
  totalPages?: number
  totalElements?: bigint
  first?: boolean
  last?: boolean
  pageable?: PageableObject
  size?: number
  content?: Array<{
    [key: string]: unknown
  }>
  number?: number
  sort?: SortObject
  numberOfElements?: number
  empty?: boolean
}

export type PageableObject = {
  paged?: boolean
  pageNumber?: number
  pageSize?: number
  offset?: bigint
  sort?: SortObject
  unpaged?: boolean
}

export type SortObject = {
  sorted?: boolean
  empty?: boolean
  unsorted?: boolean
}

export type ApiResponsePagedDtoStudentReadable = {
  success?: boolean
  data?: PagedDtoStudentReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoStudentWritable = {
  success?: boolean
  data?: PagedDtoStudentWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoStudentReadable = {
  content?: Array<StudentReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoStudentWritable = {
  content?: Array<StudentWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type ApiResponseListRoleDtoReadable = {
  success?: boolean
  data?: Array<RoleDtoReadable>
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseListRoleDtoWritable = {
  success?: boolean
  data?: Array<RoleDtoWritable>
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponseListPermissionDto = {
  success?: boolean
  data?: Array<PermissionDto>
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PrerequisiteRequestDto = {
  courseId?: bigint
  lessonId?: bigint
}

export type PrerequisiteResponseDto = {
  id?: bigint
  prerequisiteType?: PrerequisiteTypeResponseDto
  course?: CourseResponseDto
  requiredForCourse?: CourseResponseDto
  minimumScore?: number
}

export type PrerequisiteTypeResponseDto = {
  id?: bigint
  name?: string
}

export type ResponsePageableDtoPrerequisiteResponseDto = {
  data?: Array<PrerequisiteResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type ResponsePageableDtoPrerequisiteTypeResponseDto = {
  data?: Array<PrerequisiteTypeResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type ApiResponsePagedDtoOrganisationDtoReadable = {
  success?: boolean
  data?: PagedDtoOrganisationDtoReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoOrganisationDtoWritable = {
  success?: boolean
  data?: PagedDtoOrganisationDtoWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoOrganisationDtoReadable = {
  content?: Array<OrganisationDtoReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoOrganisationDtoWritable = {
  content?: Array<OrganisationDtoWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type ApiResponsePagedDtoInstructorReadable = {
  success?: boolean
  data?: PagedDtoInstructorReadable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type ApiResponsePagedDtoInstructorWritable = {
  success?: boolean
  data?: PagedDtoInstructorWritable
  message?: string
  error?: {
    [key: string]: unknown
  }
}

export type PagedDtoInstructorReadable = {
  content?: Array<InstructorReadable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type PagedDtoInstructorWritable = {
  content?: Array<InstructorWritable>
  metadata?: PageMetadata
  links?: PageLinks
}

export type CourseRequestDto = {
  name?: string
}

export type ResponsePageableDtoCourseResponseDto = {
  data?: Array<CourseResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type ResponsePageableDtoLessonResponseDto = {
  data?: Array<LessonResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type CategoryRequestDto = {
  name?: string
}

export type ResponsePageableDtoCategoryResponseDto = {
  data?: Array<CategoryResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type AssessmentResponseDto = {
  id?: bigint
  title?: string
  type?: string
  description?: string
  maximumScore?: number
  passingScore?: number
  dueDate?: Date
  timeLimit?: number
}

export type ResponseDtoAssessmentResponseDto = {
  data?: AssessmentResponseDto
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type AnswerOptionResponseDto = {
  id?: bigint
  optionText?: string
  correct?: boolean
  orderInQuestion?: number
}

export type QuestionResponseDto = {
  id?: bigint
  description?: string
  questionType?: string
  pointValue?: number
  orderInAssessment?: number
  answerOptions?: Array<AnswerOptionResponseDto>
}

export type ResponsePageableDtoQuestionResponseDto = {
  data?: Array<QuestionResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type ResponseDtoQuestionResponseDto = {
  data?: QuestionResponseDto
  status?: number
  message?: string
  errors?: {
    [key: string]: string
  }
  timestamp?: Date
}

export type ResponsePageableDtoAssessmentResponseDto = {
  data?: Array<AssessmentResponseDto>
  page?: number
  size?: number
  totalPages?: number
  totalElements?: bigint
  status?: number
  message?: string
}

export type DeleteUserData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/users/{uuid}"
}

export type DeleteUserErrors = {
  /**
   * User not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * User deleted successfully
   */
  200: ApiResponseVoid
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type GetUserByUuidData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/users/{uuid}"
}

export type GetUserByUuidErrors = {
  /**
   * User not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetUserByUuidError = GetUserByUuidErrors[keyof GetUserByUuidErrors]

export type GetUserByUuidResponses = {
  /**
   * User retrieved successfully
   */
  200: ApiResponseUserReadable
}

export type GetUserByUuidResponse =
  GetUserByUuidResponses[keyof GetUserByUuidResponses]

export type UpdateUserData = {
  body?: {
    user: UserWritable
    profile_image?: Blob | File
  }
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/users/{uuid}"
}

export type UpdateUserErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseUserReadable
  /**
   * User not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * User updated successfully
   */
  200: ApiResponseUserReadable
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type DeleteUserGroupData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}"
}

export type DeleteUserGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteUserGroupError =
  DeleteUserGroupErrors[keyof DeleteUserGroupErrors]

export type DeleteUserGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseVoid
}

export type DeleteUserGroupResponse =
  DeleteUserGroupResponses[keyof DeleteUserGroupResponses]

export type GetUserGroupByUuidData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}"
}

export type GetUserGroupByUuidErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetUserGroupByUuidError =
  GetUserGroupByUuidErrors[keyof GetUserGroupByUuidErrors]

export type GetUserGroupByUuidResponses = {
  /**
   * OK
   */
  200: ApiResponseUserGroupDtoReadable
}

export type GetUserGroupByUuidResponse =
  GetUserGroupByUuidResponses[keyof GetUserGroupByUuidResponses]

export type UpdateUserGroupData = {
  body: UserGroupDtoWritable
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}"
}

export type UpdateUserGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateUserGroupError =
  UpdateUserGroupErrors[keyof UpdateUserGroupErrors]

export type UpdateUserGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseUserGroupDtoReadable
}

export type UpdateUserGroupResponse =
  UpdateUserGroupResponses[keyof UpdateUserGroupResponses]

export type DeleteTrainingSessionData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/training-sessions/{uuid}"
}

export type DeleteTrainingSessionErrors = {
  /**
   * Training session not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteTrainingSessionError =
  DeleteTrainingSessionErrors[keyof DeleteTrainingSessionErrors]

export type DeleteTrainingSessionResponses = {
  /**
   * Training session deleted successfully
   */
  204: ApiResponseVoid
}

export type DeleteTrainingSessionResponse =
  DeleteTrainingSessionResponses[keyof DeleteTrainingSessionResponses]

export type GetTrainingSessionByIdData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/training-sessions/{uuid}"
}

export type GetTrainingSessionByIdErrors = {
  /**
   * Training session not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetTrainingSessionByIdError =
  GetTrainingSessionByIdErrors[keyof GetTrainingSessionByIdErrors]

export type GetTrainingSessionByIdResponses = {
  /**
   * Training session found
   */
  200: TrainingSessionDto
}

export type GetTrainingSessionByIdResponse =
  GetTrainingSessionByIdResponses[keyof GetTrainingSessionByIdResponses]

export type UpdateTrainingSessionData = {
  body: TrainingSessionDto
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/training-sessions/{uuid}"
}

export type UpdateTrainingSessionErrors = {
  /**
   * Training session not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateTrainingSessionError =
  UpdateTrainingSessionErrors[keyof UpdateTrainingSessionErrors]

export type UpdateTrainingSessionResponses = {
  /**
   * Training session updated successfully
   */
  200: TrainingSessionDto
}

export type UpdateTrainingSessionResponse =
  UpdateTrainingSessionResponses[keyof UpdateTrainingSessionResponses]

export type DeleteStudentData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/students/{uuid}"
}

export type DeleteStudentErrors = {
  /**
   * Student not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteStudentError = DeleteStudentErrors[keyof DeleteStudentErrors]

export type DeleteStudentResponses = {
  /**
   * Student deleted successfully
   */
  204: ApiResponseVoid
}

export type DeleteStudentResponse =
  DeleteStudentResponses[keyof DeleteStudentResponses]

export type GetStudentByIdData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/students/{uuid}"
}

export type GetStudentByIdErrors = {
  /**
   * Student not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetStudentByIdError =
  GetStudentByIdErrors[keyof GetStudentByIdErrors]

export type GetStudentByIdResponses = {
  /**
   * Student found
   */
  200: StudentReadable
}

export type GetStudentByIdResponse =
  GetStudentByIdResponses[keyof GetStudentByIdResponses]

export type UpdateStudentData = {
  body: StudentWritable
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/students/{uuid}"
}

export type UpdateStudentErrors = {
  /**
   * Student not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateStudentError = UpdateStudentErrors[keyof UpdateStudentErrors]

export type UpdateStudentResponses = {
  /**
   * Student updated successfully
   */
  200: StudentReadable
}

export type UpdateStudentResponse =
  UpdateStudentResponses[keyof UpdateStudentResponses]

export type DeleteRoleData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/roles/{uuid}"
}

export type DeleteRoleErrors = {
  /**
   * Role not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteRoleError = DeleteRoleErrors[keyof DeleteRoleErrors]

export type DeleteRoleResponses = {
  /**
   * Role deleted successfully
   */
  200: ApiResponseVoid
}

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses]

export type GetRoleByUuidData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/roles/{uuid}"
}

export type GetRoleByUuidErrors = {
  /**
   * Role not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetRoleByUuidError = GetRoleByUuidErrors[keyof GetRoleByUuidErrors]

export type GetRoleByUuidResponses = {
  /**
   * Role retrieved successfully
   */
  200: ApiResponseRoleDtoReadable
}

export type GetRoleByUuidResponse =
  GetRoleByUuidResponses[keyof GetRoleByUuidResponses]

export type UpdateRoleData = {
  body: RoleDtoWritable
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/roles/{uuid}"
}

export type UpdateRoleErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseRoleDtoReadable
  /**
   * Role not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateRoleError = UpdateRoleErrors[keyof UpdateRoleErrors]

export type UpdateRoleResponses = {
  /**
   * Role updated successfully
   */
  200: ApiResponseRoleDtoReadable
}

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses]

export type DeletePrerequisiteData = {
  body?: never
  path: {
    prerequisiteId: bigint
  }
  query?: never
  url: "/api/v1/prerequisite/{prerequisiteId}"
}

export type DeletePrerequisiteErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeletePrerequisiteError =
  DeletePrerequisiteErrors[keyof DeletePrerequisiteErrors]

export type DeletePrerequisiteResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeletePrerequisiteResponse =
  DeletePrerequisiteResponses[keyof DeletePrerequisiteResponses]

export type UpdatePrerequisiteData = {
  body: UpdatePrerequisiteRequestDto
  path: {
    prerequisiteId: bigint
  }
  query?: never
  url: "/api/v1/prerequisite/{prerequisiteId}"
}

export type UpdatePrerequisiteErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdatePrerequisiteError =
  UpdatePrerequisiteErrors[keyof UpdatePrerequisiteErrors]

export type UpdatePrerequisiteResponses = {
  /**
   * OK
   */
  200: ResponseDtoVoid
}

export type UpdatePrerequisiteResponse =
  UpdatePrerequisiteResponses[keyof UpdatePrerequisiteResponses]

export type DeletePrerequisiteGroupData = {
  body?: never
  path: {
    prerequisiteGroupId: bigint
  }
  query?: never
  url: "/api/v1/prerequisite/group/{prerequisiteGroupId}"
}

export type DeletePrerequisiteGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeletePrerequisiteGroupError =
  DeletePrerequisiteGroupErrors[keyof DeletePrerequisiteGroupErrors]

export type DeletePrerequisiteGroupResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeletePrerequisiteGroupResponse =
  DeletePrerequisiteGroupResponses[keyof DeletePrerequisiteGroupResponses]

export type UpdatePrerequisiteGroupData = {
  body: UpdatePrerequisiteGroupRequestDto
  path: {
    prerequisiteGroupId: bigint
  }
  query?: never
  url: "/api/v1/prerequisite/group/{prerequisiteGroupId}"
}

export type UpdatePrerequisiteGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdatePrerequisiteGroupError =
  UpdatePrerequisiteGroupErrors[keyof UpdatePrerequisiteGroupErrors]

export type UpdatePrerequisiteGroupResponses = {
  /**
   * OK
   */
  200: ResponseDtoVoid
}

export type UpdatePrerequisiteGroupResponse =
  UpdatePrerequisiteGroupResponses[keyof UpdatePrerequisiteGroupResponses]

export type DeleteOrganisationData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/organisations/{uuid}"
}

export type DeleteOrganisationErrors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteOrganisationError =
  DeleteOrganisationErrors[keyof DeleteOrganisationErrors]

export type DeleteOrganisationResponses = {
  /**
   * Organisation deleted successfully
   */
  200: ApiResponseVoid
}

export type DeleteOrganisationResponse =
  DeleteOrganisationResponses[keyof DeleteOrganisationResponses]

export type GetOrganisationByUuidData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/organisations/{uuid}"
}

export type GetOrganisationByUuidErrors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetOrganisationByUuidError =
  GetOrganisationByUuidErrors[keyof GetOrganisationByUuidErrors]

export type GetOrganisationByUuidResponses = {
  /**
   * Organisation retrieved successfully
   */
  200: ApiResponseOrganisationDtoReadable
}

export type GetOrganisationByUuidResponse =
  GetOrganisationByUuidResponses[keyof GetOrganisationByUuidResponses]

export type UpdateOrganisationData = {
  body: OrganisationDtoWritable
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/organisations/{uuid}"
}

export type UpdateOrganisationErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseOrganisationDtoReadable
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateOrganisationError =
  UpdateOrganisationErrors[keyof UpdateOrganisationErrors]

export type UpdateOrganisationResponses = {
  /**
   * Organisation updated successfully
   */
  200: ApiResponseOrganisationDtoReadable
}

export type UpdateOrganisationResponse =
  UpdateOrganisationResponses[keyof UpdateOrganisationResponses]

export type DeleteInstructorData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/instructors/{uuid}"
}

export type DeleteInstructorErrors = {
  /**
   * Instructor not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteInstructorError =
  DeleteInstructorErrors[keyof DeleteInstructorErrors]

export type DeleteInstructorResponses = {
  /**
   * Instructor deleted successfully
   */
  204: void
}

export type DeleteInstructorResponse =
  DeleteInstructorResponses[keyof DeleteInstructorResponses]

export type GetInstructorByUuidData = {
  body?: never
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/instructors/{uuid}"
}

export type GetInstructorByUuidErrors = {
  /**
   * Instructor not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetInstructorByUuidError =
  GetInstructorByUuidErrors[keyof GetInstructorByUuidErrors]

export type GetInstructorByUuidResponses = {
  /**
   * Instructor found
   */
  200: InstructorReadable
}

export type GetInstructorByUuidResponse =
  GetInstructorByUuidResponses[keyof GetInstructorByUuidResponses]

export type UpdateInstructorData = {
  body: InstructorWritable
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/instructors/{uuid}"
}

export type UpdateInstructorErrors = {
  /**
   * Instructor not found
   */
  404: unknown
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateInstructorError =
  UpdateInstructorErrors[keyof UpdateInstructorErrors]

export type UpdateInstructorResponses = {
  /**
   * Instructor updated successfully
   */
  200: InstructorReadable
}

export type UpdateInstructorResponse =
  UpdateInstructorResponses[keyof UpdateInstructorResponses]

export type DeleteCourseData = {
  body?: never
  path: {
    courseId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}"
}

export type DeleteCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteCourseError = DeleteCourseErrors[keyof DeleteCourseErrors]

export type DeleteCourseResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCourseResponse =
  DeleteCourseResponses[keyof DeleteCourseResponses]

export type GetCourseData = {
  body?: never
  path: {
    courseId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}"
}

export type GetCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetCourseError = GetCourseErrors[keyof GetCourseErrors]

export type GetCourseResponses = {
  /**
   * OK
   */
  200: ResponseDtoCourseResponseDto
}

export type GetCourseResponse = GetCourseResponses[keyof GetCourseResponses]

export type UpdateCourseData = {
  body: UpdateCourseRequestDto
  path: {
    courseId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}"
}

export type UpdateCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateCourseError = UpdateCourseErrors[keyof UpdateCourseErrors]

export type UpdateCourseResponses = {
  /**
   * OK
   */
  200: ResponseDtoCourseResponseDto
}

export type UpdateCourseResponse =
  UpdateCourseResponses[keyof UpdateCourseResponses]

export type DeleteLessonData = {
  body?: never
  path: {
    courseId: bigint
    lessonId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}/lessons/{lessonId}"
}

export type DeleteLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteLessonError = DeleteLessonErrors[keyof DeleteLessonErrors]

export type DeleteLessonResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteLessonResponse =
  DeleteLessonResponses[keyof DeleteLessonResponses]

export type GetLessonData = {
  body?: never
  path: {
    courseId: bigint
    lessonId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}/lessons/{lessonId}"
}

export type GetLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetLessonError = GetLessonErrors[keyof GetLessonErrors]

export type GetLessonResponses = {
  /**
   * OK
   */
  200: ResponseDtoLessonResponseDto
}

export type GetLessonResponse = GetLessonResponses[keyof GetLessonResponses]

export type UpdateLessonData = {
  body: UpdateLessonRequestDto
  path: {
    courseId: bigint
    lessonId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}/lessons/{lessonId}"
}

export type UpdateLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateLessonError = UpdateLessonErrors[keyof UpdateLessonErrors]

export type UpdateLessonResponses = {
  /**
   * OK
   */
  200: ResponseDtoVoid
}

export type UpdateLessonResponse =
  UpdateLessonResponses[keyof UpdateLessonResponses]

export type DeleteCategoryData = {
  body?: never
  path: {
    categoryId: bigint
  }
  query?: never
  url: "/api/v1/categories/{categoryId}"
}

export type DeleteCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteCategoryError =
  DeleteCategoryErrors[keyof DeleteCategoryErrors]

export type DeleteCategoryResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCategoryResponse =
  DeleteCategoryResponses[keyof DeleteCategoryResponses]

export type GetCategoryData = {
  body?: never
  path?: never
  query: {
    categoryId: bigint
  }
  url: "/api/v1/categories/{categoryId}"
}

export type GetCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetCategoryError = GetCategoryErrors[keyof GetCategoryErrors]

export type GetCategoryResponses = {
  /**
   * OK
   */
  200: ResponseDtoCategoryResponseDto
}

export type GetCategoryResponse =
  GetCategoryResponses[keyof GetCategoryResponses]

export type UpdateCategoryData = {
  body: UpdateCategoryRequestDto
  path: {
    categoryId: bigint
  }
  query?: never
  url: "/api/v1/categories/{categoryId}"
}

export type UpdateCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateCategoryError =
  UpdateCategoryErrors[keyof UpdateCategoryErrors]

export type UpdateCategoryResponses = {
  /**
   * OK
   */
  200: ResponseDtoCategoryResponseDto
}

export type UpdateCategoryResponse =
  UpdateCategoryResponses[keyof UpdateCategoryResponses]

export type DeleteAssessmentData = {
  body?: never
  path: {
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{id}"
}

export type DeleteAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteAssessmentError =
  DeleteAssessmentErrors[keyof DeleteAssessmentErrors]

export type DeleteAssessmentResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAssessmentResponse =
  DeleteAssessmentResponses[keyof DeleteAssessmentResponses]

export type GetAssessmentData = {
  body?: never
  path: {
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{id}"
}

export type GetAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAssessmentError = GetAssessmentErrors[keyof GetAssessmentErrors]

export type GetAssessmentResponses = {
  /**
   * OK
   */
  200: ResponseDtoAssessmentResponseDto
}

export type GetAssessmentResponse =
  GetAssessmentResponses[keyof GetAssessmentResponses]

export type UpdateAssessmentData = {
  body: UpdateAssessmentRequestDto
  path: {
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{id}"
}

export type UpdateAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateAssessmentError =
  UpdateAssessmentErrors[keyof UpdateAssessmentErrors]

export type UpdateAssessmentResponses = {
  /**
   * OK
   */
  200: ResponseDtoVoid
}

export type UpdateAssessmentResponse =
  UpdateAssessmentResponses[keyof UpdateAssessmentResponses]

export type DeleteQuestionData = {
  body?: never
  path: {
    assessmentId: bigint
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{assessmentId}/questions/{id}"
}

export type DeleteQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type DeleteQuestionError =
  DeleteQuestionErrors[keyof DeleteQuestionErrors]

export type DeleteQuestionResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteQuestionResponse =
  DeleteQuestionResponses[keyof DeleteQuestionResponses]

export type GetQuestionData = {
  body?: never
  path: {
    assessmentId: bigint
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{assessmentId}/questions/{id}"
}

export type GetQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetQuestionError = GetQuestionErrors[keyof GetQuestionErrors]

export type GetQuestionResponses = {
  /**
   * OK
   */
  200: ResponseDtoQuestionResponseDto
}

export type GetQuestionResponse =
  GetQuestionResponses[keyof GetQuestionResponses]

export type UpdateQuestionData = {
  body: UpdateQuestionRequestDto
  path: {
    assessmentId: bigint
    id: bigint
  }
  query?: never
  url: "/api/v1/assessments/{assessmentId}/questions/{id}"
}

export type UpdateQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type UpdateQuestionError =
  UpdateQuestionErrors[keyof UpdateQuestionErrors]

export type UpdateQuestionResponses = {
  /**
   * OK
   */
  200: ResponseDtoVoid
}

export type UpdateQuestionResponse =
  UpdateQuestionResponses[keyof UpdateQuestionResponses]

export type CreateUserGroupData = {
  body: UserGroupDtoWritable
  path?: never
  query?: never
  url: "/api/v1/user-groups"
}

export type CreateUserGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateUserGroupError =
  CreateUserGroupErrors[keyof CreateUserGroupErrors]

export type CreateUserGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseUserGroupDtoReadable
}

export type CreateUserGroupResponse =
  CreateUserGroupResponses[keyof CreateUserGroupResponses]

export type RemoveUsersFromGroupData = {
  body: Array<string>
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}/users"
}

export type RemoveUsersFromGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type RemoveUsersFromGroupError =
  RemoveUsersFromGroupErrors[keyof RemoveUsersFromGroupErrors]

export type RemoveUsersFromGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseVoid
}

export type RemoveUsersFromGroupResponse =
  RemoveUsersFromGroupResponses[keyof RemoveUsersFromGroupResponses]

export type GetUsersForUserGroupData = {
  body?: never
  path: {
    uuid: string
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/user-groups/{uuid}/users"
}

export type GetUsersForUserGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetUsersForUserGroupError =
  GetUsersForUserGroupErrors[keyof GetUsersForUserGroupErrors]

export type GetUsersForUserGroupResponses = {
  /**
   * Users retrieved successfully
   */
  200: ApiResponsePagedDtoUserReadable
}

export type GetUsersForUserGroupResponse =
  GetUsersForUserGroupResponses[keyof GetUsersForUserGroupResponses]

export type AddUsersToGroupData = {
  body: Array<string>
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}/users"
}

export type AddUsersToGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type AddUsersToGroupError =
  AddUsersToGroupErrors[keyof AddUsersToGroupErrors]

export type AddUsersToGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseVoid
}

export type AddUsersToGroupResponse =
  AddUsersToGroupResponses[keyof AddUsersToGroupResponses]

export type RemoveRolesFromGroupData = {
  body: Array<string>
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}/roles"
}

export type RemoveRolesFromGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type RemoveRolesFromGroupError =
  RemoveRolesFromGroupErrors[keyof RemoveRolesFromGroupErrors]

export type RemoveRolesFromGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseVoid
}

export type RemoveRolesFromGroupResponse =
  RemoveRolesFromGroupResponses[keyof RemoveRolesFromGroupResponses]

export type GetRolesForUserGroupData = {
  body?: never
  path: {
    uuid: string
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/user-groups/{uuid}/roles"
}

export type GetRolesForUserGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetRolesForUserGroupError =
  GetRolesForUserGroupErrors[keyof GetRolesForUserGroupErrors]

export type GetRolesForUserGroupResponses = {
  /**
   * Roles retrieved successfully
   */
  200: ApiResponsePagedDtoRoleDtoReadable
}

export type GetRolesForUserGroupResponse =
  GetRolesForUserGroupResponses[keyof GetRolesForUserGroupResponses]

export type AssignRolesToGroupData = {
  body: Array<string>
  path: {
    uuid: string
  }
  query?: never
  url: "/api/v1/user-groups/{uuid}/roles"
}

export type AssignRolesToGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type AssignRolesToGroupError =
  AssignRolesToGroupErrors[keyof AssignRolesToGroupErrors]

export type AssignRolesToGroupResponses = {
  /**
   * OK
   */
  200: ApiResponseVoid
}

export type AssignRolesToGroupResponse =
  AssignRolesToGroupResponses[keyof AssignRolesToGroupResponses]

export type GetAllTrainingSessionsData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/training-sessions"
}

export type GetAllTrainingSessionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllTrainingSessionsError =
  GetAllTrainingSessionsErrors[keyof GetAllTrainingSessionsErrors]

export type GetAllTrainingSessionsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoTrainingSessionDto
}

export type GetAllTrainingSessionsResponse =
  GetAllTrainingSessionsResponses[keyof GetAllTrainingSessionsResponses]

export type CreateTrainingSessionData = {
  body: TrainingSessionDto
  path?: never
  query?: never
  url: "/api/v1/training-sessions"
}

export type CreateTrainingSessionErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseTrainingSessionDto
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateTrainingSessionError =
  CreateTrainingSessionErrors[keyof CreateTrainingSessionErrors]

export type CreateTrainingSessionResponses = {
  /**
   * Training session created successfully
   */
  201: TrainingSessionDto
}

export type CreateTrainingSessionResponse =
  CreateTrainingSessionResponses[keyof CreateTrainingSessionResponses]

export type GetAllStudentsData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/students"
}

export type GetAllStudentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllStudentsError =
  GetAllStudentsErrors[keyof GetAllStudentsErrors]

export type GetAllStudentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoStudentReadable
}

export type GetAllStudentsResponse =
  GetAllStudentsResponses[keyof GetAllStudentsResponses]

export type CreateStudentData = {
  body: StudentWritable
  path?: never
  query?: never
  url: "/api/v1/students"
}

export type CreateStudentErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseStudentReadable
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateStudentError = CreateStudentErrors[keyof CreateStudentErrors]

export type CreateStudentResponses = {
  /**
   * Student created successfully
   */
  201: StudentReadable
}

export type CreateStudentResponse =
  CreateStudentResponses[keyof CreateStudentResponses]

export type CreateRoleData = {
  body: RoleDtoWritable
  path?: never
  query?: never
  url: "/api/v1/roles"
}

export type CreateRoleErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseRoleDtoReadable
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateRoleError = CreateRoleErrors[keyof CreateRoleErrors]

export type CreateRoleResponses = {
  /**
   * Role created successfully
   */
  201: ApiResponseRoleDtoReadable
}

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses]

export type FindPrerequisitesData = {
  body?: never
  path?: never
  query: {
    prerequisiteRequestDTO: PrerequisiteRequestDto
    pageable: Pageable
  }
  url: "/api/v1/prerequisite"
}

export type FindPrerequisitesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type FindPrerequisitesError =
  FindPrerequisitesErrors[keyof FindPrerequisitesErrors]

export type FindPrerequisitesResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoPrerequisiteResponseDto
}

export type FindPrerequisitesResponse =
  FindPrerequisitesResponses[keyof FindPrerequisitesResponses]

export type CreatePrerequisiteData = {
  body: CreatePrerequisiteRequestDto
  path?: never
  query?: never
  url: "/api/v1/prerequisite"
}

export type CreatePrerequisiteErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreatePrerequisiteError =
  CreatePrerequisiteErrors[keyof CreatePrerequisiteErrors]

export type CreatePrerequisiteResponses = {
  /**
   * Created
   */
  201: ResponseDtoVoid
}

export type CreatePrerequisiteResponse =
  CreatePrerequisiteResponses[keyof CreatePrerequisiteResponses]

export type CreatePrerequisiteGroupData = {
  body: CreatePrerequisiteGroupRequestDto
  path?: never
  query?: never
  url: "/api/v1/prerequisite/group"
}

export type CreatePrerequisiteGroupErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreatePrerequisiteGroupError =
  CreatePrerequisiteGroupErrors[keyof CreatePrerequisiteGroupErrors]

export type CreatePrerequisiteGroupResponses = {
  /**
   * Created
   */
  201: ResponseDtoVoid
}

export type CreatePrerequisiteGroupResponse =
  CreatePrerequisiteGroupResponses[keyof CreatePrerequisiteGroupResponses]

export type GetPrerequisiteTypesData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/prerequisite-types"
}

export type GetPrerequisiteTypesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetPrerequisiteTypesError =
  GetPrerequisiteTypesErrors[keyof GetPrerequisiteTypesErrors]

export type GetPrerequisiteTypesResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoPrerequisiteTypeResponseDto
}

export type GetPrerequisiteTypesResponse =
  GetPrerequisiteTypesResponses[keyof GetPrerequisiteTypesResponses]

export type CreatePrerequisiteTypeData = {
  body: CreatePrerequisiteTypeRequestDto
  path?: never
  query?: never
  url: "/api/v1/prerequisite-types"
}

export type CreatePrerequisiteTypeErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreatePrerequisiteTypeError =
  CreatePrerequisiteTypeErrors[keyof CreatePrerequisiteTypeErrors]

export type CreatePrerequisiteTypeResponses = {
  /**
   * Created
   */
  201: ResponseDtoVoid
}

export type CreatePrerequisiteTypeResponse =
  CreatePrerequisiteTypeResponses[keyof CreatePrerequisiteTypeResponses]

export type GetAllOrganisationsData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/organisations"
}

export type GetAllOrganisationsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllOrganisationsError =
  GetAllOrganisationsErrors[keyof GetAllOrganisationsErrors]

export type GetAllOrganisationsResponses = {
  /**
   * Organisations retrieved successfully
   */
  200: ApiResponsePagedDtoOrganisationDtoReadable
}

export type GetAllOrganisationsResponse =
  GetAllOrganisationsResponses[keyof GetAllOrganisationsResponses]

export type CreateOrganisationData = {
  body: OrganisationDtoWritable
  path?: never
  query?: never
  url: "/api/v1/organisations"
}

export type CreateOrganisationErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseOrganisationDtoReadable
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateOrganisationError =
  CreateOrganisationErrors[keyof CreateOrganisationErrors]

export type CreateOrganisationResponses = {
  /**
   * Organisation created successfully
   */
  201: ApiResponseOrganisationDtoReadable
}

export type CreateOrganisationResponse =
  CreateOrganisationResponses[keyof CreateOrganisationResponses]

export type GetAllInstructorsData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/instructors"
}

export type GetAllInstructorsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllInstructorsError =
  GetAllInstructorsErrors[keyof GetAllInstructorsErrors]

export type GetAllInstructorsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorReadable
}

export type GetAllInstructorsResponse =
  GetAllInstructorsResponses[keyof GetAllInstructorsResponses]

export type CreateInstructorData = {
  body: InstructorWritable
  path?: never
  query?: never
  url: "/api/v1/instructors"
}

export type CreateInstructorErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseInstructorReadable
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateInstructorError =
  CreateInstructorErrors[keyof CreateInstructorErrors]

export type CreateInstructorResponses = {
  /**
   * Instructor created successfully
   */
  201: InstructorReadable
}

export type CreateInstructorResponse =
  CreateInstructorResponses[keyof CreateInstructorResponses]

export type GetCoursesData = {
  body?: never
  path?: never
  query: {
    courseRequestDTO: CourseRequestDto
    pageable: Pageable
  }
  url: "/api/v1/courses"
}

export type GetCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetCoursesError = GetCoursesErrors[keyof GetCoursesErrors]

export type GetCoursesResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoCourseResponseDto
}

export type GetCoursesResponse = GetCoursesResponses[keyof GetCoursesResponses]

export type CreateCourseData = {
  body?: {
    course: CreateCourseRequestDto
    thumbnail: Blob | File
  }
  path?: never
  query?: never
  url: "/api/v1/courses"
}

export type CreateCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateCourseError = CreateCourseErrors[keyof CreateCourseErrors]

export type CreateCourseResponses = {
  /**
   * Created
   */
  201: ResponseDtoCourseResponseDto
}

export type CreateCourseResponse =
  CreateCourseResponses[keyof CreateCourseResponses]

export type GetLessonsData = {
  body?: never
  path: {
    courseId: bigint
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/courses/{courseId}/lessons"
}

export type GetLessonsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetLessonsError = GetLessonsErrors[keyof GetLessonsErrors]

export type GetLessonsResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoLessonResponseDto
}

export type GetLessonsResponse = GetLessonsResponses[keyof GetLessonsResponses]

export type CreateLessonData = {
  body?: {
    lesson: CreateLessonRequestDto
    files?: Array<Blob | File>
  }
  path: {
    courseId: bigint
  }
  query?: never
  url: "/api/v1/courses/{courseId}/lessons"
}

export type CreateLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateLessonError = CreateLessonErrors[keyof CreateLessonErrors]

export type CreateLessonResponses = {
  /**
   * Created
   */
  201: ResponseDtoLessonResponseDto
}

export type CreateLessonResponse =
  CreateLessonResponses[keyof CreateLessonResponses]

export type GetAllCategoriesData = {
  body?: never
  path?: never
  query: {
    categoryRequestDTO: CategoryRequestDto
    pageable: Pageable
  }
  url: "/api/v1/categories"
}

export type GetAllCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllCategoriesError =
  GetAllCategoriesErrors[keyof GetAllCategoriesErrors]

export type GetAllCategoriesResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoCategoryResponseDto
}

export type GetAllCategoriesResponse =
  GetAllCategoriesResponses[keyof GetAllCategoriesResponses]

export type CreateCategoryData = {
  body: CreateCategoryRequestDto
  path?: never
  query?: never
  url: "/api/v1/categories"
}

export type CreateCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateCategoryError =
  CreateCategoryErrors[keyof CreateCategoryErrors]

export type CreateCategoryResponses = {
  /**
   * Created
   */
  201: ResponseDtoCategoryResponseDto
}

export type CreateCategoryResponse =
  CreateCategoryResponses[keyof CreateCategoryResponses]

export type CreateAssessmentData = {
  body: CreateAssessmentRequestDto
  path?: never
  query?: never
  url: "/api/v1/assessments"
}

export type CreateAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateAssessmentError =
  CreateAssessmentErrors[keyof CreateAssessmentErrors]

export type CreateAssessmentResponses = {
  /**
   * Created
   */
  201: ResponseDtoVoid
}

export type CreateAssessmentResponse =
  CreateAssessmentResponses[keyof CreateAssessmentResponses]

export type GetQuestionsData = {
  body?: never
  path: {
    assessmentId: bigint
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/assessments/{assessmentId}/questions"
}

export type GetQuestionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetQuestionsError = GetQuestionsErrors[keyof GetQuestionsErrors]

export type GetQuestionsResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoQuestionResponseDto
}

export type GetQuestionsResponse =
  GetQuestionsResponses[keyof GetQuestionsResponses]

export type CreateQuestionData = {
  body: CreateQuestionRequestDto
  path: {
    assessmentId: bigint
  }
  query?: never
  url: "/api/v1/assessments/{assessmentId}/questions"
}

export type CreateQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type CreateQuestionError =
  CreateQuestionErrors[keyof CreateQuestionErrors]

export type CreateQuestionResponses = {
  /**
   * Created
   */
  201: ResponseDtoVoid
}

export type CreateQuestionResponse =
  CreateQuestionResponses[keyof CreateQuestionResponses]

export type SearchData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/users/search"
}

export type SearchErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type SearchError = SearchErrors[keyof SearchErrors]

export type SearchResponses = {
  /**
   * Paginated list of users matching the search criteria
   */
  200: ApiResponsePagedDtoUserReadable
}

export type SearchResponse = SearchResponses[keyof SearchResponses]

export type GetProfileImageData = {
  body?: never
  path: {
    fileName: string
  }
  query?: never
  url: "/api/v1/users/profile-image/{fileName}"
}

export type GetProfileImageErrors = {
  /**
   * Profile image not found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetProfileImageError =
  GetProfileImageErrors[keyof GetProfileImageErrors]

export type GetProfileImageResponses = {
  /**
   * Profile image retrieved successfully
   */
  200: Blob | File
}

export type GetProfileImageResponse =
  GetProfileImageResponses[keyof GetProfileImageResponses]

export type GetUsersByOrganisationData = {
  body?: never
  path: {
    organisationId: string
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/users/organisation/{organisationId}"
}

export type GetUsersByOrganisationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetUsersByOrganisationError =
  GetUsersByOrganisationErrors[keyof GetUsersByOrganisationErrors]

export type GetUsersByOrganisationResponses = {
  /**
   * Users retrieved successfully
   */
  200: ApiResponsePagedDtoUserReadable
}

export type GetUsersByOrganisationResponse =
  GetUsersByOrganisationResponses[keyof GetUsersByOrganisationResponses]

export type Search1Data = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/user-groups/search"
}

export type Search1Errors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type Search1Error = Search1Errors[keyof Search1Errors]

export type Search1Responses = {
  /**
   * Paginated list of user groups matching the search criteria
   */
  200: ApiResponsePagedDtoUserGroupDtoReadable
}

export type Search1Response = Search1Responses[keyof Search1Responses]

export type GetUserGroupsByOrganisationData = {
  body?: never
  path: {
    organisationUuid: string
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/user-groups/organisation/{organisationUuid}"
}

export type GetUserGroupsByOrganisationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetUserGroupsByOrganisationError =
  GetUserGroupsByOrganisationErrors[keyof GetUserGroupsByOrganisationErrors]

export type GetUserGroupsByOrganisationResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoUserGroupDtoReadable
}

export type GetUserGroupsByOrganisationResponse =
  GetUserGroupsByOrganisationResponses[keyof GetUserGroupsByOrganisationResponses]

export type SearchTrainingSessionsData = {
  body?: never
  path?: never
  query: {
    searchParams: {
      [key: string]: string
    }
    pageable: Pageable
  }
  url: "/api/v1/training-sessions/search"
}

export type SearchTrainingSessionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type SearchTrainingSessionsError =
  SearchTrainingSessionsErrors[keyof SearchTrainingSessionsErrors]

export type SearchTrainingSessionsResponses = {
  /**
   * Search results returned successfully
   */
  200: Page
}

export type SearchTrainingSessionsResponse =
  SearchTrainingSessionsResponses[keyof SearchTrainingSessionsResponses]

export type SearchStudentsData = {
  body?: never
  path?: never
  query: {
    searchParams: {
      [key: string]: string
    }
    pageable: Pageable
  }
  url: "/api/v1/students/search"
}

export type SearchStudentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type SearchStudentsError =
  SearchStudentsErrors[keyof SearchStudentsErrors]

export type SearchStudentsResponses = {
  /**
   * Search results returned successfully
   */
  200: Page
}

export type SearchStudentsResponse =
  SearchStudentsResponses[keyof SearchStudentsResponses]

export type GetEffectiveRolesForUserData = {
  body?: never
  path: {
    userUuid: string
  }
  query?: never
  url: "/api/v1/roles/users/{userUuid}/roles"
}

export type GetEffectiveRolesForUserErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetEffectiveRolesForUserError =
  GetEffectiveRolesForUserErrors[keyof GetEffectiveRolesForUserErrors]

export type GetEffectiveRolesForUserResponses = {
  /**
   * Roles retrieved successfully
   */
  200: ApiResponseListRoleDtoReadable
}

export type GetEffectiveRolesForUserResponse =
  GetEffectiveRolesForUserResponses[keyof GetEffectiveRolesForUserResponses]

export type SearchRolesData = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/roles/search"
}

export type SearchRolesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type SearchRolesError = SearchRolesErrors[keyof SearchRolesErrors]

export type SearchRolesResponses = {
  /**
   * Paginated list of roles matching the search criteria
   */
  200: ApiResponsePagedDtoRoleDtoReadable
}

export type SearchRolesResponse =
  SearchRolesResponses[keyof SearchRolesResponses]

export type GetAllPermissionsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/roles/permissions"
}

export type GetAllPermissionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAllPermissionsError =
  GetAllPermissionsErrors[keyof GetAllPermissionsErrors]

export type GetAllPermissionsResponses = {
  /**
   * Permissions retrieved successfully
   */
  200: ApiResponseListPermissionDto
}

export type GetAllPermissionsResponse =
  GetAllPermissionsResponses[keyof GetAllPermissionsResponses]

export type GetRolesByOrganisationData = {
  body?: never
  path: {
    organisationUid: string
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/roles/organisation/{organisationUid}"
}

export type GetRolesByOrganisationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetRolesByOrganisationError =
  GetRolesByOrganisationErrors[keyof GetRolesByOrganisationErrors]

export type GetRolesByOrganisationResponses = {
  /**
   * Roles retrieved successfully
   */
  200: ApiResponsePagedDtoRoleDtoReadable
}

export type GetRolesByOrganisationResponse =
  GetRolesByOrganisationResponses[keyof GetRolesByOrganisationResponses]

export type Search2Data = {
  body?: never
  path?: never
  query: {
    pageable: Pageable
  }
  url: "/api/v1/organisations/search"
}

export type Search2Errors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type Search2Error = Search2Errors[keyof Search2Errors]

export type Search2Responses = {
  /**
   * Paginated list of organisations matching the search criteria
   */
  200: ApiResponsePagedDtoOrganisationDtoReadable
}

export type Search2Response = Search2Responses[keyof Search2Responses]

export type SearchInstructorsData = {
  body?: never
  path?: never
  query: {
    searchParams: {
      [key: string]: string
    }
    pageable: Pageable
  }
  url: "/api/v1/instructors/search"
}

export type SearchInstructorsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type SearchInstructorsError =
  SearchInstructorsErrors[keyof SearchInstructorsErrors]

export type SearchInstructorsResponses = {
  /**
   * Search results returned successfully
   */
  200: Page
}

export type SearchInstructorsResponse =
  SearchInstructorsResponses[keyof SearchInstructorsResponses]

export type GetCourseThumbnailData = {
  body?: never
  path: {
    fileName: string
  }
  query?: never
  url: "/api/v1/courses/thumbnail/{fileName}"
}

export type GetCourseThumbnailErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetCourseThumbnailError =
  GetCourseThumbnailErrors[keyof GetCourseThumbnailErrors]

export type GetCourseThumbnailResponses = {
  /**
   * OK
   */
  200: Blob | File
}

export type GetCourseThumbnailResponse =
  GetCourseThumbnailResponses[keyof GetCourseThumbnailResponses]

export type GetAssessmentsByLessonData = {
  body?: never
  path: {
    lessonId: bigint
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/assessments/lesson/{lessonId}"
}

export type GetAssessmentsByLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAssessmentsByLessonError =
  GetAssessmentsByLessonErrors[keyof GetAssessmentsByLessonErrors]

export type GetAssessmentsByLessonResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoAssessmentResponseDto
}

export type GetAssessmentsByLessonResponse =
  GetAssessmentsByLessonResponses[keyof GetAssessmentsByLessonResponses]

export type GetAssessmentsByCourseData = {
  body?: never
  path: {
    courseId: bigint
  }
  query: {
    pageable: Pageable
  }
  url: "/api/v1/assessments/course/{courseId}"
}

export type GetAssessmentsByCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid
  /**
   * Unprocessable Entity
   */
  422: ResponseDtoVoid
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid
}

export type GetAssessmentsByCourseError =
  GetAssessmentsByCourseErrors[keyof GetAssessmentsByCourseErrors]

export type GetAssessmentsByCourseResponses = {
  /**
   * OK
   */
  200: ResponsePageableDtoAssessmentResponseDto
}

export type GetAssessmentsByCourseResponse =
  GetAssessmentsByCourseResponses[keyof GetAssessmentsByCourseResponses]

export type ClientOptions = {
  baseUrl:
    | "http://localhost:8080/api/v1"
    | "https://api.elimika.sarafrika.com"
    | (string & {})
}
