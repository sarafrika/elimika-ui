// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zResponseDtoVoid = z.object({
    data: z.object({}).optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zPermissionDto = z.object({
    uuid: z.string().uuid().optional(),
    moduleName: z.string().optional(),
    permissionName: z.string().optional(),
    description: z.string().optional()
});

export const zRoleDto = z.object({
    uuid: z.string().uuid().optional(),
    organisation_uuid: z.string().uuid(),
    name: z.string(),
    description: z.string().optional(),
    active: z.boolean().optional(),
    permissions: z.array(zPermissionDto).optional(),
    created_date: z.string().datetime().readonly().optional(),
    modified_date: z.string().datetime().readonly().optional()
});

/**
 * Complete user profile information including personal details, authentication, and organizational data
 */
export const zUser = z.object({
    uuid: z.string().uuid().readonly().optional(),
    first_name: z.string().min(0).max(50),
    middle_name: z.string().min(0).max(50).optional(),
    last_name: z.string().min(0).max(50),
    email: z.string().email().min(0).max(100),
    phone_number: z.string().min(0).max(20),
    dob: z.string().date(),
    username: z.string().min(0).max(50),
    organisation_uuid: z.string().uuid().optional(),
    active: z.boolean().default('true'),
    roles: z.array(zRoleDto).optional(),
    gender: z.enum([
        'MALE',
        'FEMALE',
        'OTHER',
        'PREFER_NOT_TO_SAY'
    ]).optional(),
    user_domain: z.enum([
        'student',
        'instructor',
        'admin',
        'organisation_user'
    ]),
    displayName: z.string().optional(),
    fullName: z.string().optional(),
    profile_image_url: z.string().url().readonly().optional(),
    created_date: z.string().datetime().readonly().optional(),
    modified_date: z.string().datetime().readonly().optional()
});

export const zApiResponseUser = z.object({
    success: z.boolean().optional(),
    data: zUser.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zUserGroupDto = z.object({
    uuid: z.string().uuid().optional(),
    organisation_uuid: z.string().uuid().optional(),
    name: z.string(),
    active: z.boolean(),
    created_date: z.string().datetime().readonly().optional(),
    modified_date: z.string().datetime().readonly().optional()
});

export const zApiResponseUserGroupDto = z.object({
    success: z.boolean().optional(),
    data: zUserGroupDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zTrainingSessionDto = z.object({
    uuid: z.string().uuid().optional(),
    course_uuid: z.string().uuid(),
    trainer_uuid: z.string().uuid(),
    start_date: z.string().datetime(),
    end_date: z.string().datetime(),
    class_mode: z.string().regex(/ONLINE|IN_PERSON/),
    location: z.string().optional(),
    meeting_link: z.string().optional(),
    schedule: z.string().optional(),
    capacity_limit: z.number().int().gte(1).optional(),
    current_enrollment_count: z.number().int().gte(0).optional(),
    waiting_list_count: z.number().int().gte(0).optional(),
    group_or_individual: z.string().regex(/GROUP|INDIVIDUAL/)
});

/**
 * Student profile information including guardian contacts and academic details. Links to a base user account.
 */
export const zStudent = z.object({
    uuid: z.string().uuid().readonly().optional(),
    user_uuid: z.string().uuid(),
    first_guardian_name: z.string().min(0).max(100),
    first_guardian_mobile: z.string().min(0).max(20),
    second_guardian_name: z.string().min(0).max(100).optional(),
    second_guardian_mobile: z.string().min(0).max(20).optional(),
    allGuardianContacts: z.array(z.string()).optional(),
    primaryGuardianContact: z.string().optional(),
    secondaryGuardianContact: z.string().optional(),
    created_date: z.string().datetime().readonly().optional(),
    created_by: z.string().readonly().optional(),
    updated_date: z.string().datetime().readonly().optional(),
    updated_by: z.string().readonly().optional()
});

export const zApiResponseRoleDto = z.object({
    success: z.boolean().optional(),
    data: zRoleDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zUpdatePrerequisiteRequestDto = z.object({
    prerequisiteTypeId: z.coerce.bigint().optional(),
    courseId: z.coerce.bigint().optional(),
    requiredForCourseId: z.coerce.bigint().optional(),
    minimumScore: z.number().optional()
});

export const zUpdatePrerequisiteGroupRequestDto = z.object({
    courseId: z.coerce.bigint().optional(),
    groupType: z.enum([
        'AND',
        'OR'
    ]).optional(),
    prerequisiteIds: z.array(z.coerce.bigint()).optional()
});

export const zOrganisationDto = z.object({
    uuid: z.string().uuid().optional(),
    name: z.string().min(0).max(50),
    description: z.string().optional(),
    active: z.boolean().optional(),
    code: z.string().optional(),
    slug: z.string().readonly().optional(),
    domain: z.string(),
    created_date: z.string().datetime().readonly().optional(),
    updated_date: z.string().datetime().readonly().optional()
});

export const zApiResponseOrganisationDto = z.object({
    success: z.boolean().optional(),
    data: zOrganisationDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zProfessionalBodyDto = z.object({
    body_name: z.string().min(0).max(100),
    membership_no: z.string().min(0).max(50),
    member_since: z.string().date(),
    user_uuid: z.string().uuid()
});

export const zTrainingExperienceDto = z.object({
    organisation_name: z.string().min(0).max(100),
    job_title: z.string().min(0).max(100),
    work_description: z.string().min(0).max(1000),
    start_date: z.string().date(),
    end_date: z.string().date(),
    user_uuid: z.string().uuid()
});

export const zUserCertificationDto = z.object({
    issued_date: z.string().date(),
    issued_by: z.string().min(0).max(100),
    certificate_url: z.string().min(0).max(2048),
    user_uuid: z.string().uuid()
});

/**
 * Comprehensive instructor profile including professional qualifications, training experience, certifications, and location data for educational service delivery
 */
export const zInstructor = z.object({
    uuid: z.string().uuid().readonly().optional(),
    user_uuid: z.string().uuid(),
    latitude: z.number().gte(-90).lte(90).optional(),
    longitude: z.number().gte(-180).lte(180).optional(),
    website: z.string().url().min(0).max(255).regex(/^https?://.*/).optional(),
    bio: z.string().min(0).max(2000).optional(),
    professional_headline: z.string().min(0).max(150).optional(),
    professional_bodies: z.array(zProfessionalBodyDto).optional(),
    training_experiences: z.array(zTrainingExperienceDto).optional(),
    certifications: z.array(zUserCertificationDto).optional(),
    totalProfessionalCredentials: z.number().int().optional(),
    formattedLocation: z.string().optional(),
    profileComplete: z.boolean().optional(),
    full_name: z.string().readonly().optional(),
    created_date: z.string().datetime().readonly().optional(),
    created_by: z.string().readonly().optional(),
    updated_date: z.string().datetime().readonly().optional(),
    updated_by: z.string().readonly().optional()
});

export const zPricingRequestDto = z.object({
    isFree: z.boolean().optional(),
    originalPrice: z.number().optional(),
    salePrice: z.number().optional()
});

export const zUpdateCourseCategoryRequestDto = z.object({
    id: z.coerce.bigint().optional(),
    name: z.string(),
    description: z.string().optional()
});

export const zUpdateCourseLearningObjectiveRequestDto = z.object({
    id: z.coerce.bigint().optional(),
    objective: z.string().optional()
});

export const zUpdateCourseRequestDto = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    thumbnailUrl: z.string().optional(),
    durationHours: z.number().optional(),
    difficultyLevel: z.enum([
        'beginner',
        'intermediate',
        'advanced'
    ]).optional(),
    minAge: z.number().int().optional(),
    maxAge: z.number().int().optional(),
    pricing: zPricingRequestDto.optional(),
    learningObjectives: z.array(zUpdateCourseLearningObjectiveRequestDto).optional(),
    categories: z.array(zUpdateCourseCategoryRequestDto).optional()
});

export const zCategoryResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    name: z.string().optional(),
    description: z.string().optional()
});

export const zCourseLearningObjectiveResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    objective: z.string().optional()
});

export const zPricingResponseDto = z.object({
    isFree: z.boolean().optional(),
    originalPrice: z.number().optional(),
    salePrice: z.number().optional()
});

export const zCourseResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    name: z.string().optional(),
    code: z.string().optional(),
    description: z.string().optional(),
    durationHours: z.number().optional(),
    difficultyLevel: z.enum([
        'beginner',
        'intermediate',
        'advanced'
    ]).optional(),
    minAge: z.number().int().optional(),
    maxAge: z.number().int().optional(),
    classLimit: z.number().int().optional(),
    pricing: zPricingResponseDto.optional(),
    learningObjectives: z.array(zCourseLearningObjectiveResponseDto).optional(),
    categories: z.array(zCategoryResponseDto).optional()
});

export const zResponseDtoCourseResponseDto = z.object({
    data: zCourseResponseDto.optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zUpdateLessonRequestDto = z.object({
    title: z.string().optional(),
    description: z.string().optional(),
    content: z.string().optional(),
    lessonOrder: z.number().int().optional(),
    isPublished: z.boolean().optional()
});

export const zUpdateCategoryRequestDto = z.object({
    id: z.coerce.bigint().optional(),
    name: z.string().optional(),
    description: z.string().optional()
});

export const zResponseDtoCategoryResponseDto = z.object({
    data: zCategoryResponseDto.optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zUpdateAssessmentRequestDto = z.object({
    title: z.string().optional(),
    type: z.string().optional(),
    description: z.string().optional(),
    maximumScore: z.number().int().optional(),
    passingScore: z.number().int().optional(),
    dueDate: z.string().datetime().optional(),
    timeLimit: z.number().int().optional(),
    courseId: z.coerce.bigint().optional(),
    lessonId: z.coerce.bigint().optional()
});

export const zUpdateAnswerOptionRequestDto = z.object({
    optionText: z.string().optional(),
    correct: z.boolean().optional(),
    orderInQuestion: z.number().int().optional()
});

export const zUpdateQuestionRequestDto = z.object({
    description: z.string().optional(),
    questionType: z.string().optional(),
    pointValue: z.number().int().optional(),
    orderInAssessment: z.number().int().optional(),
    answerOptions: z.array(zUpdateAnswerOptionRequestDto).optional()
});

export const zApiResponseVoid = z.object({
    success: z.boolean().optional(),
    data: z.object({}).optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zApiResponseTrainingSessionDto = z.object({
    success: z.boolean().optional(),
    data: zTrainingSessionDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zApiResponseStudent = z.object({
    success: z.boolean().optional(),
    data: zStudent.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zCreatePrerequisiteRequestDto = z.object({
    prerequisiteTypeId: z.coerce.bigint().optional(),
    courseId: z.coerce.bigint().optional(),
    requiredForCourseId: z.coerce.bigint().optional(),
    minimumScore: z.number().optional()
});

export const zCreatePrerequisiteGroupRequestDto = z.object({
    courseId: z.coerce.bigint().optional(),
    groupType: z.enum([
        'AND',
        'OR'
    ]).optional(),
    prerequisiteIds: z.array(z.coerce.bigint()).optional()
});

export const zCreatePrerequisiteTypeRequestDto = z.object({
    name: z.string().optional()
});

export const zApiResponseInstructor = z.object({
    success: z.boolean().optional(),
    data: zInstructor.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zCreateCourseLearningObjectiveRequestDto = z.object({
    objective: z.string().optional()
});

export const zCreateCourseRequestDto = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    thumbnailUrl: z.string().optional(),
    difficultyLevel: z.enum([
        'beginner',
        'intermediate',
        'advanced'
    ]).optional(),
    durationHours: z.number().optional(),
    minAge: z.number().int().optional(),
    maxAge: z.number().int().optional(),
    classLimit: z.number().int().optional(),
    pricing: zPricingRequestDto.optional(),
    learningObjectives: z.array(zCreateCourseLearningObjectiveRequestDto).optional(),
    categories: z.array(zUpdateCourseCategoryRequestDto).optional(),
    instructorIds: z.array(z.coerce.bigint()).optional()
});

export const zCreateLessonContentDto = z.object({
    title: z.string().optional(),
    displayOrder: z.number().int().optional(),
    duration: z.number().int().optional(),
    contentType: z.string().optional(),
    contentText: z.string().optional()
});

export const zCreateLessonResourceRequestDto = z.object({
    title: z.string().optional(),
    resourceUrl: z.string().optional(),
    displayOrder: z.number().int().optional()
});

export const zCreateLessonRequestDto = z.object({
    title: z.string().optional(),
    description: z.string().optional(),
    lessonOrder: z.number().int().optional(),
    isPublished: z.boolean().optional(),
    content: z.array(zCreateLessonContentDto).optional(),
    resources: z.array(zCreateLessonResourceRequestDto).optional()
});

export const zLessonContentResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    title: z.string().optional(),
    displayOrder: z.number().int().optional(),
    duration: z.number().int().optional(),
    contentType: z.string().optional()
});

export const zLessonResourceResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    title: z.string().optional(),
    resourceUrl: z.string().optional(),
    displayOrder: z.number().int().optional()
});

export const zLessonResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    lessonOrder: z.number().int().optional(),
    isPublished: z.boolean().optional(),
    content: z.array(zLessonContentResponseDto).optional(),
    resources: z.array(zLessonResourceResponseDto).optional()
});

export const zResponseDtoLessonResponseDto = z.object({
    data: zLessonResponseDto.optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zCreateCategoryRequestDto = z.object({
    name: z.string(),
    description: z.string().optional()
});

export const zCreateAssessmentRequestDto = z.object({
    title: z.string().optional(),
    type: z.string().optional(),
    description: z.string().optional(),
    maximumScore: z.number().int().optional(),
    passingScore: z.number().int().optional(),
    dueDate: z.string().datetime().optional(),
    timeLimit: z.number().int().optional(),
    courseId: z.coerce.bigint().optional(),
    lessonId: z.coerce.bigint().optional()
});

export const zCreateAnswerOptionRequestDto = z.object({
    optionText: z.string().optional(),
    correct: z.boolean().optional(),
    orderInQuestion: z.number().int().optional()
});

export const zCreateQuestionRequestDto = z.object({
    description: z.string().optional(),
    questionType: z.string().optional(),
    pointValue: z.number().int().optional(),
    orderInAssessment: z.number().int().optional(),
    answerOptions: z.array(zCreateAnswerOptionRequestDto).optional()
});

export const zPageable = z.object({
    page: z.number().int().gte(0).optional(),
    size: z.number().int().gte(1).optional(),
    sort: z.array(z.string()).optional()
});

export const zPageMetadata = z.object({
    pageNumber: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    totalPages: z.number().int().optional(),
    hasNext: z.boolean().optional(),
    hasPrevious: z.boolean().optional(),
    first: z.boolean().optional(),
    last: z.boolean().optional()
});

export const zPageLinks = z.object({
    first: z.string().optional(),
    previous: z.string().optional(),
    self: z.string().optional(),
    next: z.string().optional(),
    last: z.string().optional()
});

export const zPagedDtoUser = z.object({
    content: z.array(zUser).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoUser = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoUser.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zPagedDtoRoleDto = z.object({
    content: z.array(zRoleDto).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoRoleDto = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoRoleDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zPagedDtoUserGroupDto = z.object({
    content: z.array(zUserGroupDto).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoUserGroupDto = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoUserGroupDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zPagedDtoTrainingSessionDto = z.object({
    content: z.array(zTrainingSessionDto).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoTrainingSessionDto = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoTrainingSessionDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zSortObject = z.object({
    sorted: z.boolean().optional(),
    empty: z.boolean().optional(),
    unsorted: z.boolean().optional()
});

export const zPageableObject = z.object({
    paged: z.boolean().optional(),
    pageNumber: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    offset: z.coerce.bigint().optional(),
    sort: zSortObject.optional(),
    unpaged: z.boolean().optional()
});

export const zPage = z.object({
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    first: z.boolean().optional(),
    last: z.boolean().optional(),
    pageable: zPageableObject.optional(),
    size: z.number().int().optional(),
    content: z.array(z.object({})).optional(),
    number: z.number().int().optional(),
    sort: zSortObject.optional(),
    numberOfElements: z.number().int().optional(),
    empty: z.boolean().optional()
});

export const zPagedDtoStudent = z.object({
    content: z.array(zStudent).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoStudent = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoStudent.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zApiResponseListRoleDto = z.object({
    success: z.boolean().optional(),
    data: z.array(zRoleDto).optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zApiResponseListPermissionDto = z.object({
    success: z.boolean().optional(),
    data: z.array(zPermissionDto).optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zPrerequisiteRequestDto = z.object({
    courseId: z.coerce.bigint().optional(),
    lessonId: z.coerce.bigint().optional()
});

export const zPrerequisiteTypeResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    name: z.string().optional()
});

export const zPrerequisiteResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    prerequisiteType: zPrerequisiteTypeResponseDto.optional(),
    course: zCourseResponseDto.optional(),
    requiredForCourse: zCourseResponseDto.optional(),
    minimumScore: z.number().optional()
});

export const zResponsePageableDtoPrerequisiteResponseDto = z.object({
    data: z.array(zPrerequisiteResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zResponsePageableDtoPrerequisiteTypeResponseDto = z.object({
    data: z.array(zPrerequisiteTypeResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zPagedDtoOrganisationDto = z.object({
    content: z.array(zOrganisationDto).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoOrganisationDto = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoOrganisationDto.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zPagedDtoInstructor = z.object({
    content: z.array(zInstructor).optional(),
    metadata: zPageMetadata.optional(),
    links: zPageLinks.optional()
});

export const zApiResponsePagedDtoInstructor = z.object({
    success: z.boolean().optional(),
    data: zPagedDtoInstructor.optional(),
    message: z.string().optional(),
    error: z.object({}).optional()
});

export const zCourseRequestDto = z.object({
    name: z.string().optional()
});

export const zResponsePageableDtoCourseResponseDto = z.object({
    data: z.array(zCourseResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zResponsePageableDtoLessonResponseDto = z.object({
    data: z.array(zLessonResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zCategoryRequestDto = z.object({
    name: z.string().optional()
});

export const zResponsePageableDtoCategoryResponseDto = z.object({
    data: z.array(zCategoryResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zAssessmentResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    description: z.string().optional(),
    maximumScore: z.number().int().optional(),
    passingScore: z.number().int().optional(),
    dueDate: z.string().datetime().optional(),
    timeLimit: z.number().int().optional()
});

export const zResponseDtoAssessmentResponseDto = z.object({
    data: zAssessmentResponseDto.optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zAnswerOptionResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    optionText: z.string().optional(),
    correct: z.boolean().optional(),
    orderInQuestion: z.number().int().optional()
});

export const zQuestionResponseDto = z.object({
    id: z.coerce.bigint().optional(),
    description: z.string().optional(),
    questionType: z.string().optional(),
    pointValue: z.number().int().optional(),
    orderInAssessment: z.number().int().optional(),
    answerOptions: z.array(zAnswerOptionResponseDto).optional()
});

export const zResponsePageableDtoQuestionResponseDto = z.object({
    data: z.array(zQuestionResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zResponseDtoQuestionResponseDto = z.object({
    data: zQuestionResponseDto.optional(),
    status: z.number().int().optional(),
    message: z.string().optional(),
    errors: z.object({}).optional(),
    timestamp: z.string().datetime().optional()
});

export const zResponsePageableDtoAssessmentResponseDto = z.object({
    data: z.array(zAssessmentResponseDto).optional(),
    page: z.number().int().optional(),
    size: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    totalElements: z.coerce.bigint().optional(),
    status: z.number().int().optional(),
    message: z.string().optional()
});

export const zDeleteUserParameterUuid = z.string().uuid();

/**
 * User deleted successfully
 */
export const zDeleteUserResponse = zApiResponseVoid;

export const zGetUserByUuidParameterUuid = z.string().uuid();

/**
 * User retrieved successfully
 */
export const zGetUserByUuidResponse = zApiResponseUser;

export const zUpdateUserData = z.object({
    user: zUser,
    profile_image: z.string().optional()
});

export const zUpdateUserParameterUuid = z.string().uuid();

/**
 * User updated successfully
 */
export const zUpdateUserResponse = zApiResponseUser;

export const zDeleteUserGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zDeleteUserGroupResponse = zApiResponseVoid;

export const zGetUserGroupByUuidParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zGetUserGroupByUuidResponse = zApiResponseUserGroupDto;

export const zUpdateUserGroupData = zUserGroupDto;

export const zUpdateUserGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zUpdateUserGroupResponse = zApiResponseUserGroupDto;

export const zDeleteTrainingSessionParameterUuid = z.string().uuid();

/**
 * Training session deleted successfully
 */
export const zDeleteTrainingSessionResponse = zApiResponseVoid;

export const zGetTrainingSessionByIdParameterUuid = z.string().uuid();

/**
 * Training session found
 */
export const zGetTrainingSessionByIdResponse = zTrainingSessionDto;

export const zUpdateTrainingSessionData = zTrainingSessionDto;

export const zUpdateTrainingSessionParameterUuid = z.string().uuid();

/**
 * Training session updated successfully
 */
export const zUpdateTrainingSessionResponse = zTrainingSessionDto;

export const zDeleteStudentParameterUuid = z.string().uuid();

/**
 * Student deleted successfully
 */
export const zDeleteStudentResponse = zApiResponseVoid;

export const zGetStudentByIdParameterUuid = z.string().uuid();

/**
 * Student found
 */
export const zGetStudentByIdResponse = zStudent;

export const zUpdateStudentData = zStudent;

export const zUpdateStudentParameterUuid = z.string().uuid();

/**
 * Student updated successfully
 */
export const zUpdateStudentResponse = zStudent;

export const zDeleteRoleParameterUuid = z.string().uuid();

/**
 * Role deleted successfully
 */
export const zDeleteRoleResponse = zApiResponseVoid;

export const zGetRoleByUuidParameterUuid = z.string().uuid();

/**
 * Role retrieved successfully
 */
export const zGetRoleByUuidResponse = zApiResponseRoleDto;

export const zUpdateRoleData = zRoleDto;

export const zUpdateRoleParameterUuid = z.string().uuid();

/**
 * Role updated successfully
 */
export const zUpdateRoleResponse = zApiResponseRoleDto;

export const zDeletePrerequisiteParameterPrerequisiteId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeletePrerequisiteResponse = z.void();

export const zUpdatePrerequisiteData = zUpdatePrerequisiteRequestDto;

export const zUpdatePrerequisiteParameterPrerequisiteId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdatePrerequisiteResponse = zResponseDtoVoid;

export const zDeletePrerequisiteGroupParameterPrerequisiteGroupId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeletePrerequisiteGroupResponse = z.void();

export const zUpdatePrerequisiteGroupData = zUpdatePrerequisiteGroupRequestDto;

export const zUpdatePrerequisiteGroupParameterPrerequisiteGroupId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdatePrerequisiteGroupResponse = zResponseDtoVoid;

export const zDeleteOrganisationParameterUuid = z.string().uuid();

/**
 * Organisation deleted successfully
 */
export const zDeleteOrganisationResponse = zApiResponseVoid;

export const zGetOrganisationByUuidParameterUuid = z.string().uuid();

/**
 * Organisation retrieved successfully
 */
export const zGetOrganisationByUuidResponse = zApiResponseOrganisationDto;

export const zUpdateOrganisationData = zOrganisationDto;

export const zUpdateOrganisationParameterUuid = z.string().uuid();

/**
 * Organisation updated successfully
 */
export const zUpdateOrganisationResponse = zApiResponseOrganisationDto;

export const zDeleteInstructorParameterUuid = z.string().uuid();

/**
 * Instructor deleted successfully
 */
export const zDeleteInstructorResponse = z.void();

export const zGetInstructorByUuidParameterUuid = z.string().uuid();

/**
 * Instructor found
 */
export const zGetInstructorByUuidResponse = zInstructor;

export const zUpdateInstructorData = zInstructor;

export const zUpdateInstructorParameterUuid = z.string().uuid();

/**
 * Instructor updated successfully
 */
export const zUpdateInstructorResponse = zInstructor;

export const zDeleteCourseParameterCourseId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeleteCourseResponse = z.void();

export const zGetCourseParameterCourseId = z.coerce.bigint();

/**
 * OK
 */
export const zGetCourseResponse = zResponseDtoCourseResponseDto;

export const zUpdateCourseData = zUpdateCourseRequestDto;

export const zUpdateCourseParameterCourseId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdateCourseResponse = zResponseDtoCourseResponseDto;

export const zDeleteLessonParameterCourseId = z.coerce.bigint();

export const zDeleteLessonParameterLessonId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeleteLessonResponse = z.void();

export const zGetLessonParameterCourseId = z.coerce.bigint();

export const zGetLessonParameterLessonId = z.coerce.bigint();

/**
 * OK
 */
export const zGetLessonResponse = zResponseDtoLessonResponseDto;

export const zUpdateLessonData = zUpdateLessonRequestDto;

export const zUpdateLessonParameterCourseId = z.coerce.bigint();

export const zUpdateLessonParameterLessonId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdateLessonResponse = zResponseDtoVoid;

export const zDeleteCategoryParameterCategoryId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeleteCategoryResponse = z.void();

export const zGetCategoryParameterCategoryId = z.coerce.bigint();

/**
 * OK
 */
export const zGetCategoryResponse = zResponseDtoCategoryResponseDto;

export const zUpdateCategoryData = zUpdateCategoryRequestDto;

export const zUpdateCategoryParameterCategoryId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdateCategoryResponse = zResponseDtoCategoryResponseDto;

export const zDeleteAssessmentParameterId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeleteAssessmentResponse = z.void();

export const zGetAssessmentParameterId = z.coerce.bigint();

/**
 * OK
 */
export const zGetAssessmentResponse = zResponseDtoAssessmentResponseDto;

export const zUpdateAssessmentData = zUpdateAssessmentRequestDto;

export const zUpdateAssessmentParameterId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdateAssessmentResponse = zResponseDtoVoid;

export const zDeleteQuestionParameterAssessmentId = z.coerce.bigint();

export const zDeleteQuestionParameterId = z.coerce.bigint();

/**
 * No Content
 */
export const zDeleteQuestionResponse = z.void();

export const zGetQuestionParameterAssessmentId = z.coerce.bigint();

export const zGetQuestionParameterId = z.coerce.bigint();

/**
 * OK
 */
export const zGetQuestionResponse = zResponseDtoQuestionResponseDto;

export const zUpdateQuestionData = zUpdateQuestionRequestDto;

export const zUpdateQuestionParameterAssessmentId = z.coerce.bigint();

export const zUpdateQuestionParameterId = z.coerce.bigint();

/**
 * OK
 */
export const zUpdateQuestionResponse = zResponseDtoVoid;

export const zCreateUserGroupData = zUserGroupDto;

/**
 * OK
 */
export const zCreateUserGroupResponse = zApiResponseUserGroupDto;

export const zRemoveUsersFromGroupData = z.array(z.string().uuid());

export const zRemoveUsersFromGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zRemoveUsersFromGroupResponse = zApiResponseVoid;

export const zGetUsersForUserGroupParameterUuid = z.string().uuid();

export const zGetUsersForUserGroupParameterPageable = zPageable;

/**
 * Users retrieved successfully
 */
export const zGetUsersForUserGroupResponse = zApiResponsePagedDtoUser;

export const zAddUsersToGroupData = z.array(z.string().uuid());

export const zAddUsersToGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zAddUsersToGroupResponse = zApiResponseVoid;

export const zRemoveRolesFromGroupData = z.array(z.string().uuid());

export const zRemoveRolesFromGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zRemoveRolesFromGroupResponse = zApiResponseVoid;

export const zGetRolesForUserGroupParameterUuid = z.string().uuid();

export const zGetRolesForUserGroupParameterPageable = zPageable;

/**
 * Roles retrieved successfully
 */
export const zGetRolesForUserGroupResponse = zApiResponsePagedDtoRoleDto;

export const zAssignRolesToGroupData = z.array(z.string().uuid());

export const zAssignRolesToGroupParameterUuid = z.string().uuid();

/**
 * OK
 */
export const zAssignRolesToGroupResponse = zApiResponseVoid;

export const zGetAllTrainingSessionsParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAllTrainingSessionsResponse = zApiResponsePagedDtoTrainingSessionDto;

export const zCreateTrainingSessionData = zTrainingSessionDto;

/**
 * Training session created successfully
 */
export const zCreateTrainingSessionResponse = zTrainingSessionDto;

export const zGetAllStudentsParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAllStudentsResponse = zApiResponsePagedDtoStudent;

export const zCreateStudentData = zStudent;

/**
 * Student created successfully
 */
export const zCreateStudentResponse = zStudent;

export const zCreateRoleData = zRoleDto;

/**
 * Role created successfully
 */
export const zCreateRoleResponse = zApiResponseRoleDto;

export const zFindPrerequisitesParameterPrerequisiteRequestDto = zPrerequisiteRequestDto;

export const zFindPrerequisitesParameterPageable = zPageable;

/**
 * OK
 */
export const zFindPrerequisitesResponse = zResponsePageableDtoPrerequisiteResponseDto;

export const zCreatePrerequisiteData = zCreatePrerequisiteRequestDto;

/**
 * Created
 */
export const zCreatePrerequisiteResponse = zResponseDtoVoid;

export const zCreatePrerequisiteGroupData = zCreatePrerequisiteGroupRequestDto;

/**
 * Created
 */
export const zCreatePrerequisiteGroupResponse = zResponseDtoVoid;

export const zGetPrerequisiteTypesParameterPageable = zPageable;

/**
 * OK
 */
export const zGetPrerequisiteTypesResponse = zResponsePageableDtoPrerequisiteTypeResponseDto;

export const zCreatePrerequisiteTypeData = zCreatePrerequisiteTypeRequestDto;

/**
 * Created
 */
export const zCreatePrerequisiteTypeResponse = zResponseDtoVoid;

export const zGetAllOrganisationsParameterPageable = zPageable;

/**
 * Organisations retrieved successfully
 */
export const zGetAllOrganisationsResponse = zApiResponsePagedDtoOrganisationDto;

export const zCreateOrganisationData = zOrganisationDto;

/**
 * Organisation created successfully
 */
export const zCreateOrganisationResponse = zApiResponseOrganisationDto;

export const zGetAllInstructorsParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAllInstructorsResponse = zApiResponsePagedDtoInstructor;

export const zCreateInstructorData = zInstructor;

/**
 * Instructor created successfully
 */
export const zCreateInstructorResponse = zInstructor;

export const zGetCoursesParameterCourseRequestDto = zCourseRequestDto;

export const zGetCoursesParameterPageable = zPageable;

/**
 * OK
 */
export const zGetCoursesResponse = zResponsePageableDtoCourseResponseDto;

export const zCreateCourseData = z.object({
    course: zCreateCourseRequestDto,
    thumbnail: z.string()
});

/**
 * Created
 */
export const zCreateCourseResponse = zResponseDtoCourseResponseDto;

export const zGetLessonsParameterCourseId = z.coerce.bigint();

export const zGetLessonsParameterPageable = zPageable;

/**
 * OK
 */
export const zGetLessonsResponse = zResponsePageableDtoLessonResponseDto;

export const zCreateLessonData = z.object({
    lesson: zCreateLessonRequestDto,
    files: z.array(z.string()).optional()
});

export const zCreateLessonParameterCourseId = z.coerce.bigint();

/**
 * Created
 */
export const zCreateLessonResponse = zResponseDtoLessonResponseDto;

export const zGetAllCategoriesParameterCategoryRequestDto = zCategoryRequestDto;

export const zGetAllCategoriesParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAllCategoriesResponse = zResponsePageableDtoCategoryResponseDto;

export const zCreateCategoryData = zCreateCategoryRequestDto;

/**
 * Created
 */
export const zCreateCategoryResponse = zResponseDtoCategoryResponseDto;

export const zCreateAssessmentData = zCreateAssessmentRequestDto;

/**
 * Created
 */
export const zCreateAssessmentResponse = zResponseDtoVoid;

export const zGetQuestionsParameterAssessmentId = z.coerce.bigint();

export const zGetQuestionsParameterPageable = zPageable;

/**
 * OK
 */
export const zGetQuestionsResponse = zResponsePageableDtoQuestionResponseDto;

export const zCreateQuestionData = zCreateQuestionRequestDto;

export const zCreateQuestionParameterAssessmentId = z.coerce.bigint();

/**
 * Created
 */
export const zCreateQuestionResponse = zResponseDtoVoid;

export const zSearchParameterPageable = zPageable;

/**
 * Paginated list of users matching the search criteria
 */
export const zSearchResponse = zApiResponsePagedDtoUser;

export const zGetProfileImageParameterFileName = z.string();

/**
 * Profile image retrieved successfully
 */
export const zGetProfileImageResponse = z.string();

export const zGetUsersByOrganisationParameterOrganisationId = z.string().uuid();

export const zGetUsersByOrganisationParameterPageable = zPageable;

/**
 * Users retrieved successfully
 */
export const zGetUsersByOrganisationResponse = zApiResponsePagedDtoUser;

export const zSearch1ParameterPageable = zPageable;

/**
 * Paginated list of user groups matching the search criteria
 */
export const zSearch1Response = zApiResponsePagedDtoUserGroupDto;

export const zGetUserGroupsByOrganisationParameterOrganisationUuid = z.string().uuid();

export const zGetUserGroupsByOrganisationParameterPageable = zPageable;

/**
 * OK
 */
export const zGetUserGroupsByOrganisationResponse = zApiResponsePagedDtoUserGroupDto;

export const zSearchTrainingSessionsParameterSearchParams = z.object({});

export const zSearchTrainingSessionsParameterPageable = zPageable;

/**
 * Search results returned successfully
 */
export const zSearchTrainingSessionsResponse = zPage;

export const zSearchStudentsParameterSearchParams = z.object({});

export const zSearchStudentsParameterPageable = zPageable;

/**
 * Search results returned successfully
 */
export const zSearchStudentsResponse = zPage;

export const zGetEffectiveRolesForUserParameterUserUuid = z.string().uuid();

/**
 * Roles retrieved successfully
 */
export const zGetEffectiveRolesForUserResponse = zApiResponseListRoleDto;

export const zSearchRolesParameterPageable = zPageable;

/**
 * Paginated list of roles matching the search criteria
 */
export const zSearchRolesResponse = zApiResponsePagedDtoRoleDto;

/**
 * Permissions retrieved successfully
 */
export const zGetAllPermissionsResponse = zApiResponseListPermissionDto;

export const zGetRolesByOrganisationParameterOrganisationUid = z.string().uuid();

export const zGetRolesByOrganisationParameterPageable = zPageable;

/**
 * Roles retrieved successfully
 */
export const zGetRolesByOrganisationResponse = zApiResponsePagedDtoRoleDto;

export const zSearch2ParameterPageable = zPageable;

/**
 * Paginated list of organisations matching the search criteria
 */
export const zSearch2Response = zApiResponsePagedDtoOrganisationDto;

export const zSearchInstructorsParameterSearchParams = z.object({});

export const zSearchInstructorsParameterPageable = zPageable;

/**
 * Search results returned successfully
 */
export const zSearchInstructorsResponse = zPage;

export const zGetCourseThumbnailParameterFileName = z.string();

/**
 * OK
 */
export const zGetCourseThumbnailResponse = z.string();

export const zGetAssessmentsByLessonParameterLessonId = z.coerce.bigint();

export const zGetAssessmentsByLessonParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAssessmentsByLessonResponse = zResponsePageableDtoAssessmentResponseDto;

export const zGetAssessmentsByCourseParameterCourseId = z.coerce.bigint();

export const zGetAssessmentsByCourseParameterPageable = zPageable;

/**
 * OK
 */
export const zGetAssessmentsByCourseResponse = zResponsePageableDtoAssessmentResponseDto;