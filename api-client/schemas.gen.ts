// This file is auto-generated by @hey-api/openapi-ts

export const ResponseDTOVoidSchema = {
  type: "object",
  properties: {
    data: {
      type: "object",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const PermissionDTOSchema = {
  type: "object",
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
    },
    moduleName: {
      type: "string",
    },
    permissionName: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const

export const RoleDTOSchema = {
  type: "object",
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
    },
    organisation_uuid: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    active: {
      type: "boolean",
    },
    permissions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PermissionDTO",
      },
    },
    created_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
  required: ["name", "organisation_uuid"],
} as const

export const UserSchema = {
  type: "object",
  description:
    "Complete user profile information including personal details, authentication, and organizational data",
  example: {
    uuid: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    first_name: "Jane",
    middle_name: "A.",
    last_name: "Doe",
    email: "jane.doe@example.com",
    phone_number: "+254712345678",
    profile_image_url: "https://example.com/images/jane.jpg",
    dob: "1990-01-01",
    username: "janedoe",
    organisation_uuid: "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
    active: true,
    created_date: "2024-04-01T12:00:00",
    modified_date: "2024-04-15T15:30:00",
    gender: "FEMALE",
    user_domain: ["Student", "Instructor"],
    roles: [
      {
        uuid: "role-uuid-1",
        name: "ADMIN",
        description: "Administrator role",
      },
    ],
  },
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.",
      example: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
      readOnly: true,
    },
    first_name: {
      type: "string",
      description:
        "**[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.",
      example: "Jane",
      maxLength: 50,
      minLength: 0,
    },
    middle_name: {
      type: "string",
      description:
        "**[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.",
      example: "A.",
      maxLength: 50,
      minLength: 0,
    },
    last_name: {
      type: "string",
      description:
        "**[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.",
      example: "Doe",
      maxLength: 50,
      minLength: 0,
    },
    email: {
      type: "string",
      format: "email",
      description:
        "**[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.",
      example: "jane.doe@example.com",
      maxLength: 100,
      minLength: 0,
    },
    phone_number: {
      type: "string",
      description:
        "**[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.",
      example: "+254712345678",
      maxLength: 20,
      minLength: 0,
    },
    dob: {
      type: "string",
      format: "date",
      description:
        "**[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.",
      example: "1990-01-01",
    },
    username: {
      type: "string",
      description:
        "**[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.",
      example: "janedoe",
      maxLength: 50,
      minLength: 0,
    },
    organisation_uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[OPTIONAL]** UUID of the organization this user belongs to. Links user to their organizational context and determines available resources. Can be null for system administrators.",
      example: "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
    },
    active: {
      type: "boolean",
      default: "true",
      description:
        "**[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.",
      example: true,
    },
    roles: {
      type: "array",
      description:
        "**[OPTIONAL]** Set of roles assigned to this user. Determines user permissions and access levels within the system. Can be empty for users with no specific roles assigned.",
      example: [
        {
          uuid: "role-uuid-1",
          name: "ADMIN",
          description: "Administrator role with full system access",
        },
        {
          uuid: "role-uuid-2",
          name: "USER",
          description: "Standard user role with basic access",
        },
      ],
      items: {
        $ref: "#/components/schemas/RoleDTO",
      },
      uniqueItems: true,
    },
    gender: {
      type: "string",
      description:
        "**[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.",
      enum: ["MALE", "FEMALE", "OTHER", "PREFER_NOT_TO_SAY"],
      example: "FEMALE",
    },
    user_domain: {
      type: "array",
      description:
        "**[OPTIONAL]** List of domain roles that define the user's functional areas within the system. Determines available features and workflows. Can contain multiple values.",
      enum: ["student", "instructor", "admin", "organisation_user"],
      example: ["Student", "Instructor"],
      items: {
        type: "string",
        enum: ["student", "instructor", "admin", "organisation_user"],
      },
    },
    displayName: {
      type: "string",
    },
    fullName: {
      type: "string",
    },
    profile_image_url: {
      type: "string",
      format: "uri",
      description:
        "**[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.",
      example: "https://example.com/images/jane.jpg",
      readOnly: true,
    },
    created_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.",
      example: "2024-04-01T12:00:00",
      readOnly: true,
    },
    modified_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.",
      example: "2024-04-15T15:30:00",
      readOnly: true,
    },
  },
  required: [
    "active",
    "dob",
    "email",
    "first_name",
    "last_name",
    "phone_number",
    "user_domain",
    "username",
  ],
} as const

export const ApiResponseUserSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/User",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const UserGroupDTOSchema = {
  type: "object",
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
    },
    organisation_uuid: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
    },
    active: {
      type: "boolean",
    },
    created_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
  required: ["active", "name"],
} as const

export const ApiResponseUserGroupDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/UserGroupDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const TrainingSessionDTOSchema = {
  type: "object",
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
    },
    course_uuid: {
      type: "string",
      format: "uuid",
    },
    trainer_uuid: {
      type: "string",
      format: "uuid",
    },
    start_date: {
      type: "string",
      format: "date-time",
    },
    end_date: {
      type: "string",
      format: "date-time",
    },
    class_mode: {
      type: "string",
      pattern: "ONLINE|IN_PERSON",
    },
    location: {
      type: "string",
    },
    meeting_link: {
      type: "string",
    },
    schedule: {
      type: "string",
    },
    capacity_limit: {
      type: "integer",
      format: "int32",
      minimum: 1,
    },
    current_enrollment_count: {
      type: "integer",
      format: "int32",
      minimum: 0,
    },
    waiting_list_count: {
      type: "integer",
      format: "int32",
      minimum: 0,
    },
    group_or_individual: {
      type: "string",
      pattern: "GROUP|INDIVIDUAL",
    },
  },
  required: [
    "class_mode",
    "course_uuid",
    "end_date",
    "group_or_individual",
    "start_date",
    "trainer_uuid",
  ],
} as const

export const StudentSchema = {
  type: "object",
  description:
    "Student profile information including guardian contacts and academic details. Links to a base user account.",
  example: {
    uuid: "s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv",
    user_uuid: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    first_guardian_name: "John Doe",
    first_guardian_mobile: "+254712345678",
    second_guardian_name: "Jane Doe",
    second_guardian_mobile: "+254787654321",
    created_date: "2024-04-01T12:00:00",
    created_by: "admin@sarafrika.com",
    updated_date: "2024-04-15T15:30:00",
    updated_by: "admin@sarafrika.com",
  },
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.",
      example: "s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv",
      readOnly: true,
    },
    user_uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.",
      example: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    },
    first_guardian_name: {
      type: "string",
      description:
        "**[REQUIRED]** Full name of the primary guardian/parent. This is the main emergency contact for the student.",
      example: "John Doe",
      maxLength: 100,
      minLength: 0,
    },
    first_guardian_mobile: {
      type: "string",
      description:
        "**[REQUIRED]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.",
      example: "+254712345678",
      maxLength: 20,
      minLength: 0,
    },
    second_guardian_name: {
      type: "string",
      description:
        "**[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.",
      example: "Jane Doe",
      maxLength: 100,
      minLength: 0,
    },
    second_guardian_mobile: {
      type: "string",
      description:
        "**[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.",
      example: "+254787654321",
      maxLength: 20,
      minLength: 0,
    },
    allGuardianContacts: {
      type: "array",
      items: {
        type: "string",
      },
    },
    primaryGuardianContact: {
      type: "string",
    },
    secondaryGuardianContact: {
      type: "string",
    },
    created_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.",
      example: "2024-04-01T12:00:00",
      readOnly: true,
    },
    created_by: {
      type: "string",
      description:
        "**[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.",
      example: "admin@sarafrika.com",
      readOnly: true,
    },
    updated_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.",
      example: "2024-04-15T15:30:00",
      readOnly: true,
    },
    updated_by: {
      type: "string",
      description:
        "**[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.",
      example: "admin@sarafrika.com",
      readOnly: true,
    },
  },
  required: ["first_guardian_mobile", "first_guardian_name", "user_uuid"],
} as const

export const ApiResponseRoleDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/RoleDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const UpdatePrerequisiteRequestDTOSchema = {
  type: "object",
  properties: {
    prerequisiteTypeId: {
      type: "integer",
      format: "int64",
    },
    courseId: {
      type: "integer",
      format: "int64",
    },
    requiredForCourseId: {
      type: "integer",
      format: "int64",
    },
    minimumScore: {
      type: "number",
      format: "double",
    },
  },
} as const

export const UpdatePrerequisiteGroupRequestDTOSchema = {
  type: "object",
  properties: {
    courseId: {
      type: "integer",
      format: "int64",
    },
    groupType: {
      type: "string",
      enum: ["AND", "OR"],
    },
    prerequisiteIds: {
      type: "array",
      items: {
        type: "integer",
        format: "int64",
      },
    },
  },
} as const

export const OrganisationDTOSchema = {
  type: "object",
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
    },
    name: {
      type: "string",
      maxLength: 50,
      minLength: 0,
    },
    description: {
      type: "string",
    },
    active: {
      type: "boolean",
    },
    code: {
      type: "string",
    },
    slug: {
      type: "string",
      readOnly: true,
    },
    domain: {
      type: "string",
    },
    created_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    updated_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
  required: ["domain", "name"],
} as const

export const ApiResponseOrganisationDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/OrganisationDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const InstructorSchema = {
  type: "object",
  description:
    "Comprehensive instructor profile including professional qualifications, training experience, certifications, and location data for educational service delivery",
  example: {
    uuid: "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
    user_uuid: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    full_name: "Dr. Jane Smith",
    latitude: -1.2921,
    longitude: 36.8219,
    website: "https://drjanesmith.com",
    bio: "Experienced educator with 10+ years in software development training and mentorship.",
    professional_headline:
      "Senior Software Development Instructor & Tech Consultant",
    professional_bodies: [
      {
        uuid: "pb-uuid-1",
        name: "IEEE",
        membership_number: "12345678",
      },
    ],
    training_experiences: [
      {
        uuid: "te-uuid-1",
        title: "Full Stack Development Bootcamp",
        duration_months: 6,
        organization: "Tech Academy",
      },
    ],
    certifications: [
      {
        uuid: "cert-uuid-1",
        name: "AWS Certified Solutions Architect",
        issuing_organization: "Amazon Web Services",
        issue_date: "2023-01-15",
      },
    ],
    created_date: "2024-04-01T12:00:00",
    created_by: "admin@sarafrika.com",
    updated_date: "2024-04-15T15:30:00",
    updated_by: "admin@sarafrika.com",
  },
  properties: {
    uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.",
      example: "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
      readOnly: true,
    },
    user_uuid: {
      type: "string",
      format: "uuid",
      description:
        "**[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.",
      example: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    },
    latitude: {
      type: "number",
      description:
        "**[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
      example: -1.2921,
      maximum: 90,
      minimum: -90,
    },
    longitude: {
      type: "number",
      description:
        "**[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
      example: 36.8219,
      maximum: 180,
      minimum: -180,
    },
    website: {
      type: "string",
      format: "uri",
      description:
        "**[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.",
      example: "https://drjanesmith.com",
      maxLength: 255,
      minLength: 0,
      pattern: "^https?://.*",
    },
    bio: {
      type: "string",
      description:
        "**[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.",
      example:
        "Experienced educator with 10+ years in software development training and mentorship. Specializes in full-stack development, cloud architecture, and agile methodologies.",
      maxLength: 2000,
      minLength: 0,
    },
    professional_headline: {
      type: "string",
      description:
        "**[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.",
      example: "Senior Software Development Instructor & Tech Consultant",
      maxLength: 150,
      minLength: 0,
    },
    professional_bodies: {
      type: "array",
      description:
        "**[OPTIONAL]** List of professional bodies and associations the instructor is affiliated with. Used to verify professional standing and credibility.",
      example: [
        {
          uuid: "pb-uuid-1",
          name: "Institute of Electrical and Electronics Engineers (IEEE)",
          membership_number: "12345678",
          membership_type: "Professional Member",
          status: "Active",
        },
      ],
      items: {
        $ref: "#/components/schemas/ProfessionalBodyDTO",
      },
    },
    training_experiences: {
      type: "array",
      description:
        "**[OPTIONAL]** Detailed training and teaching experience history. Documents instructor's practical experience in delivering educational content.",
      example: [
        {
          uuid: "te-uuid-1",
          title: "Full Stack Development Bootcamp",
          organization: "Tech Academy Kenya",
          duration_months: 6,
          participants_trained: 150,
          start_date: "2022-01-01",
          end_date: "2023-12-31",
        },
      ],
      items: {
        $ref: "#/components/schemas/TrainingExperienceDTO",
      },
    },
    certifications: {
      type: "array",
      description:
        "**[OPTIONAL]** Professional certifications and qualifications held by the instructor. Used to verify expertise and authorize teaching specific subjects.",
      example: [
        {
          uuid: "cert-uuid-1",
          name: "AWS Certified Solutions Architect - Professional",
          issuing_organization: "Amazon Web Services",
          issue_date: "2023-01-15",
          expiry_date: "2026-01-15",
          credential_id: "AWS-SAP-12345",
        },
      ],
      items: {
        $ref: "#/components/schemas/UserCertificationDTO",
      },
    },
    totalProfessionalCredentials: {
      type: "integer",
      format: "int32",
    },
    formattedLocation: {
      type: "string",
    },
    profileComplete: {
      type: "boolean",
    },
    full_name: {
      type: "string",
      description:
        "**[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.",
      example: "Dr. Jane Smith",
      readOnly: true,
    },
    created_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.",
      example: "2024-04-01T12:00:00",
      readOnly: true,
    },
    created_by: {
      type: "string",
      description:
        "**[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.",
      example: "admin@sarafrika.com",
      readOnly: true,
    },
    updated_date: {
      type: "string",
      format: "date-time",
      description:
        "**[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.",
      example: "2024-04-15T15:30:00",
      readOnly: true,
    },
    updated_by: {
      type: "string",
      description:
        "**[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.",
      example: "admin@sarafrika.com",
      readOnly: true,
    },
  },
  required: ["user_uuid"],
} as const

export const ProfessionalBodyDTOSchema = {
  type: "object",
  properties: {
    body_name: {
      type: "string",
      description: "Name of the professional body",
      example: "Kenya Medical Association",
      maxLength: 100,
      minLength: 0,
    },
    membership_no: {
      type: "string",
      description: "Membership number assigned by the body",
      example: "KM123456",
      maxLength: 50,
      minLength: 0,
    },
    member_since: {
      type: "string",
      format: "date",
      description: "Date when the user became a member (ISO 8601 format)",
      example: "2020-06-15",
    },
    user_uuid: {
      type: "string",
      format: "uuid",
      description: "UUID of the user associated with this membership",
      example: "f4b4e0c2-8c7b-4d2b-b2a1-198c7a7f3df0",
    },
  },
  required: ["body_name", "member_since", "membership_no", "user_uuid"],
} as const

export const TrainingExperienceDTOSchema = {
  type: "object",
  properties: {
    organisation_name: {
      type: "string",
      description: "Name of the organisation where the experience was gained",
      example: "World Health Organization",
      maxLength: 100,
      minLength: 0,
    },
    job_title: {
      type: "string",
      description: "Job title held during the training or experience",
      example: "Health Program Analyst",
      maxLength: 100,
      minLength: 0,
    },
    work_description: {
      type: "string",
      description: "Description of responsibilities and tasks performed",
      example:
        "Managed regional health analytics dashboard and provided training to local analysts.",
      maxLength: 1000,
      minLength: 0,
    },
    start_date: {
      type: "string",
      format: "date",
      description: "Start date of the training/experience (ISO 8601 format)",
      example: "2021-01-10",
    },
    end_date: {
      type: "string",
      format: "date",
      description: "End date of the training/experience (ISO 8601 format)",
      example: "2022-12-20",
    },
    user_uuid: {
      type: "string",
      format: "uuid",
      description: "UUID of the user associated with this training/experience",
      example: "ca4f98b1-11d1-4a74-b4fa-120b5cbeed2b",
    },
  },
  required: [
    "end_date",
    "job_title",
    "organisation_name",
    "start_date",
    "user_uuid",
    "work_description",
  ],
} as const

export const UserCertificationDTOSchema = {
  type: "object",
  properties: {
    issued_date: {
      type: "string",
      format: "date",
      description: "Date the certificate was issued (ISO 8601 format)",
      example: "2024-03-10",
    },
    issued_by: {
      type: "string",
      description: "Name of the issuing organization",
      example: "Coursera",
      maxLength: 100,
      minLength: 0,
    },
    certificate_url: {
      type: "string",
      description: "URL pointing to the certificate resource",
      example: "https://example.com/certificate/12345",
      maxLength: 2048,
      minLength: 0,
    },
    user_uuid: {
      type: "string",
      format: "uuid",
      description: "UUID of the user who owns this certificate",
      example: "d2e6f6c4-3d44-11ee-be56-0242ac120002",
    },
  },
  required: ["certificate_url", "issued_by", "issued_date", "user_uuid"],
} as const

export const PricingRequestDTOSchema = {
  type: "object",
  properties: {
    isFree: {
      type: "boolean",
    },
    originalPrice: {
      type: "number",
    },
    salePrice: {
      type: "number",
    },
  },
} as const

export const UpdateCourseCategoryRequestDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
  required: ["name"],
} as const

export const UpdateCourseLearningObjectiveRequestDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    objective: {
      type: "string",
    },
  },
} as const

export const UpdateCourseRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    thumbnailUrl: {
      type: "string",
    },
    durationHours: {
      type: "number",
    },
    difficultyLevel: {
      type: "string",
      enum: ["beginner", "intermediate", "advanced"],
    },
    minAge: {
      type: "integer",
      format: "int32",
    },
    maxAge: {
      type: "integer",
      format: "int32",
    },
    pricing: {
      $ref: "#/components/schemas/PricingRequestDTO",
    },
    learningObjectives: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UpdateCourseLearningObjectiveRequestDTO",
      },
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UpdateCourseCategoryRequestDTO",
      },
    },
  },
} as const

export const CategoryResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const

export const CourseLearningObjectiveResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    objective: {
      type: "string",
    },
  },
} as const

export const CourseResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
    },
    code: {
      type: "string",
    },
    description: {
      type: "string",
    },
    durationHours: {
      type: "number",
    },
    difficultyLevel: {
      type: "string",
      enum: ["beginner", "intermediate", "advanced"],
    },
    minAge: {
      type: "integer",
      format: "int32",
    },
    maxAge: {
      type: "integer",
      format: "int32",
    },
    classLimit: {
      type: "integer",
      format: "int32",
    },
    pricing: {
      $ref: "#/components/schemas/PricingResponseDTO",
    },
    learningObjectives: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CourseLearningObjectiveResponseDTO",
      },
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CategoryResponseDTO",
      },
    },
  },
} as const

export const PricingResponseDTOSchema = {
  type: "object",
  properties: {
    isFree: {
      type: "boolean",
    },
    originalPrice: {
      type: "number",
    },
    salePrice: {
      type: "number",
    },
  },
} as const

export const ResponseDTOCourseResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/CourseResponseDTO",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const UpdateLessonRequestDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    content: {
      type: "string",
    },
    lessonOrder: {
      type: "integer",
      format: "int32",
    },
    isPublished: {
      type: "boolean",
    },
  },
} as const

export const UpdateCategoryRequestDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
} as const

export const ResponseDTOCategoryResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/CategoryResponseDTO",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const UpdateAssessmentRequestDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    type: {
      type: "string",
    },
    description: {
      type: "string",
    },
    maximumScore: {
      type: "integer",
      format: "int32",
    },
    passingScore: {
      type: "integer",
      format: "int32",
    },
    dueDate: {
      type: "string",
      format: "date-time",
    },
    timeLimit: {
      type: "integer",
      format: "int32",
    },
    courseId: {
      type: "integer",
      format: "int64",
    },
    lessonId: {
      type: "integer",
      format: "int64",
    },
  },
} as const

export const UpdateAnswerOptionRequestDTOSchema = {
  type: "object",
  properties: {
    optionText: {
      type: "string",
    },
    correct: {
      type: "boolean",
    },
    orderInQuestion: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const UpdateQuestionRequestDTOSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
    },
    questionType: {
      type: "string",
    },
    pointValue: {
      type: "integer",
      format: "int32",
    },
    orderInAssessment: {
      type: "integer",
      format: "int32",
    },
    answerOptions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UpdateAnswerOptionRequestDTO",
      },
    },
  },
} as const

export const ApiResponseVoidSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      type: "object",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const ApiResponseTrainingSessionDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/TrainingSessionDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const ApiResponseStudentSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/Student",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const CreatePrerequisiteRequestDTOSchema = {
  type: "object",
  properties: {
    prerequisiteTypeId: {
      type: "integer",
      format: "int64",
    },
    courseId: {
      type: "integer",
      format: "int64",
    },
    requiredForCourseId: {
      type: "integer",
      format: "int64",
    },
    minimumScore: {
      type: "number",
      format: "double",
    },
  },
} as const

export const CreatePrerequisiteGroupRequestDTOSchema = {
  type: "object",
  properties: {
    courseId: {
      type: "integer",
      format: "int64",
    },
    groupType: {
      type: "string",
      enum: ["AND", "OR"],
    },
    prerequisiteIds: {
      type: "array",
      items: {
        type: "integer",
        format: "int64",
      },
    },
  },
} as const

export const CreatePrerequisiteTypeRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
  },
} as const

export const ApiResponseInstructorSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/Instructor",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const CreateCourseLearningObjectiveRequestDTOSchema = {
  type: "object",
  properties: {
    objective: {
      type: "string",
    },
  },
} as const

export const CreateCourseRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    thumbnailUrl: {
      type: "string",
    },
    difficultyLevel: {
      type: "string",
      enum: ["beginner", "intermediate", "advanced"],
    },
    durationHours: {
      type: "number",
    },
    minAge: {
      type: "integer",
      format: "int32",
    },
    maxAge: {
      type: "integer",
      format: "int32",
    },
    classLimit: {
      type: "integer",
      format: "int32",
    },
    pricing: {
      $ref: "#/components/schemas/PricingRequestDTO",
    },
    learningObjectives: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateCourseLearningObjectiveRequestDTO",
      },
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UpdateCourseCategoryRequestDTO",
      },
    },
    instructorIds: {
      type: "array",
      items: {
        type: "integer",
        format: "int64",
      },
      uniqueItems: true,
    },
  },
} as const

export const CreateLessonContentDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    displayOrder: {
      type: "integer",
      format: "int32",
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    contentType: {
      type: "string",
    },
    contentText: {
      type: "string",
    },
  },
} as const

export const CreateLessonRequestDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    lessonOrder: {
      type: "integer",
      format: "int32",
    },
    isPublished: {
      type: "boolean",
    },
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateLessonContentDTO",
      },
    },
    resources: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateLessonResourceRequestDTO",
      },
    },
  },
} as const

export const CreateLessonResourceRequestDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    resourceUrl: {
      type: "string",
    },
    displayOrder: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const LessonContentResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
    },
    displayOrder: {
      type: "integer",
      format: "int32",
    },
    duration: {
      type: "integer",
      format: "int32",
    },
    contentType: {
      type: "string",
    },
  },
} as const

export const LessonResourceResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
    },
    resourceUrl: {
      type: "string",
    },
    displayOrder: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const LessonResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    lessonOrder: {
      type: "integer",
      format: "int32",
    },
    isPublished: {
      type: "boolean",
    },
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/LessonContentResponseDTO",
      },
    },
    resources: {
      type: "array",
      items: {
        $ref: "#/components/schemas/LessonResourceResponseDTO",
      },
    },
  },
} as const

export const ResponseDTOLessonResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/LessonResponseDTO",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const CreateCategoryRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    description: {
      type: "string",
    },
  },
  required: ["name"],
} as const

export const CreateAssessmentRequestDTOSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    type: {
      type: "string",
    },
    description: {
      type: "string",
    },
    maximumScore: {
      type: "integer",
      format: "int32",
    },
    passingScore: {
      type: "integer",
      format: "int32",
    },
    dueDate: {
      type: "string",
      format: "date-time",
    },
    timeLimit: {
      type: "integer",
      format: "int32",
    },
    courseId: {
      type: "integer",
      format: "int64",
    },
    lessonId: {
      type: "integer",
      format: "int64",
    },
  },
} as const

export const CreateAnswerOptionRequestDTOSchema = {
  type: "object",
  properties: {
    optionText: {
      type: "string",
    },
    correct: {
      type: "boolean",
    },
    orderInQuestion: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const CreateQuestionRequestDTOSchema = {
  type: "object",
  properties: {
    description: {
      type: "string",
    },
    questionType: {
      type: "string",
    },
    pointValue: {
      type: "integer",
      format: "int32",
    },
    orderInAssessment: {
      type: "integer",
      format: "int32",
    },
    answerOptions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CreateAnswerOptionRequestDTO",
      },
    },
  },
} as const

export const PageableSchema = {
  type: "object",
  properties: {
    page: {
      type: "integer",
      format: "int32",
      minimum: 0,
    },
    size: {
      type: "integer",
      format: "int32",
      minimum: 1,
    },
    sort: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
} as const

export const ApiResponsePagedDTOUserSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOUser",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PageLinksSchema = {
  type: "object",
  properties: {
    first: {
      type: "string",
    },
    previous: {
      type: "string",
    },
    self: {
      type: "string",
    },
    next: {
      type: "string",
    },
    last: {
      type: "string",
    },
  },
} as const

export const PageMetadataSchema = {
  type: "object",
  properties: {
    pageNumber: {
      type: "integer",
      format: "int32",
    },
    pageSize: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    hasNext: {
      type: "boolean",
    },
    hasPrevious: {
      type: "boolean",
    },
    first: {
      type: "boolean",
    },
    last: {
      type: "boolean",
    },
  },
} as const

export const PagedDTOUserSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const ApiResponsePagedDTORoleDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTORoleDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTORoleDTOSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RoleDTO",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const ApiResponsePagedDTOUserGroupDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOUserGroupDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTOUserGroupDTOSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UserGroupDTO",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const ApiResponsePagedDTOTrainingSessionDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOTrainingSessionDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTOTrainingSessionDTOSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TrainingSessionDTO",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const PageSchema = {
  type: "object",
  properties: {
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    first: {
      type: "boolean",
    },
    last: {
      type: "boolean",
    },
    pageable: {
      $ref: "#/components/schemas/PageableObject",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    content: {
      type: "array",
      items: {
        type: "object",
      },
    },
    number: {
      type: "integer",
      format: "int32",
    },
    sort: {
      $ref: "#/components/schemas/SortObject",
    },
    numberOfElements: {
      type: "integer",
      format: "int32",
    },
    empty: {
      type: "boolean",
    },
  },
} as const

export const PageableObjectSchema = {
  type: "object",
  properties: {
    paged: {
      type: "boolean",
    },
    pageNumber: {
      type: "integer",
      format: "int32",
    },
    pageSize: {
      type: "integer",
      format: "int32",
    },
    offset: {
      type: "integer",
      format: "int64",
    },
    sort: {
      $ref: "#/components/schemas/SortObject",
    },
    unpaged: {
      type: "boolean",
    },
  },
} as const

export const SortObjectSchema = {
  type: "object",
  properties: {
    sorted: {
      type: "boolean",
    },
    empty: {
      type: "boolean",
    },
    unsorted: {
      type: "boolean",
    },
  },
} as const

export const ApiResponsePagedDTOStudentSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOStudent",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTOStudentSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Student",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const ApiResponseListRoleDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RoleDTO",
      },
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const ApiResponseListPermissionDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PermissionDTO",
      },
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PrerequisiteRequestDTOSchema = {
  type: "object",
  properties: {
    courseId: {
      type: "integer",
      format: "int64",
    },
    lessonId: {
      type: "integer",
      format: "int64",
    },
  },
} as const

export const PrerequisiteResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    prerequisiteType: {
      $ref: "#/components/schemas/PrerequisiteTypeResponseDTO",
    },
    course: {
      $ref: "#/components/schemas/CourseResponseDTO",
    },
    requiredForCourse: {
      $ref: "#/components/schemas/CourseResponseDTO",
    },
    minimumScore: {
      type: "number",
      format: "double",
    },
  },
} as const

export const PrerequisiteTypeResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    name: {
      type: "string",
    },
  },
} as const

export const ResponsePageableDTOPrerequisiteResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PrerequisiteResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const ResponsePageableDTOPrerequisiteTypeResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/PrerequisiteTypeResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const ApiResponsePagedDTOOrganisationDTOSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOOrganisationDTO",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTOOrganisationDTOSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/OrganisationDTO",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const ApiResponsePagedDTOInstructorSchema = {
  type: "object",
  properties: {
    success: {
      type: "boolean",
    },
    data: {
      $ref: "#/components/schemas/PagedDTOInstructor",
    },
    message: {
      type: "string",
    },
    error: {
      type: "object",
    },
  },
} as const

export const PagedDTOInstructorSchema = {
  type: "object",
  properties: {
    content: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Instructor",
      },
    },
    metadata: {
      $ref: "#/components/schemas/PageMetadata",
    },
    links: {
      $ref: "#/components/schemas/PageLinks",
    },
  },
} as const

export const CourseRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
  },
} as const

export const ResponsePageableDTOCourseResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CourseResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const ResponsePageableDTOLessonResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/LessonResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const CategoryRequestDTOSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
  },
} as const

export const ResponsePageableDTOCategoryResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/CategoryResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const AssessmentResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    title: {
      type: "string",
    },
    type: {
      type: "string",
    },
    description: {
      type: "string",
    },
    maximumScore: {
      type: "integer",
      format: "int32",
    },
    passingScore: {
      type: "integer",
      format: "int32",
    },
    dueDate: {
      type: "string",
      format: "date-time",
    },
    timeLimit: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const ResponseDTOAssessmentResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/AssessmentResponseDTO",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const AnswerOptionResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    optionText: {
      type: "string",
    },
    correct: {
      type: "boolean",
    },
    orderInQuestion: {
      type: "integer",
      format: "int32",
    },
  },
} as const

export const QuestionResponseDTOSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      format: "int64",
    },
    description: {
      type: "string",
    },
    questionType: {
      type: "string",
    },
    pointValue: {
      type: "integer",
      format: "int32",
    },
    orderInAssessment: {
      type: "integer",
      format: "int32",
    },
    answerOptions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AnswerOptionResponseDTO",
      },
    },
  },
} as const

export const ResponsePageableDTOQuestionResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuestionResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const

export const ResponseDTOQuestionResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/QuestionResponseDTO",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
    errors: {
      type: "object",
      additionalProperties: {
        type: "string",
      },
    },
    timestamp: {
      type: "string",
      format: "date-time",
    },
  },
} as const

export const ResponsePageableDTOAssessmentResponseDTOSchema = {
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AssessmentResponseDTO",
      },
    },
    page: {
      type: "integer",
      format: "int32",
    },
    size: {
      type: "integer",
      format: "int32",
    },
    totalPages: {
      type: "integer",
      format: "int32",
    },
    totalElements: {
      type: "integer",
      format: "int64",
    },
    status: {
      type: "integer",
      format: "int32",
    },
    message: {
      type: "string",
    },
  },
} as const
