// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetUserByUuidResponse,
  UpdateUserResponse,
  GetUserGroupByUuidResponse,
  UpdateUserGroupResponse,
  GetTrainingSessionByIdResponse,
  UpdateTrainingSessionResponse,
  GetStudentByIdResponse,
  UpdateStudentResponse,
  GetRoleByUuidResponse,
  UpdateRoleResponse,
  UpdatePrerequisiteResponse,
  UpdatePrerequisiteGroupResponse,
  GetOrganisationByUuidResponse,
  UpdateOrganisationResponse,
  GetInstructorByUuidResponse,
  UpdateInstructorResponse,
  GetCourseResponse,
  UpdateCourseResponse,
  GetLessonResponse,
  UpdateLessonResponse,
  GetCategoryResponse,
  UpdateCategoryResponse,
  GetAssessmentResponse,
  UpdateAssessmentResponse,
  GetQuestionResponse,
  UpdateQuestionResponse,
  CreateUserGroupResponse,
  GetUsersForUserGroupResponse,
  GetRolesForUserGroupResponse,
  GetAllTrainingSessionsResponse,
  CreateTrainingSessionResponse,
  GetAllStudentsResponse,
  CreateStudentResponse,
  CreateRoleResponse,
  FindPrerequisitesResponse,
  CreatePrerequisiteResponse,
  CreatePrerequisiteGroupResponse,
  GetPrerequisiteTypesResponse,
  CreatePrerequisiteTypeResponse,
  GetAllOrganisationsResponse,
  CreateOrganisationResponse,
  GetAllInstructorsResponse,
  CreateInstructorResponse,
  GetCoursesResponse,
  CreateCourseResponse,
  GetLessonsResponse,
  CreateLessonResponse,
  GetAllCategoriesResponse,
  CreateCategoryResponse,
  CreateAssessmentResponse,
  GetQuestionsResponse,
  CreateQuestionResponse,
  SearchResponse,
  GetUsersByOrganisationResponse,
  Search1Response,
  GetUserGroupsByOrganisationResponse,
  SearchTrainingSessionsResponse,
  SearchStudentsResponse,
  GetEffectiveRolesForUserResponse,
  SearchRolesResponse,
  GetRolesByOrganisationResponse,
  Search2Response,
  SearchInstructorsResponse,
  GetAssessmentsByLessonResponse,
  GetAssessmentsByCourseResponse,
} from "./types.gen"

const roleDtoSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.modified_date) {
    data.modified_date = new Date(data.modified_date)
  }
  return data
}

const userSchemaResponseTransformer = (data: any) => {
  data.dob = new Date(data.dob)
  if (data.roles) {
    data.roles = data.roles.map((item: any) => {
      return roleDtoSchemaResponseTransformer(item)
    })
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.modified_date) {
    data.modified_date = new Date(data.modified_date)
  }
  return data
}

const apiResponseUserSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = userSchemaResponseTransformer(data.data)
  }
  return data
}

export const getUserByUuidResponseTransformer = async (
  data: any,
): Promise<GetUserByUuidResponse> => {
  data = apiResponseUserSchemaResponseTransformer(data)
  return data
}

export const updateUserResponseTransformer = async (
  data: any,
): Promise<UpdateUserResponse> => {
  data = apiResponseUserSchemaResponseTransformer(data)
  return data
}

const userGroupDtoSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.modified_date) {
    data.modified_date = new Date(data.modified_date)
  }
  return data
}

const apiResponseUserGroupDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = userGroupDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getUserGroupByUuidResponseTransformer = async (
  data: any,
): Promise<GetUserGroupByUuidResponse> => {
  data = apiResponseUserGroupDtoSchemaResponseTransformer(data)
  return data
}

export const updateUserGroupResponseTransformer = async (
  data: any,
): Promise<UpdateUserGroupResponse> => {
  data = apiResponseUserGroupDtoSchemaResponseTransformer(data)
  return data
}

const trainingSessionDtoSchemaResponseTransformer = (data: any) => {
  data.start_date = new Date(data.start_date)
  data.end_date = new Date(data.end_date)
  return data
}

export const getTrainingSessionByIdResponseTransformer = async (
  data: any,
): Promise<GetTrainingSessionByIdResponse> => {
  data = trainingSessionDtoSchemaResponseTransformer(data)
  return data
}

export const updateTrainingSessionResponseTransformer = async (
  data: any,
): Promise<UpdateTrainingSessionResponse> => {
  data = trainingSessionDtoSchemaResponseTransformer(data)
  return data
}

const studentSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date)
  }
  return data
}

export const getStudentByIdResponseTransformer = async (
  data: any,
): Promise<GetStudentByIdResponse> => {
  data = studentSchemaResponseTransformer(data)
  return data
}

export const updateStudentResponseTransformer = async (
  data: any,
): Promise<UpdateStudentResponse> => {
  data = studentSchemaResponseTransformer(data)
  return data
}

const apiResponseRoleDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = roleDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getRoleByUuidResponseTransformer = async (
  data: any,
): Promise<GetRoleByUuidResponse> => {
  data = apiResponseRoleDtoSchemaResponseTransformer(data)
  return data
}

export const updateRoleResponseTransformer = async (
  data: any,
): Promise<UpdateRoleResponse> => {
  data = apiResponseRoleDtoSchemaResponseTransformer(data)
  return data
}

const responseDtoVoidSchemaResponseTransformer = (data: any) => {
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const updatePrerequisiteResponseTransformer = async (
  data: any,
): Promise<UpdatePrerequisiteResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

export const updatePrerequisiteGroupResponseTransformer = async (
  data: any,
): Promise<UpdatePrerequisiteGroupResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const organisationDtoSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date)
  }
  return data
}

const apiResponseOrganisationDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = organisationDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getOrganisationByUuidResponseTransformer = async (
  data: any,
): Promise<GetOrganisationByUuidResponse> => {
  data = apiResponseOrganisationDtoSchemaResponseTransformer(data)
  return data
}

export const updateOrganisationResponseTransformer = async (
  data: any,
): Promise<UpdateOrganisationResponse> => {
  data = apiResponseOrganisationDtoSchemaResponseTransformer(data)
  return data
}

const professionalBodyDtoSchemaResponseTransformer = (data: any) => {
  data.member_since = new Date(data.member_since)
  return data
}

const trainingExperienceDtoSchemaResponseTransformer = (data: any) => {
  data.start_date = new Date(data.start_date)
  data.end_date = new Date(data.end_date)
  return data
}

const userCertificationDtoSchemaResponseTransformer = (data: any) => {
  data.issued_date = new Date(data.issued_date)
  return data
}

const instructorSchemaResponseTransformer = (data: any) => {
  if (data.professional_bodies) {
    data.professional_bodies = data.professional_bodies.map((item: any) => {
      return professionalBodyDtoSchemaResponseTransformer(item)
    })
  }
  if (data.training_experiences) {
    data.training_experiences = data.training_experiences.map((item: any) => {
      return trainingExperienceDtoSchemaResponseTransformer(item)
    })
  }
  if (data.certifications) {
    data.certifications = data.certifications.map((item: any) => {
      return userCertificationDtoSchemaResponseTransformer(item)
    })
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date)
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date)
  }
  return data
}

export const getInstructorByUuidResponseTransformer = async (
  data: any,
): Promise<GetInstructorByUuidResponse> => {
  data = instructorSchemaResponseTransformer(data)
  return data
}

export const updateInstructorResponseTransformer = async (
  data: any,
): Promise<UpdateInstructorResponse> => {
  data = instructorSchemaResponseTransformer(data)
  return data
}

const courseLearningObjectiveResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const categoryResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const courseResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  if (data.learningObjectives) {
    data.learningObjectives = data.learningObjectives.map((item: any) => {
      return courseLearningObjectiveResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.categories) {
    data.categories = data.categories.map((item: any) => {
      return categoryResponseDtoSchemaResponseTransformer(item)
    })
  }
  return data
}

const responseDtoCourseResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = courseResponseDtoSchemaResponseTransformer(data.data)
  }
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const getCourseResponseTransformer = async (
  data: any,
): Promise<GetCourseResponse> => {
  data = responseDtoCourseResponseDtoSchemaResponseTransformer(data)
  return data
}

export const updateCourseResponseTransformer = async (
  data: any,
): Promise<UpdateCourseResponse> => {
  data = responseDtoCourseResponseDtoSchemaResponseTransformer(data)
  return data
}

const lessonContentResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const lessonResourceResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const lessonResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return lessonContentResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.resources) {
    data.resources = data.resources.map((item: any) => {
      return lessonResourceResponseDtoSchemaResponseTransformer(item)
    })
  }
  return data
}

const responseDtoLessonResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = lessonResponseDtoSchemaResponseTransformer(data.data)
  }
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const getLessonResponseTransformer = async (
  data: any,
): Promise<GetLessonResponse> => {
  data = responseDtoLessonResponseDtoSchemaResponseTransformer(data)
  return data
}

export const updateLessonResponseTransformer = async (
  data: any,
): Promise<UpdateLessonResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const responseDtoCategoryResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = categoryResponseDtoSchemaResponseTransformer(data.data)
  }
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const getCategoryResponseTransformer = async (
  data: any,
): Promise<GetCategoryResponse> => {
  data = responseDtoCategoryResponseDtoSchemaResponseTransformer(data)
  return data
}

export const updateCategoryResponseTransformer = async (
  data: any,
): Promise<UpdateCategoryResponse> => {
  data = responseDtoCategoryResponseDtoSchemaResponseTransformer(data)
  return data
}

const assessmentResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  if (data.dueDate) {
    data.dueDate = new Date(data.dueDate)
  }
  return data
}

const responseDtoAssessmentResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = assessmentResponseDtoSchemaResponseTransformer(data.data)
  }
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const getAssessmentResponseTransformer = async (
  data: any,
): Promise<GetAssessmentResponse> => {
  data = responseDtoAssessmentResponseDtoSchemaResponseTransformer(data)
  return data
}

export const updateAssessmentResponseTransformer = async (
  data: any,
): Promise<UpdateAssessmentResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const answerOptionResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const questionResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  if (data.answerOptions) {
    data.answerOptions = data.answerOptions.map((item: any) => {
      return answerOptionResponseDtoSchemaResponseTransformer(item)
    })
  }
  return data
}

const responseDtoQuestionResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = questionResponseDtoSchemaResponseTransformer(data.data)
  }
  if (data.timestamp) {
    data.timestamp = new Date(data.timestamp)
  }
  return data
}

export const getQuestionResponseTransformer = async (
  data: any,
): Promise<GetQuestionResponse> => {
  data = responseDtoQuestionResponseDtoSchemaResponseTransformer(data)
  return data
}

export const updateQuestionResponseTransformer = async (
  data: any,
): Promise<UpdateQuestionResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

export const createUserGroupResponseTransformer = async (
  data: any,
): Promise<CreateUserGroupResponse> => {
  data = apiResponseUserGroupDtoSchemaResponseTransformer(data)
  return data
}

const pageMetadataSchemaResponseTransformer = (data: any) => {
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

const pagedDtoUserSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return userSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoUserSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoUserSchemaResponseTransformer(data.data)
  }
  return data
}

export const getUsersForUserGroupResponseTransformer = async (
  data: any,
): Promise<GetUsersForUserGroupResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data)
  return data
}

const pagedDtoRoleDtoSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return roleDtoSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoRoleDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoRoleDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getRolesForUserGroupResponseTransformer = async (
  data: any,
): Promise<GetRolesForUserGroupResponse> => {
  data = apiResponsePagedDtoRoleDtoSchemaResponseTransformer(data)
  return data
}

const pagedDtoTrainingSessionDtoSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return trainingSessionDtoSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoTrainingSessionDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = pagedDtoTrainingSessionDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getAllTrainingSessionsResponseTransformer = async (
  data: any,
): Promise<GetAllTrainingSessionsResponse> => {
  data = apiResponsePagedDtoTrainingSessionDtoSchemaResponseTransformer(data)
  return data
}

export const createTrainingSessionResponseTransformer = async (
  data: any,
): Promise<CreateTrainingSessionResponse> => {
  data = trainingSessionDtoSchemaResponseTransformer(data)
  return data
}

const pagedDtoStudentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return studentSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoStudentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoStudentSchemaResponseTransformer(data.data)
  }
  return data
}

export const getAllStudentsResponseTransformer = async (
  data: any,
): Promise<GetAllStudentsResponse> => {
  data = apiResponsePagedDtoStudentSchemaResponseTransformer(data)
  return data
}

export const createStudentResponseTransformer = async (
  data: any,
): Promise<CreateStudentResponse> => {
  data = studentSchemaResponseTransformer(data)
  return data
}

export const createRoleResponseTransformer = async (
  data: any,
): Promise<CreateRoleResponse> => {
  data = apiResponseRoleDtoSchemaResponseTransformer(data)
  return data
}

const prerequisiteTypeResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  return data
}

const prerequisiteResponseDtoSchemaResponseTransformer = (data: any) => {
  if (data.id) {
    data.id = BigInt(data.id.toString())
  }
  if (data.prerequisiteType) {
    data.prerequisiteType =
      prerequisiteTypeResponseDtoSchemaResponseTransformer(
        data.prerequisiteType,
      )
  }
  if (data.course) {
    data.course = courseResponseDtoSchemaResponseTransformer(data.course)
  }
  if (data.requiredForCourse) {
    data.requiredForCourse = courseResponseDtoSchemaResponseTransformer(
      data.requiredForCourse,
    )
  }
  return data
}

const responsePageableDtoPrerequisiteResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return prerequisiteResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const findPrerequisitesResponseTransformer = async (
  data: any,
): Promise<FindPrerequisitesResponse> => {
  data =
    responsePageableDtoPrerequisiteResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createPrerequisiteResponseTransformer = async (
  data: any,
): Promise<CreatePrerequisiteResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

export const createPrerequisiteGroupResponseTransformer = async (
  data: any,
): Promise<CreatePrerequisiteGroupResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoPrerequisiteTypeResponseDtoSchemaResponseTransformer =
  (data: any) => {
    if (data.data) {
      data.data = data.data.map((item: any) => {
        return prerequisiteTypeResponseDtoSchemaResponseTransformer(item)
      })
    }
    if (data.totalElements) {
      data.totalElements = BigInt(data.totalElements.toString())
    }
    return data
  }

export const getPrerequisiteTypesResponseTransformer = async (
  data: any,
): Promise<GetPrerequisiteTypesResponse> => {
  data =
    responsePageableDtoPrerequisiteTypeResponseDtoSchemaResponseTransformer(
      data,
    )
  return data
}

export const createPrerequisiteTypeResponseTransformer = async (
  data: any,
): Promise<CreatePrerequisiteTypeResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const pagedDtoOrganisationDtoSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return organisationDtoSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoOrganisationDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = pagedDtoOrganisationDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const getAllOrganisationsResponseTransformer = async (
  data: any,
): Promise<GetAllOrganisationsResponse> => {
  data = apiResponsePagedDtoOrganisationDtoSchemaResponseTransformer(data)
  return data
}

export const createOrganisationResponseTransformer = async (
  data: any,
): Promise<CreateOrganisationResponse> => {
  data = apiResponseOrganisationDtoSchemaResponseTransformer(data)
  return data
}

const pagedDtoInstructorSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoInstructorSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorSchemaResponseTransformer(data.data)
  }
  return data
}

export const getAllInstructorsResponseTransformer = async (
  data: any,
): Promise<GetAllInstructorsResponse> => {
  data = apiResponsePagedDtoInstructorSchemaResponseTransformer(data)
  return data
}

export const createInstructorResponseTransformer = async (
  data: any,
): Promise<CreateInstructorResponse> => {
  data = instructorSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoCourseResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return courseResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const getCoursesResponseTransformer = async (
  data: any,
): Promise<GetCoursesResponse> => {
  data = responsePageableDtoCourseResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createCourseResponseTransformer = async (
  data: any,
): Promise<CreateCourseResponse> => {
  data = responseDtoCourseResponseDtoSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoLessonResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return lessonResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const getLessonsResponseTransformer = async (
  data: any,
): Promise<GetLessonsResponse> => {
  data = responsePageableDtoLessonResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createLessonResponseTransformer = async (
  data: any,
): Promise<CreateLessonResponse> => {
  data = responseDtoLessonResponseDtoSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoCategoryResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return categoryResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const getAllCategoriesResponseTransformer = async (
  data: any,
): Promise<GetAllCategoriesResponse> => {
  data = responsePageableDtoCategoryResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createCategoryResponseTransformer = async (
  data: any,
): Promise<CreateCategoryResponse> => {
  data = responseDtoCategoryResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createAssessmentResponseTransformer = async (
  data: any,
): Promise<CreateAssessmentResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoQuestionResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return questionResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const getQuestionsResponseTransformer = async (
  data: any,
): Promise<GetQuestionsResponse> => {
  data = responsePageableDtoQuestionResponseDtoSchemaResponseTransformer(data)
  return data
}

export const createQuestionResponseTransformer = async (
  data: any,
): Promise<CreateQuestionResponse> => {
  data = responseDtoVoidSchemaResponseTransformer(data)
  return data
}

export const searchResponseTransformer = async (
  data: any,
): Promise<SearchResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data)
  return data
}

export const getUsersByOrganisationResponseTransformer = async (
  data: any,
): Promise<GetUsersByOrganisationResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data)
  return data
}

const pagedDtoUserGroupDtoSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return userGroupDtoSchemaResponseTransformer(item)
    })
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata)
  }
  return data
}

const apiResponsePagedDtoUserGroupDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = pagedDtoUserGroupDtoSchemaResponseTransformer(data.data)
  }
  return data
}

export const search1ResponseTransformer = async (
  data: any,
): Promise<Search1Response> => {
  data = apiResponsePagedDtoUserGroupDtoSchemaResponseTransformer(data)
  return data
}

export const getUserGroupsByOrganisationResponseTransformer = async (
  data: any,
): Promise<GetUserGroupsByOrganisationResponse> => {
  data = apiResponsePagedDtoUserGroupDtoSchemaResponseTransformer(data)
  return data
}

const pageableObjectSchemaResponseTransformer = (data: any) => {
  if (data.offset) {
    data.offset = BigInt(data.offset.toString())
  }
  return data
}

const pageSchemaResponseTransformer = (data: any) => {
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  if (data.pageable) {
    data.pageable = pageableObjectSchemaResponseTransformer(data.pageable)
  }
  return data
}

export const searchTrainingSessionsResponseTransformer = async (
  data: any,
): Promise<SearchTrainingSessionsResponse> => {
  data = pageSchemaResponseTransformer(data)
  return data
}

export const searchStudentsResponseTransformer = async (
  data: any,
): Promise<SearchStudentsResponse> => {
  data = pageSchemaResponseTransformer(data)
  return data
}

const apiResponseListRoleDtoSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return roleDtoSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getEffectiveRolesForUserResponseTransformer = async (
  data: any,
): Promise<GetEffectiveRolesForUserResponse> => {
  data = apiResponseListRoleDtoSchemaResponseTransformer(data)
  return data
}

export const searchRolesResponseTransformer = async (
  data: any,
): Promise<SearchRolesResponse> => {
  data = apiResponsePagedDtoRoleDtoSchemaResponseTransformer(data)
  return data
}

export const getRolesByOrganisationResponseTransformer = async (
  data: any,
): Promise<GetRolesByOrganisationResponse> => {
  data = apiResponsePagedDtoRoleDtoSchemaResponseTransformer(data)
  return data
}

export const search2ResponseTransformer = async (
  data: any,
): Promise<Search2Response> => {
  data = apiResponsePagedDtoOrganisationDtoSchemaResponseTransformer(data)
  return data
}

export const searchInstructorsResponseTransformer = async (
  data: any,
): Promise<SearchInstructorsResponse> => {
  data = pageSchemaResponseTransformer(data)
  return data
}

const responsePageableDtoAssessmentResponseDtoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return assessmentResponseDtoSchemaResponseTransformer(item)
    })
  }
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString())
  }
  return data
}

export const getAssessmentsByLessonResponseTransformer = async (
  data: any,
): Promise<GetAssessmentsByLessonResponse> => {
  data = responsePageableDtoAssessmentResponseDtoSchemaResponseTransformer(data)
  return data
}

export const getAssessmentsByCourseResponseTransformer = async (
  data: any,
): Promise<GetAssessmentsByCourseResponse> => {
  data = responsePageableDtoAssessmentResponseDtoSchemaResponseTransformer(data)
  return data
}
