// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch"
import type {
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  GetUserByUuidData,
  GetUserByUuidResponses,
  GetUserByUuidErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  DeleteUserGroupData,
  DeleteUserGroupResponses,
  DeleteUserGroupErrors,
  GetUserGroupByUuidData,
  GetUserGroupByUuidResponses,
  GetUserGroupByUuidErrors,
  UpdateUserGroupData,
  UpdateUserGroupResponses,
  UpdateUserGroupErrors,
  DeleteTrainingSessionData,
  DeleteTrainingSessionResponses,
  DeleteTrainingSessionErrors,
  GetTrainingSessionByIdData,
  GetTrainingSessionByIdResponses,
  GetTrainingSessionByIdErrors,
  UpdateTrainingSessionData,
  UpdateTrainingSessionResponses,
  UpdateTrainingSessionErrors,
  DeleteStudentData,
  DeleteStudentResponses,
  DeleteStudentErrors,
  GetStudentByIdData,
  GetStudentByIdResponses,
  GetStudentByIdErrors,
  UpdateStudentData,
  UpdateStudentResponses,
  UpdateStudentErrors,
  DeleteRoleData,
  DeleteRoleResponses,
  DeleteRoleErrors,
  GetRoleByUuidData,
  GetRoleByUuidResponses,
  GetRoleByUuidErrors,
  UpdateRoleData,
  UpdateRoleResponses,
  UpdateRoleErrors,
  DeletePrerequisiteData,
  DeletePrerequisiteResponses,
  DeletePrerequisiteErrors,
  UpdatePrerequisiteData,
  UpdatePrerequisiteResponses,
  UpdatePrerequisiteErrors,
  DeletePrerequisiteGroupData,
  DeletePrerequisiteGroupResponses,
  DeletePrerequisiteGroupErrors,
  UpdatePrerequisiteGroupData,
  UpdatePrerequisiteGroupResponses,
  UpdatePrerequisiteGroupErrors,
  DeleteOrganisationData,
  DeleteOrganisationResponses,
  DeleteOrganisationErrors,
  GetOrganisationByUuidData,
  GetOrganisationByUuidResponses,
  GetOrganisationByUuidErrors,
  UpdateOrganisationData,
  UpdateOrganisationResponses,
  UpdateOrganisationErrors,
  DeleteInstructorData,
  DeleteInstructorResponses,
  DeleteInstructorErrors,
  GetInstructorByUuidData,
  GetInstructorByUuidResponses,
  GetInstructorByUuidErrors,
  UpdateInstructorData,
  UpdateInstructorResponses,
  UpdateInstructorErrors,
  DeleteCourseData,
  DeleteCourseResponses,
  DeleteCourseErrors,
  GetCourseData,
  GetCourseResponses,
  GetCourseErrors,
  UpdateCourseData,
  UpdateCourseResponses,
  UpdateCourseErrors,
  DeleteLessonData,
  DeleteLessonResponses,
  DeleteLessonErrors,
  GetLessonData,
  GetLessonResponses,
  GetLessonErrors,
  UpdateLessonData,
  UpdateLessonResponses,
  UpdateLessonErrors,
  DeleteCategoryData,
  DeleteCategoryResponses,
  DeleteCategoryErrors,
  GetCategoryData,
  GetCategoryResponses,
  GetCategoryErrors,
  UpdateCategoryData,
  UpdateCategoryResponses,
  UpdateCategoryErrors,
  DeleteAssessmentData,
  DeleteAssessmentResponses,
  DeleteAssessmentErrors,
  GetAssessmentData,
  GetAssessmentResponses,
  GetAssessmentErrors,
  UpdateAssessmentData,
  UpdateAssessmentResponses,
  UpdateAssessmentErrors,
  DeleteQuestionData,
  DeleteQuestionResponses,
  DeleteQuestionErrors,
  GetQuestionData,
  GetQuestionResponses,
  GetQuestionErrors,
  UpdateQuestionData,
  UpdateQuestionResponses,
  UpdateQuestionErrors,
  CreateUserGroupData,
  CreateUserGroupResponses,
  CreateUserGroupErrors,
  RemoveUsersFromGroupData,
  RemoveUsersFromGroupResponses,
  RemoveUsersFromGroupErrors,
  GetUsersForUserGroupData,
  GetUsersForUserGroupResponses,
  GetUsersForUserGroupErrors,
  AddUsersToGroupData,
  AddUsersToGroupResponses,
  AddUsersToGroupErrors,
  RemoveRolesFromGroupData,
  RemoveRolesFromGroupResponses,
  RemoveRolesFromGroupErrors,
  GetRolesForUserGroupData,
  GetRolesForUserGroupResponses,
  GetRolesForUserGroupErrors,
  AssignRolesToGroupData,
  AssignRolesToGroupResponses,
  AssignRolesToGroupErrors,
  GetAllTrainingSessionsData,
  GetAllTrainingSessionsResponses,
  GetAllTrainingSessionsErrors,
  CreateTrainingSessionData,
  CreateTrainingSessionResponses,
  CreateTrainingSessionErrors,
  GetAllStudentsData,
  GetAllStudentsResponses,
  GetAllStudentsErrors,
  CreateStudentData,
  CreateStudentResponses,
  CreateStudentErrors,
  CreateRoleData,
  CreateRoleResponses,
  CreateRoleErrors,
  FindPrerequisitesData,
  FindPrerequisitesResponses,
  FindPrerequisitesErrors,
  CreatePrerequisiteData,
  CreatePrerequisiteResponses,
  CreatePrerequisiteErrors,
  CreatePrerequisiteGroupData,
  CreatePrerequisiteGroupResponses,
  CreatePrerequisiteGroupErrors,
  GetPrerequisiteTypesData,
  GetPrerequisiteTypesResponses,
  GetPrerequisiteTypesErrors,
  CreatePrerequisiteTypeData,
  CreatePrerequisiteTypeResponses,
  CreatePrerequisiteTypeErrors,
  GetAllOrganisationsData,
  GetAllOrganisationsResponses,
  GetAllOrganisationsErrors,
  CreateOrganisationData,
  CreateOrganisationResponses,
  CreateOrganisationErrors,
  GetAllInstructorsData,
  GetAllInstructorsResponses,
  GetAllInstructorsErrors,
  CreateInstructorData,
  CreateInstructorResponses,
  CreateInstructorErrors,
  GetCoursesData,
  GetCoursesResponses,
  GetCoursesErrors,
  CreateCourseData,
  CreateCourseResponses,
  CreateCourseErrors,
  GetLessonsData,
  GetLessonsResponses,
  GetLessonsErrors,
  CreateLessonData,
  CreateLessonResponses,
  CreateLessonErrors,
  GetAllCategoriesData,
  GetAllCategoriesResponses,
  GetAllCategoriesErrors,
  CreateCategoryData,
  CreateCategoryResponses,
  CreateCategoryErrors,
  CreateAssessmentData,
  CreateAssessmentResponses,
  CreateAssessmentErrors,
  GetQuestionsData,
  GetQuestionsResponses,
  GetQuestionsErrors,
  CreateQuestionData,
  CreateQuestionResponses,
  CreateQuestionErrors,
  SearchData,
  SearchResponses,
  SearchErrors,
  GetProfileImageData,
  GetProfileImageResponses,
  GetProfileImageErrors,
  GetUsersByOrganisationData,
  GetUsersByOrganisationResponses,
  GetUsersByOrganisationErrors,
  Search1Data,
  Search1Responses,
  Search1Errors,
  GetUserGroupsByOrganisationData,
  GetUserGroupsByOrganisationResponses,
  GetUserGroupsByOrganisationErrors,
  SearchTrainingSessionsData,
  SearchTrainingSessionsResponses,
  SearchTrainingSessionsErrors,
  SearchStudentsData,
  SearchStudentsResponses,
  SearchStudentsErrors,
  GetEffectiveRolesForUserData,
  GetEffectiveRolesForUserResponses,
  GetEffectiveRolesForUserErrors,
  SearchRolesData,
  SearchRolesResponses,
  SearchRolesErrors,
  GetAllPermissionsData,
  GetAllPermissionsResponses,
  GetAllPermissionsErrors,
  GetRolesByOrganisationData,
  GetRolesByOrganisationResponses,
  GetRolesByOrganisationErrors,
  Search2Data,
  Search2Responses,
  Search2Errors,
  SearchInstructorsData,
  SearchInstructorsResponses,
  SearchInstructorsErrors,
  GetCourseThumbnailData,
  GetCourseThumbnailResponses,
  GetCourseThumbnailErrors,
  GetAssessmentsByLessonData,
  GetAssessmentsByLessonResponses,
  GetAssessmentsByLessonErrors,
  GetAssessmentsByCourseData,
  GetAssessmentsByCourseResponses,
  GetAssessmentsByCourseErrors,
} from "./types.gen"
import { client as _heyApiClient } from "./client.gen"
import {
  getUserByUuidResponseTransformer,
  updateUserResponseTransformer,
  getUserGroupByUuidResponseTransformer,
  updateUserGroupResponseTransformer,
  getTrainingSessionByIdResponseTransformer,
  updateTrainingSessionResponseTransformer,
  getStudentByIdResponseTransformer,
  updateStudentResponseTransformer,
  getRoleByUuidResponseTransformer,
  updateRoleResponseTransformer,
  updatePrerequisiteResponseTransformer,
  updatePrerequisiteGroupResponseTransformer,
  getOrganisationByUuidResponseTransformer,
  updateOrganisationResponseTransformer,
  getInstructorByUuidResponseTransformer,
  updateInstructorResponseTransformer,
  getCourseResponseTransformer,
  updateCourseResponseTransformer,
  getLessonResponseTransformer,
  updateLessonResponseTransformer,
  getCategoryResponseTransformer,
  updateCategoryResponseTransformer,
  getAssessmentResponseTransformer,
  updateAssessmentResponseTransformer,
  getQuestionResponseTransformer,
  updateQuestionResponseTransformer,
  createUserGroupResponseTransformer,
  getUsersForUserGroupResponseTransformer,
  getRolesForUserGroupResponseTransformer,
  getAllTrainingSessionsResponseTransformer,
  createTrainingSessionResponseTransformer,
  getAllStudentsResponseTransformer,
  createStudentResponseTransformer,
  createRoleResponseTransformer,
  findPrerequisitesResponseTransformer,
  createPrerequisiteResponseTransformer,
  createPrerequisiteGroupResponseTransformer,
  getPrerequisiteTypesResponseTransformer,
  createPrerequisiteTypeResponseTransformer,
  getAllOrganisationsResponseTransformer,
  createOrganisationResponseTransformer,
  getAllInstructorsResponseTransformer,
  createInstructorResponseTransformer,
  getCoursesResponseTransformer,
  createCourseResponseTransformer,
  getLessonsResponseTransformer,
  createLessonResponseTransformer,
  getAllCategoriesResponseTransformer,
  createCategoryResponseTransformer,
  createAssessmentResponseTransformer,
  getQuestionsResponseTransformer,
  createQuestionResponseTransformer,
  searchResponseTransformer,
  getUsersByOrganisationResponseTransformer,
  search1ResponseTransformer,
  getUserGroupsByOrganisationResponseTransformer,
  searchTrainingSessionsResponseTransformer,
  searchStudentsResponseTransformer,
  getEffectiveRolesForUserResponseTransformer,
  searchRolesResponseTransformer,
  getRolesByOrganisationResponseTransformer,
  search2ResponseTransformer,
  searchInstructorsResponseTransformer,
  getAssessmentsByLessonResponseTransformer,
  getAssessmentsByCourseResponseTransformer,
} from "./transformers.gen"

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Delete a user by UUID
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{uuid}",
    ...options,
  })
}

/**
 * Get a user by UUID
 */
export const getUserByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByUuidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByUuidResponses,
    GetUserByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getUserByUuidResponseTransformer,
    url: "/api/v1/users/{uuid}",
    ...options,
  })
}

/**
 * Update a user by UUID
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponses,
    UpdateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateUserResponseTransformer,
    url: "/api/v1/users/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete a user group by UUID
 */
export const deleteUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserGroupResponses,
    DeleteUserGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-groups/{uuid}",
    ...options,
  })
}

/**
 * Get a user group by UUID
 */
export const getUserGroupByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetUserGroupByUuidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserGroupByUuidResponses,
    GetUserGroupByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getUserGroupByUuidResponseTransformer,
    url: "/api/v1/user-groups/{uuid}",
    ...options,
  })
}

/**
 * Update a user group by UUID
 */
export const updateUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserGroupResponses,
    UpdateUserGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateUserGroupResponseTransformer,
    url: "/api/v1/user-groups/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete a training session
 * Removes a training session record from the system.
 */
export const deleteTrainingSession = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTrainingSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTrainingSessionResponses,
    DeleteTrainingSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/training-sessions/{uuid}",
    ...options,
  })
}

/**
 * Get training session by ID
 * Fetches a training session by its UUID.
 */
export const getTrainingSessionById = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingSessionByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingSessionByIdResponses,
    GetTrainingSessionByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getTrainingSessionByIdResponseTransformer,
    url: "/api/v1/training-sessions/{uuid}",
    ...options,
  })
}

/**
 * Update a training session
 * Updates an existing training session record.
 */
export const updateTrainingSession = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTrainingSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTrainingSessionResponses,
    UpdateTrainingSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateTrainingSessionResponseTransformer,
    url: "/api/v1/training-sessions/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete a student
 * Removes a student record from the system.
 */
export const deleteStudent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStudentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteStudentResponses,
    DeleteStudentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/students/{uuid}",
    ...options,
  })
}

/**
 * Get student by ID
 * Fetches a student by their UUID.
 */
export const getStudentById = <ThrowOnError extends boolean = false>(
  options: Options<GetStudentByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStudentByIdResponses,
    GetStudentByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getStudentByIdResponseTransformer,
    url: "/api/v1/students/{uuid}",
    ...options,
  })
}

/**
 * Update a student
 * Updates an existing student record.
 */
export const updateStudent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStudentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateStudentResponses,
    UpdateStudentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateStudentResponseTransformer,
    url: "/api/v1/students/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete a role by UUID
 */
export const deleteRole = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRoleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRoleResponses,
    DeleteRoleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/roles/{uuid}",
    ...options,
  })
}

/**
 * Get a role by UUID
 */
export const getRoleByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetRoleByUuidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoleByUuidResponses,
    GetRoleByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getRoleByUuidResponseTransformer,
    url: "/api/v1/roles/{uuid}",
    ...options,
  })
}

/**
 * Update a role by UUID
 */
export const updateRole = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRoleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRoleResponses,
    UpdateRoleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateRoleResponseTransformer,
    url: "/api/v1/roles/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deletePrerequisite = <ThrowOnError extends boolean = false>(
  options: Options<DeletePrerequisiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePrerequisiteResponses,
    DeletePrerequisiteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/prerequisite/{prerequisiteId}",
    ...options,
  })
}

export const updatePrerequisite = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePrerequisiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePrerequisiteResponses,
    UpdatePrerequisiteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updatePrerequisiteResponseTransformer,
    url: "/api/v1/prerequisite/{prerequisiteId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deletePrerequisiteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeletePrerequisiteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePrerequisiteGroupResponses,
    DeletePrerequisiteGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/prerequisite/group/{prerequisiteGroupId}",
    ...options,
  })
}

export const updatePrerequisiteGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePrerequisiteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePrerequisiteGroupResponses,
    UpdatePrerequisiteGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updatePrerequisiteGroupResponseTransformer,
    url: "/api/v1/prerequisite/group/{prerequisiteGroupId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete an organisation by UUID
 */
export const deleteOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteOrganisationResponses,
    DeleteOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/organisations/{uuid}",
    ...options,
  })
}

/**
 * Get an organisation by UUID
 */
export const getOrganisationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetOrganisationByUuidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganisationByUuidResponses,
    GetOrganisationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getOrganisationByUuidResponseTransformer,
    url: "/api/v1/organisations/{uuid}",
    ...options,
  })
}

/**
 * Update an organisation by UUID
 */
export const updateOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateOrganisationResponses,
    UpdateOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateOrganisationResponseTransformer,
    url: "/api/v1/organisations/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Delete an instructor
 * Removes an instructor record from the system.
 */
export const deleteInstructor = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorResponses,
    DeleteInstructorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/instructors/{uuid}",
    ...options,
  })
}

/**
 * Get instructor by UUID
 * Fetches an instructor by their UUID.
 */
export const getInstructorByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorByUuidData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorByUuidResponses,
    GetInstructorByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getInstructorByUuidResponseTransformer,
    url: "/api/v1/instructors/{uuid}",
    ...options,
  })
}

/**
 * Update an instructor
 * Updates an existing instructor record.
 */
export const updateInstructor = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorResponses,
    UpdateInstructorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateInstructorResponseTransformer,
    url: "/api/v1/instructors/{uuid}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deleteCourse = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseResponses,
    DeleteCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/courses/{courseId}",
    ...options,
  })
}

export const getCourse = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseResponses,
    GetCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getCourseResponseTransformer,
    url: "/api/v1/courses/{courseId}",
    ...options,
  })
}

export const updateCourse = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseResponses,
    UpdateCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateCourseResponseTransformer,
    url: "/api/v1/courses/{courseId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deleteLesson = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLessonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLessonResponses,
    DeleteLessonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/courses/{courseId}/lessons/{lessonId}",
    ...options,
  })
}

export const getLesson = <ThrowOnError extends boolean = false>(
  options: Options<GetLessonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLessonResponses,
    GetLessonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getLessonResponseTransformer,
    url: "/api/v1/courses/{courseId}/lessons/{lessonId}",
    ...options,
  })
}

export const updateLesson = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLessonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLessonResponses,
    UpdateLessonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateLessonResponseTransformer,
    url: "/api/v1/courses/{courseId}/lessons/{lessonId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deleteCategory = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCategoryResponses,
    DeleteCategoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/categories/{categoryId}",
    ...options,
  })
}

export const getCategory = <ThrowOnError extends boolean = false>(
  options: Options<GetCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCategoryResponses,
    GetCategoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getCategoryResponseTransformer,
    url: "/api/v1/categories/{categoryId}",
    ...options,
  })
}

export const updateCategory = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCategoryResponses,
    UpdateCategoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateCategoryResponseTransformer,
    url: "/api/v1/categories/{categoryId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deleteAssessment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAssessmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAssessmentResponses,
    DeleteAssessmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/assessments/{id}",
    ...options,
  })
}

export const getAssessment = <ThrowOnError extends boolean = false>(
  options: Options<GetAssessmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssessmentResponses,
    GetAssessmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAssessmentResponseTransformer,
    url: "/api/v1/assessments/{id}",
    ...options,
  })
}

export const updateAssessment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAssessmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAssessmentResponses,
    UpdateAssessmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateAssessmentResponseTransformer,
    url: "/api/v1/assessments/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const deleteQuestion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuestionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQuestionResponses,
    DeleteQuestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/assessments/{assessmentId}/questions/{id}",
    ...options,
  })
}

export const getQuestion = <ThrowOnError extends boolean = false>(
  options: Options<GetQuestionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuestionResponses,
    GetQuestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getQuestionResponseTransformer,
    url: "/api/v1/assessments/{assessmentId}/questions/{id}",
    ...options,
  })
}

export const updateQuestion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQuestionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateQuestionResponses,
    UpdateQuestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: updateQuestionResponseTransformer,
    url: "/api/v1/assessments/{assessmentId}/questions/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Create a new user group
 */
export const createUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserGroupResponses,
    CreateUserGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createUserGroupResponseTransformer,
    url: "/api/v1/user-groups",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Remove users from a user group
 */
export const removeUsersFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<RemoveUsersFromGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveUsersFromGroupResponses,
    RemoveUsersFromGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-groups/{uuid}/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get users for a user group
 */
export const getUsersForUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersForUserGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersForUserGroupResponses,
    GetUsersForUserGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getUsersForUserGroupResponseTransformer,
    url: "/api/v1/user-groups/{uuid}/users",
    ...options,
  })
}

/**
 * Add users to a user group
 */
export const addUsersToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AddUsersToGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddUsersToGroupResponses,
    AddUsersToGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-groups/{uuid}/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Remove roles from a user group
 */
export const removeRolesFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<RemoveRolesFromGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveRolesFromGroupResponses,
    RemoveRolesFromGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-groups/{uuid}/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get roles for a user group
 */
export const getRolesForUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetRolesForUserGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRolesForUserGroupResponses,
    GetRolesForUserGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getRolesForUserGroupResponseTransformer,
    url: "/api/v1/user-groups/{uuid}/roles",
    ...options,
  })
}

/**
 * Assign roles to a user group
 */
export const assignRolesToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AssignRolesToGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AssignRolesToGroupResponses,
    AssignRolesToGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-groups/{uuid}/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get all training sessions
 * Fetches a paginated list of training sessions.
 */
export const getAllTrainingSessions = <ThrowOnError extends boolean = false>(
  options: Options<GetAllTrainingSessionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllTrainingSessionsResponses,
    GetAllTrainingSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAllTrainingSessionsResponseTransformer,
    url: "/api/v1/training-sessions",
    ...options,
  })
}

/**
 * Create a new training session
 * Saves a new training session record in the system.
 */
export const createTrainingSession = <ThrowOnError extends boolean = false>(
  options: Options<CreateTrainingSessionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTrainingSessionResponses,
    CreateTrainingSessionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createTrainingSessionResponseTransformer,
    url: "/api/v1/training-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get all students
 * Fetches a paginated list of students.
 */
export const getAllStudents = <ThrowOnError extends boolean = false>(
  options: Options<GetAllStudentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllStudentsResponses,
    GetAllStudentsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAllStudentsResponseTransformer,
    url: "/api/v1/students",
    ...options,
  })
}

/**
 * Create a new student
 * Saves a new student record in the system.
 */
export const createStudent = <ThrowOnError extends boolean = false>(
  options: Options<CreateStudentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateStudentResponses,
    CreateStudentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createStudentResponseTransformer,
    url: "/api/v1/students",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Create a new role for an organisation
 */
export const createRole = <ThrowOnError extends boolean = false>(
  options: Options<CreateRoleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRoleResponses,
    CreateRoleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createRoleResponseTransformer,
    url: "/api/v1/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const findPrerequisites = <ThrowOnError extends boolean = false>(
  options: Options<FindPrerequisitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    FindPrerequisitesResponses,
    FindPrerequisitesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: findPrerequisitesResponseTransformer,
    url: "/api/v1/prerequisite",
    ...options,
  })
}

export const createPrerequisite = <ThrowOnError extends boolean = false>(
  options: Options<CreatePrerequisiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrerequisiteResponses,
    CreatePrerequisiteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createPrerequisiteResponseTransformer,
    url: "/api/v1/prerequisite",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const createPrerequisiteGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreatePrerequisiteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrerequisiteGroupResponses,
    CreatePrerequisiteGroupErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createPrerequisiteGroupResponseTransformer,
    url: "/api/v1/prerequisite/group",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const getPrerequisiteTypes = <ThrowOnError extends boolean = false>(
  options: Options<GetPrerequisiteTypesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPrerequisiteTypesResponses,
    GetPrerequisiteTypesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getPrerequisiteTypesResponseTransformer,
    url: "/api/v1/prerequisite-types",
    ...options,
  })
}

export const createPrerequisiteType = <ThrowOnError extends boolean = false>(
  options: Options<CreatePrerequisiteTypeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrerequisiteTypeResponses,
    CreatePrerequisiteTypeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createPrerequisiteTypeResponseTransformer,
    url: "/api/v1/prerequisite-types",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get all organisations
 */
export const getAllOrganisations = <ThrowOnError extends boolean = false>(
  options: Options<GetAllOrganisationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllOrganisationsResponses,
    GetAllOrganisationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAllOrganisationsResponseTransformer,
    url: "/api/v1/organisations",
    ...options,
  })
}

/**
 * Create a new organisation
 */
export const createOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<CreateOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOrganisationResponses,
    CreateOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createOrganisationResponseTransformer,
    url: "/api/v1/organisations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Get all instructors
 * Fetches a paginated list of instructors.
 */
export const getAllInstructors = <ThrowOnError extends boolean = false>(
  options: Options<GetAllInstructorsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllInstructorsResponses,
    GetAllInstructorsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAllInstructorsResponseTransformer,
    url: "/api/v1/instructors",
    ...options,
  })
}

/**
 * Create a new instructor
 * Saves a new instructor record in the system.
 */
export const createInstructor = <ThrowOnError extends boolean = false>(
  options: Options<CreateInstructorData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateInstructorResponses,
    CreateInstructorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createInstructorResponseTransformer,
    url: "/api/v1/instructors",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const getCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetCoursesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoursesResponses,
    GetCoursesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getCoursesResponseTransformer,
    url: "/api/v1/courses",
    ...options,
  })
}

export const createCourse = <ThrowOnError extends boolean = false>(
  options?: Options<CreateCourseData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateCourseResponses,
    CreateCourseErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createCourseResponseTransformer,
    url: "/api/v1/courses",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  })
}

export const getLessons = <ThrowOnError extends boolean = false>(
  options: Options<GetLessonsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetLessonsResponses,
    GetLessonsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getLessonsResponseTransformer,
    url: "/api/v1/courses/{courseId}/lessons",
    ...options,
  })
}

export const createLesson = <ThrowOnError extends boolean = false>(
  options: Options<CreateLessonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLessonResponses,
    CreateLessonErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createLessonResponseTransformer,
    url: "/api/v1/courses/{courseId}/lessons",
    ...options,
    headers: {
      "Content-Type": null,
      ...options.headers,
    },
  })
}

export const getAllCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCategoriesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCategoriesResponses,
    GetAllCategoriesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAllCategoriesResponseTransformer,
    url: "/api/v1/categories",
    ...options,
  })
}

export const createCategory = <ThrowOnError extends boolean = false>(
  options: Options<CreateCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCategoryResponses,
    CreateCategoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createCategoryResponseTransformer,
    url: "/api/v1/categories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const createAssessment = <ThrowOnError extends boolean = false>(
  options: Options<CreateAssessmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAssessmentResponses,
    CreateAssessmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createAssessmentResponseTransformer,
    url: "/api/v1/assessments",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

export const getQuestions = <ThrowOnError extends boolean = false>(
  options: Options<GetQuestionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuestionsResponses,
    GetQuestionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getQuestionsResponseTransformer,
    url: "/api/v1/assessments/{assessmentId}/questions",
    ...options,
  })
}

export const createQuestion = <ThrowOnError extends boolean = false>(
  options: Options<CreateQuestionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateQuestionResponses,
    CreateQuestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: createQuestionResponseTransformer,
    url: "/api/v1/assessments/{assessmentId}/questions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  })
}

/**
 * Search users
 * Fetches a paginated list of users based on optional filters. Supports pagination and sorting.
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchResponses,
    SearchErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: searchResponseTransformer,
    url: "/api/v1/users/search",
    ...options,
  })
}

/**
 * Get user profile image by file name
 */
export const getProfileImage = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileImageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileImageResponses,
    GetProfileImageErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/profile-image/{fileName}",
    ...options,
  })
}

/**
 * Get users by organisation ID
 */
export const getUsersByOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByOrganisationResponses,
    GetUsersByOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getUsersByOrganisationResponseTransformer,
    url: "/api/v1/users/organisation/{organisationId}",
    ...options,
  })
}

/**
 * Search user groups
 * Fetches a paginated list of user groups based on optional filters. Supports pagination and sorting.
 */
export const search1 = <ThrowOnError extends boolean = false>(
  options: Options<Search1Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    Search1Responses,
    Search1Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: search1ResponseTransformer,
    url: "/api/v1/user-groups/search",
    ...options,
  })
}

/**
 * Get all user groups for an organisation
 */
export const getUserGroupsByOrganisation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserGroupsByOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserGroupsByOrganisationResponses,
    GetUserGroupsByOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getUserGroupsByOrganisationResponseTransformer,
    url: "/api/v1/user-groups/organisation/{organisationUuid}",
    ...options,
  })
}

/**
 * Search training sessions
 * Search for training sessions based on criteria.
 */
export const searchTrainingSessions = <ThrowOnError extends boolean = false>(
  options: Options<SearchTrainingSessionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchTrainingSessionsResponses,
    SearchTrainingSessionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: searchTrainingSessionsResponseTransformer,
    url: "/api/v1/training-sessions/search",
    ...options,
  })
}

/**
 * Search students
 * Search for students based on criteria.
 */
export const searchStudents = <ThrowOnError extends boolean = false>(
  options: Options<SearchStudentsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchStudentsResponses,
    SearchStudentsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: searchStudentsResponseTransformer,
    url: "/api/v1/students/search",
    ...options,
  })
}

/**
 * Get effective roles for a user
 * Fetches roles for a user, considering both direct and group assignments, with precedence given to user roles.
 */
export const getEffectiveRolesForUser = <ThrowOnError extends boolean = false>(
  options: Options<GetEffectiveRolesForUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetEffectiveRolesForUserResponses,
    GetEffectiveRolesForUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getEffectiveRolesForUserResponseTransformer,
    url: "/api/v1/roles/users/{userUuid}/roles",
    ...options,
  })
}

/**
 * Search roles
 * Fetches a paginated list of roles based on optional filters. Supports pagination and sorting.
 */
export const searchRoles = <ThrowOnError extends boolean = false>(
  options: Options<SearchRolesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchRolesResponses,
    SearchRolesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: searchRolesResponseTransformer,
    url: "/api/v1/roles/search",
    ...options,
  })
}

/**
 * Fetch all available permissions
 * Retrieve a list of all available permissions that can be assigned to roles.
 */
export const getAllPermissions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPermissionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllPermissionsResponses,
    GetAllPermissionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/roles/permissions",
    ...options,
  })
}

/**
 * Get all roles for a specific organisation
 */
export const getRolesByOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<GetRolesByOrganisationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRolesByOrganisationResponses,
    GetRolesByOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getRolesByOrganisationResponseTransformer,
    url: "/api/v1/roles/organisation/{organisationUid}",
    ...options,
  })
}

/**
 * Search organisations
 * Fetches a paginated list of organisations based on optional filters. Supports pagination and sorting.
 */
export const search2 = <ThrowOnError extends boolean = false>(
  options: Options<Search2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    Search2Responses,
    Search2Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: search2ResponseTransformer,
    url: "/api/v1/organisations/search",
    ...options,
  })
}

/**
 * Search instructors
 * Search for instructors based on criteria.
 */
export const searchInstructors = <ThrowOnError extends boolean = false>(
  options: Options<SearchInstructorsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SearchInstructorsResponses,
    SearchInstructorsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: searchInstructorsResponseTransformer,
    url: "/api/v1/instructors/search",
    ...options,
  })
}

export const getCourseThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseThumbnailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseThumbnailResponses,
    GetCourseThumbnailErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/courses/thumbnail/{fileName}",
    ...options,
  })
}

export const getAssessmentsByLesson = <ThrowOnError extends boolean = false>(
  options: Options<GetAssessmentsByLessonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssessmentsByLessonResponses,
    GetAssessmentsByLessonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAssessmentsByLessonResponseTransformer,
    url: "/api/v1/assessments/lesson/{lessonId}",
    ...options,
  })
}

export const getAssessmentsByCourse = <ThrowOnError extends boolean = false>(
  options: Options<GetAssessmentsByCourseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssessmentsByCourseResponses,
    GetAssessmentsByCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    responseTransformer: getAssessmentsByCourseResponseTransformer,
    url: "/api/v1/assessments/course/{courseId}",
    ...options,
  })
}
