/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/users/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /** Get a user by UUID */
    get: operations['getUserByUuid'];
    /** Update a user by UUID */
    put: operations['updateUser'];
    post?: never;
    /** Delete a user by UUID */
    delete: operations['deleteUser'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/training-branches/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /** Get a training branch by UUID */
    get: operations['getTrainingBranchByUuid'];
    /** Update a training branch by UUID */
    put: operations['updateTrainingBranch'];
    post?: never;
    /** Delete a training branch by UUID */
    delete: operations['deleteTrainingBranch'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/students/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get student by ID
     * @description Fetches a student by their UUID.
     */
    get: operations['getStudentById'];
    /**
     * Update a student
     * @description Updates an existing student record.
     */
    put: operations['updateStudent'];
    post?: never;
    /**
     * Delete a student
     * @description Removes a student record from the system.
     */
    delete: operations['deleteStudent'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get quiz by UUID
     * @description Retrieves a complete quiz including questions and computed properties.
     */
    get: operations['getQuizByUuid'];
    /**
     * Update quiz
     * @description Updates an existing quiz with selective field updates.
     */
    put: operations['updateQuiz'];
    post?: never;
    /**
     * Delete quiz
     * @description Permanently removes a quiz and all associated data.
     */
    delete: operations['deleteQuiz'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update quiz question
     * @description Updates a specific question within a quiz.
     */
    put: operations['updateQuizQuestion'];
    post?: never;
    /**
     * Delete quiz question
     * @description Removes a question from a quiz including all options and responses.
     */
    delete: operations['deleteQuizQuestion'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options/{optionUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
        optionUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update question option
     * @description Updates a specific option for a question.
     */
    put: operations['updateQuestionOption'];
    post?: never;
    /**
     * Delete question option
     * @description Removes an option from a question.
     */
    delete: operations['deleteQuestionOption'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program by UUID
     * @description Retrieves a complete program profile including computed properties and analytics.
     */
    get: operations['getTrainingProgramByUuid'];
    /**
     * Update training program
     * @description Updates an existing training program with selective field updates.
     */
    put: operations['updateTrainingProgram'];
    post?: never;
    /**
     * Delete training program
     * @description Permanently removes a training program and its associated data.
     */
    delete: operations['deleteTrainingProgram'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/requirements/{requirementUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update program requirement
     * @description Updates a specific requirement for a program.
     */
    put: operations['updateProgramRequirement'];
    post?: never;
    /**
     * Delete program requirement
     * @description Removes a requirement from a program.
     */
    delete: operations['deleteProgramRequirement'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/courses/{courseUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        courseUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update program course
     * @description Updates course association settings within a program.
     */
    put: operations['updateProgramCourse'];
    post?: never;
    /**
     * Remove course from program
     * @description Removes the association between a course and program.
     */
    delete: operations['removeProgramCourse'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /** Get an organisation by UUID */
    get: operations['getOrganisationByUuid'];
    /** Update an organisation by UUID */
    put: operations['updateOrganisation'];
    post?: never;
    /** Delete an organisation by UUID */
    delete: operations['deleteOrganisation'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
      };
      cookie?: never;
    };
    /** Get a training branch by UUID within organization */
    get: operations['getTrainingBranchByUuid_1'];
    /** Update a training branch by UUID within organization */
    put: operations['updateTrainingBranch_1'];
    post?: never;
    /** Delete a training branch by UUID within organization */
    delete: operations['deleteTrainingBranch_1'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/poc/{pocUserUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
        pocUserUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update point of contact for training branch
     * @description Updates the point of contact user for a training branch. The POC must be either assigned to the branch or be a member of the parent organization.
     */
    put: operations['updatePointOfContact'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor by UUID
     * @description Fetches an instructor by their UUID.
     */
    get: operations['getInstructorByUuid'];
    /**
     * Update an instructor
     * @description Updates an existing instructor record.
     */
    put: operations['updateInstructor'];
    post?: never;
    /**
     * Delete an instructor
     * @description Removes an instructor record from the system.
     */
    delete: operations['deleteInstructor'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/skills/{skillUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        skillUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update instructor skill
     * @description Updates a specific skill record
     */
    put: operations['updateInstructorSkill'];
    post?: never;
    /**
     * Delete instructor skill
     * @description Removes a skill from an instructor
     */
    delete: operations['deleteInstructorSkill'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/memberships/{membershipUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        membershipUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update instructor membership
     * @description Updates a specific membership record
     */
    put: operations['updateInstructorMembership'];
    post?: never;
    /**
     * Delete instructor membership
     * @description Removes a membership record from an instructor
     */
    delete: operations['deleteInstructorMembership'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/experience/{experienceUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        experienceUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update instructor experience
     * @description Updates a specific experience record
     */
    put: operations['updateInstructorExperience'];
    post?: never;
    /**
     * Delete instructor experience
     * @description Removes an experience record from an instructor
     */
    delete: operations['deleteInstructorExperience'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/education/{educationUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        educationUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update instructor education
     * @description Updates a specific education record
     */
    put: operations['updateInstructorEducation'];
    post?: never;
    /**
     * Delete instructor education
     * @description Removes an education record from an instructor
     */
    delete: operations['deleteInstructorEducation'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        documentUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update instructor document
     * @description Updates a specific document
     */
    put: operations['updateInstructorDocument'];
    post?: never;
    /**
     * Delete instructor document
     * @description Removes a document from an instructor
     */
    delete: operations['deleteInstructorDocument'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course by UUID
     * @description Retrieves a complete course profile including computed properties and category information.
     *
     *     **Response includes:**
     *     - All course details and metadata
     *     - `category_uuids`: List of category UUIDs the course belongs to
     *     - `category_names`: List of category names for display (read-only)
     *     - `category_count`: Number of categories assigned to the course
     *     - `has_multiple_categories`: Boolean indicating if course has multiple categories
     *
     */
    get: operations['getCourseByUuid'];
    /**
     * Update course
     * @description Updates an existing course with selective field updates including category management.
     *
     *     **Category Updates:**
     *     - Provide `category_uuids` to completely replace existing categories
     *     - To add categories, include existing + new category UUIDs
     *     - To remove all categories, provide an empty array
     *     - Changes to categories are applied atomically
     *
     */
    put: operations['updateCourse'];
    post?: never;
    /**
     * Delete course
     * @description Permanently removes a course, its category associations, and all associated data.
     */
    delete: operations['deleteCourse'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/requirements/{requirementUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update course requirement
     * @description Updates a specific requirement for a course.
     */
    put: operations['updateCourseRequirement'];
    post?: never;
    /**
     * Delete course requirement
     * @description Removes a requirement from a course.
     */
    delete: operations['deleteCourseRequirement'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get lesson by UUID
     * @description Retrieves a specific lesson by its UUID within a course context.
     *
     *     **Lesson Retrieval Details:**
     *     - Returns complete lesson profile including computed properties
     *     - Validates that the lesson belongs to the specified course
     *     - Includes lesson content count and duration calculations
     *     - Provides lesson status and completion tracking information
     *
     *     **Response includes:**
     *     - Basic lesson information (title, description, objectives)
     *     - Lesson metadata (duration, sequence number, status)
     *     - Associated course UUID validation
     *     - Content summary statistics
     *     - Computed properties (isCompleted, progressPercentage for authenticated users)
     *
     *     **Use Cases:**
     *     - Direct lesson navigation from course content
     *     - Lesson detail page rendering
     *     - Progress tracking and analytics
     *     - Content validation and prerequisites checking
     *
     *     **Security Considerations:**
     *     - Validates lesson belongs to specified course
     *     - Respects course enrollment status for detailed information
     *     - May return limited data for unenrolled users depending on course visibility settings
     *
     */
    get: operations['getCourseLesson'];
    /**
     * Update course lesson
     * @description Updates a specific lesson within a course.
     */
    put: operations['updateCourseLesson'];
    post?: never;
    /**
     * Delete course lesson
     * @description Removes a lesson from a course including all associated content.
     */
    delete: operations['deleteCourseLesson'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/{contentUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
        contentUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update lesson content
     * @description Updates a specific content item within a lesson.
     */
    put: operations['updateLessonContent'];
    post?: never;
    /**
     * Delete lesson content
     * @description Removes content from a lesson.
     */
    delete: operations['deleteLessonContent'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/assessments/{assessmentUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        assessmentUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update course assessment
     * @description Updates a specific assessment within a course.
     */
    put: operations['updateCourseAssessment'];
    post?: never;
    /**
     * Delete course assessment
     * @description Removes an assessment from a course.
     */
    delete: operations['deleteCourseAssessment'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/grading-levels/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update grading level
     * @description Updates an existing grading level.
     */
    put: operations['updateGradingLevel'];
    post?: never;
    /**
     * Delete grading level
     * @description Removes a grading level.
     */
    delete: operations['deleteGradingLevel'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/difficulty-levels/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update difficulty level
     * @description Updates an existing difficulty level.
     */
    put: operations['updateDifficultyLevel'];
    post?: never;
    /**
     * Delete difficulty level
     * @description Removes a difficulty level if no courses are using it.
     */
    delete: operations['deleteDifficultyLevel'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/content-types/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update content type
     * @description Updates an existing content type.
     */
    put: operations['updateContentType'];
    post?: never;
    /**
     * Delete content type
     * @description Removes a content type if no lesson content is using it.
     */
    delete: operations['deleteContentType'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/categories/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get category by UUID
     * @description Retrieves a specific category by its UUID.
     */
    get: operations['getCategoryByUuid'];
    /**
     * Update category
     * @description Updates an existing category.
     */
    put: operations['updateCategory'];
    post?: never;
    /**
     * Delete category
     * @description Removes a category if it has no subcategories or associated courses.
     */
    delete: operations['deleteCategory'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get certificate by UUID
     * @description Retrieves a complete certificate including computed properties and verification status.
     */
    get: operations['getCertificateByUuid'];
    /**
     * Update certificate
     * @description Updates an existing certificate with selective field updates.
     */
    put: operations['updateCertificate'];
    post?: never;
    /**
     * Delete certificate
     * @description Permanently removes a certificate record.
     */
    delete: operations['deleteCertificate'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/templates/{templateUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        templateUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    /**
     * Update certificate template
     * @description Updates an existing certificate template.
     */
    put: operations['updateCertificateTemplate'];
    post?: never;
    /**
     * Delete certificate template
     * @description Removes a certificate template.
     */
    delete: operations['deleteCertificateTemplate'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{uuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get assignment by UUID
     * @description Retrieves a complete assignment including submission statistics.
     */
    get: operations['getAssignmentByUuid'];
    /**
     * Update assignment
     * @description Updates an existing assignment with selective field updates.
     */
    put: operations['updateAssignment'];
    post?: never;
    /**
     * Delete assignment
     * @description Permanently removes an assignment and all associated submissions.
     */
    delete: operations['deleteAssignment'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{uuid}/invitations/decline': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Decline invitation by token
     * @description Declines a pending invitation for the specified user using the unique token from the invitation email. This marks the invitation as declined and sends notification emails to the inviter. The invitation must be valid (not expired, not already accepted/declined) and the user email must match the invitation recipient.
     */
    post: operations['declineInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{uuid}/invitations/accept': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Accept invitation by token
     * @description Accepts a pending invitation for the specified user using the unique token from the invitation email. This creates the user-organization relationship with the specified role and sends confirmation emails. The invitation must be valid (not expired, not already accepted/declined) and the user email must match the invitation recipient.
     */
    post: operations['acceptInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{userUuid}/profile-image': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload User's Profile Image */
    post: operations['uploadProfileImage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/training-branches': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all training branches */
    get: operations['getAllTrainingBranches'];
    put?: never;
    /** Create a new training branch */
    post: operations['createTrainingBranch'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/students': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all students
     * @description Fetches a paginated list of students.
     */
    get: operations['getAllStudents'];
    put?: never;
    /**
     * Create a new student
     * @description Saves a new student record in the system.
     */
    post: operations['createStudent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all quizzes
     * @description Retrieves paginated list of all quizzes with filtering support.
     */
    get: operations['getAllQuizzes'];
    put?: never;
    /**
     * Create a new quiz
     * @description Creates a new quiz with default DRAFT status and inactive state.
     */
    post: operations['createQuiz'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/questions': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get quiz questions
     * @description Retrieves all questions for a quiz in display order with computed properties.
     */
    get: operations['getQuizQuestions'];
    put?: never;
    /**
     * Add question to quiz
     * @description Creates a new question for the specified quiz with automatic ordering.
     */
    post: operations['addQuizQuestion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get question options
     * @description Retrieves all options for a specific question.
     */
    get: operations['getQuestionOptions'];
    put?: never;
    /**
     * Add option to question
     * @description Creates a new option for a multiple choice or true/false question.
     */
    post: operations['addQuestionOption'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/questions/reorder': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reorder quiz questions
     * @description Updates the display order of questions within a quiz.
     */
    post: operations['reorderQuizQuestions'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all programs
     * @description Retrieves paginated list of all training programs with filtering support.
     */
    get: operations['getAllTrainingPrograms'];
    put?: never;
    /**
     * Create a new training program
     * @description Creates a new training program with default DRAFT status and inactive state.
     */
    post: operations['createTrainingProgram'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{uuid}/publish': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Publish training program
     * @description Publishes a program making it available for enrollment.
     */
    post: operations['publishProgram'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/requirements': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program requirements
     * @description Retrieves all requirements for a specific program.
     */
    get: operations['getProgramRequirements'];
    put?: never;
    /**
     * Add requirement to program
     * @description Adds a new requirement or prerequisite to a program.
     */
    post: operations['addProgramRequirement'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/courses': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program courses
     * @description Retrieves all courses in a program in sequence order with requirement status.
     */
    get: operations['getProgramCourses'];
    put?: never;
    /**
     * Add course to program
     * @description Associates a course with a program, setting sequence and requirement status.
     */
    post: operations['addProgramCourse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all organisations */
    get: operations['getAllOrganisations'];
    put?: never;
    /** Create a new organisation */
    post: operations['createOrganisation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /** Get training branches by organisation UUID */
    get: operations['getTrainingBranchesByOrganisation'];
    put?: never;
    /** Create a new training branch within organization */
    post: operations['createTrainingBranch_1'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/{userUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
        userUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Assign user to training branch
     * @description Assigns a user to a specific training branch with a defined role. If the user is not already in the parent organization, creates organization membership first. If the user is already in the organization, updates their branch assignment.
     */
    post: operations['assignUserToBranch'];
    /**
     * Remove user from training branch
     * @description Removes a user from a training branch. The user remains in the parent organization but loses branch-specific assignment.
     */
    delete: operations['removeUserFromBranch'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/invitations': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get all invitations for training branch
     * @description Retrieves all invitations (regardless of status) that have been sent specifically for this training branch. This only includes branch-specific invitations, not general organization invitations. Results are ordered by creation date (most recent first) and include all invitation statuses.
     */
    get: operations['getBranchInvitations'];
    put?: never;
    /**
     * Create training branch invitation
     * @description Creates and sends an email invitation for a user to join a specific training branch with a defined role. This is a specialized invitation that automatically determines the parent organization from the branch. The invitation email will include branch-specific information and location details.
     */
    post: operations['createBranchInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/invitations': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get all invitations for organization
     * @description Retrieves all invitations (regardless of status) that have been sent for this specific organization. This includes organization-level invitations and branch-specific invitations within the organization. Results are ordered by creation date (most recent first) and include all invitation statuses.
     */
    get: operations['getOrganizationInvitations'];
    put?: never;
    /**
     * Create organization invitation
     * @description Creates and sends an email invitation for a user to join this specific organization with a defined role. If a training branch UUID is provided, the invitation will be branch-specific within the organization. The invitation email will be sent to the recipient with acceptance and decline links containing the unique token.
     */
    post: operations['createOrganizationInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/invitations/{invitationUuid}/resend': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        invitationUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Resend invitation email
     * @description Resends the invitation email to the recipient with a fresh expiration date. Only pending invitations can be resent. The invitation expiry date will be extended from the current time. Only the original inviter or an organization administrator can resend invitations.
     */
    post: operations['resendInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/maintenance/send-reminders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Send expiry reminders
     * @description System maintenance endpoint to send reminder emails for invitations expiring soon. This is typically called by scheduled jobs to notify recipients about expiring invitations.
     */
    post: operations['sendExpiryReminders'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/maintenance/mark-expired': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Mark expired invitations
     * @description System maintenance endpoint to mark all expired pending invitations as expired. This is typically called by scheduled jobs to clean up expired invitations.
     */
    post: operations['markExpiredInvitations'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all instructors
     * @description Fetches a paginated list of instructors.
     */
    get: operations['getAllInstructors'];
    put?: never;
    /**
     * Create a new instructor
     * @description Saves a new instructor record in the system.
     */
    post: operations['createInstructor'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/skills': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor skills
     * @description Retrieves all skills for a specific instructor
     */
    get: operations['getInstructorSkills'];
    put?: never;
    /**
     * Add skill to instructor
     * @description Adds a skill to an instructor
     */
    post: operations['addInstructorSkill'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/memberships': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor memberships
     * @description Retrieves all membership records for a specific instructor
     */
    get: operations['getInstructorMemberships'];
    put?: never;
    /**
     * Add membership to instructor
     * @description Adds professional membership to an instructor
     */
    post: operations['addInstructorMembership'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/experience': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor experience
     * @description Retrieves all experience records for a specific instructor
     */
    get: operations['getInstructorExperience'];
    put?: never;
    /**
     * Add experience to instructor
     * @description Adds work experience to an instructor
     */
    post: operations['addInstructorExperience'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/education': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor education
     * @description Retrieves all education records for a specific instructor
     */
    get: operations['getInstructorEducation'];
    put?: never;
    /**
     * Add education to instructor
     * @description Adds educational qualification to an instructor
     */
    post: operations['addInstructorEducation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/documents': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get instructor documents
     * @description Retrieves all documents for a specific instructor
     */
    get: operations['getInstructorDocuments'];
    put?: never;
    /**
     * Add document to instructor
     * @description Uploads and associates a document with an instructor
     */
    post: operations['addInstructorDocument'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}/verify': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        documentUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Verify instructor document
     * @description Marks a document as verified
     */
    post: operations['verifyDocument'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all courses
     * @description Retrieves paginated list of all courses with category information and filtering support.
     */
    get: operations['getAllCourses'];
    put?: never;
    /**
     * Create a new course
     * @description Creates a new course with default DRAFT status and inactive state. Supports multiple categories.
     *
     *     **Category Assignment:**
     *     - Use `category_uuids` field to assign multiple categories to the course
     *     - Categories are validated to ensure they exist before assignment
     *     - A course can belong to multiple categories for better organization and discoverability
     *
     *     **Example Request Body:**
     *     ```json
     *     {
     *         "name": "Advanced Java Programming",
     *         "instructor_uuid": "instructor-uuid-here",
     *         "category_uuids": ["java-uuid", "programming-uuid"],
     *         "description": "Comprehensive Java course",
     *         "duration_hours": 40,
     *         "duration_minutes": 0
     *     }
     *     ```
     *
     */
    post: operations['createCourse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/unpublish': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Unpublish course
     * @description Unpublishes a course, changing it from PUBLISHED to DRAFT status.
     *
     *     **Smart Active Status Logic:**
     *     - If NO active enrollments: Course becomes DRAFT and ACTIVE (available for new enrollments)
     *     - If HAS active enrollments: Course becomes DRAFT and INACTIVE (existing students continue, no new enrollments)
     *
     *     **Business Rules:**
     *     - Course status always changes from PUBLISHED to DRAFT
     *     - Active status depends on current enrollment situation
     *     - Existing enrollments are never affected
     *     - Course can be published again later
     *
     *     **Use Cases:**
     *     - Temporarily remove course from catalog while keeping it available
     *     - Stop new enrollments while allowing current students to continue
     *     - Prepare course for updates before republishing
     *
     */
    post: operations['unpublishCourse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/thumbnail': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload course thumbnail
     * @description Uploads a thumbnail image for the specified course. The thumbnail is typically used in course
     *     listings, search results, and course cards throughout the application.
     *
     *     **File Requirements:**
     *     - Supported formats: JPG, PNG, GIF, WebP
     *     - Maximum file size: 5MB
     *     - Recommended dimensions: 400x300 pixels or 4:3 aspect ratio
     *     - Files will be automatically optimized for web delivery
     *
     *     **Usage Guidelines:**
     *     - Thumbnails should clearly represent the course content
     *     - Use high-quality, professional images
     *     - Avoid images with too much text or small details
     *     - Consider accessibility and contrast for text overlays
     *
     *     **Storage Details:**
     *     - Files are stored in the course_thumbnails folder
     *     - Previous thumbnail will be replaced if a new one is uploaded
     *     - Generated URL will be automatically set in the course record
     *
     */
    post: operations['uploadCourseThumbnail'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/publish': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Publish course
     * @description Publishes a course making it available for enrollment.
     */
    post: operations['publishCourse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/intro-video': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload course introduction video
     * @description Uploads an introduction video for the specified course. The intro video is used for course
     *     previews, marketing, and helping students understand what they'll learn.
     *
     *     **File Requirements:**
     *     - Supported formats: MP4, WebM, MOV, AVI
     *     - Maximum file size: 100MB
     *     - Recommended duration: 1-3 minutes
     *     - Recommended resolution: 720p or 1080p
     *
     *     **Content Guidelines:**
     *     - Keep intro videos concise and engaging
     *     - Clearly explain what students will learn
     *     - Include instructor introduction if appropriate
     *     - Ensure good audio quality
     *     - Consider adding captions for accessibility
     *
     *     **Storage Details:**
     *     - Files are stored in the course_intro_videos folder
     *     - Previous intro video will be replaced if a new one is uploaded
     *     - Generated URL will be automatically set in the course record
     *     - Consider video compression for optimal streaming performance
     *
     */
    post: operations['uploadCourseIntroVideo'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/banner': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Upload course banner
     * @description Uploads a banner image for the specified course. The banner is typically used on the course
     *     detail page as a hero image and in promotional materials.
     *
     *     **File Requirements:**
     *     - Supported formats: JPG, PNG, GIF, WebP
     *     - Maximum file size: 10MB
     *     - Recommended dimensions: 1200x400 pixels or 3:1 aspect ratio
     *     - Files will be automatically optimized for web delivery
     *
     *     **Usage Guidelines:**
     *     - Banners should be visually striking and professional
     *     - Consider responsive design - banner should work on mobile and desktop
     *     - Use images that complement your course branding
     *     - Ensure good contrast if overlaying text
     *
     *     **Storage Details:**
     *     - Files are stored in the course_banners folder
     *     - Previous banner will be replaced if a new one is uploaded
     *     - Generated URL will be automatically set in the course record
     *
     */
    post: operations['uploadCourseBanner'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/archive': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Archive course
     * @description Archives a course, making it completely unavailable.
     *
     *     **Important:**
     *     - This is typically a permanent action
     *     - Course becomes completely inaccessible to new students
     *     - Existing enrollments may be handled differently based on business rules
     *     - Course data is preserved for historical/audit purposes
     *
     */
    post: operations['archiveCourse'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/requirements': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course requirements
     * @description Retrieves all requirements for a specific course.
     */
    get: operations['getCourseRequirements'];
    put?: never;
    /**
     * Add requirement to course
     * @description Adds a new requirement or prerequisite to a course.
     */
    post: operations['addCourseRequirement'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/lessons': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course lessons
     * @description Retrieves all lessons for a specific course in sequence order.
     */
    get: operations['getCourseLessons'];
    put?: never;
    /**
     * Add lesson to course
     * @description Creates a new lesson associated with the specified course.
     */
    post: operations['addCourseLesson'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get lesson content
     * @description Retrieves all content for a lesson in display order with computed properties.
     */
    get: operations['getLessonContent'];
    put?: never;
    /**
     * Add content to lesson
     * @description Adds new content item to a specific lesson with automatic ordering.
     */
    post: operations['addLessonContent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/reorder': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reorder lesson content
     * @description Updates the display order of content items within a lesson.
     */
    post: operations['reorderLessonContent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/assessments': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course assessments
     * @description Retrieves all assessments for a specific course.
     */
    get: operations['getCourseAssessments'];
    put?: never;
    /**
     * Add assessment to course
     * @description Creates a new assessment for the course with optional rubric association.
     */
    post: operations['addCourseAssessment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/grading-levels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all grading levels
     * @description Retrieves paginated list of all grading levels.
     */
    get: operations['getAllGradingLevels'];
    put?: never;
    /**
     * Create grading level
     * @description Creates a new grading level for assessment scoring.
     */
    post: operations['createGradingLevel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/difficulty-levels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all difficulty levels
     * @description Retrieves all difficulty levels in order.
     */
    get: operations['getAllDifficultyLevels'];
    put?: never;
    /**
     * Create difficulty level
     * @description Creates a new difficulty level for course classification.
     */
    post: operations['createDifficultyLevel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/difficulty-levels/reorder': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reorder difficulty levels
     * @description Updates the order of difficulty levels.
     */
    post: operations['reorderDifficultyLevels'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/content-types': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all content types
     * @description Retrieves paginated list of all content types.
     */
    get: operations['getAllContentTypes'];
    put?: never;
    /**
     * Create content type
     * @description Creates a new content type for lesson content classification.
     */
    post: operations['createContentType'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all categories
     * @description Retrieves paginated list of all categories.
     */
    get: operations['getAllCategories'];
    put?: never;
    /**
     * Create category
     * @description Creates a new category for organizing courses and programs.
     */
    post: operations['createCategory'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all certificates
     * @description Retrieves paginated list of all certificates with filtering support.
     */
    get: operations['getAllCertificates'];
    put?: never;
    /**
     * Create a new certificate
     * @description Manually creates a certificate record with automatic number generation.
     */
    post: operations['createCertificate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/{uuid}/revoke': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Revoke certificate
     * @description Revokes a certificate with reason, making it invalid.
     */
    post: operations['revokeCertificate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/{uuid}/generate-url': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate certificate URL
     * @description Generates and updates the downloadable URL for a certificate.
     */
    post: operations['generateCertificateUrl'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/templates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get certificate templates
     * @description Retrieves all available certificate templates.
     */
    get: operations['getCertificateTemplates'];
    put?: never;
    /**
     * Create certificate template
     * @description Creates a new certificate template for generating certificates.
     */
    post: operations['createCertificateTemplate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/generate/program': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate program certificate
     * @description Automatically generates a certificate upon program completion.
     */
    post: operations['generateProgramCertificate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/generate/course': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate course certificate
     * @description Automatically generates a certificate upon course completion.
     */
    post: operations['generateCourseCertificate'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all assignments
     * @description Retrieves paginated list of all assignments with filtering support.
     */
    get: operations['getAllAssignments'];
    put?: never;
    /**
     * Create a new assignment
     * @description Creates a new assignment with default DRAFT status and inactive state.
     */
    post: operations['createAssignment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/submit': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit assignment
     * @description Creates a new submission for an assignment by a student.
     */
    post: operations['submitAssignment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/return': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
        submissionUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Return submission for revision
     * @description Returns a submission to student with feedback for revision.
     */
    post: operations['returnSubmission'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/grade': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
        submissionUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Grade submission
     * @description Grades a student's assignment submission with score and comments.
     */
    post: operations['gradeSubmission'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all users
     * @description Fetches a paginated list of all users in the system. Supports pagination and sorting by any user field.
     */
    get: operations['getAllUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{uuid}/invitations/sent': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get invitations sent by user
     * @description Retrieves all invitations that have been sent by a specific user across all organizations and branches. This endpoint helps users track invitations they have created. Results are ordered by creation date (most recent first) and include all invitation statuses.
     */
    get: operations['getInvitationsSentByUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/{uuid}/invitations/pending': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get pending invitations for user by email
     * @description Retrieves all pending invitations sent to a specific user's email address across all organizations and branches. This endpoint helps users see all outstanding invitations they have received. Only returns invitations with PENDING status that haven't expired.
     */
    get: operations['getPendingInvitationsForUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search users
     * @description Fetches a paginated list of users based on optional filters. Supports pagination and sorting.
     */
    get: operations['search'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/profile-image/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileName: string;
      };
      cookie?: never;
    };
    /** Get user profile image by file name */
    get: operations['getProfileImage'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/training-branches/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search training branches
     * @description Fetches a paginated list of training branches based on optional filters. Supports pagination and sorting.
     */
    get: operations['search_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/training-branches/organisation/{organisationUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        organisationUuid: string;
      };
      cookie?: never;
    };
    /** Get training branches by organisation UUID */
    get: operations['getTrainingBranchesByOrganisation_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/students/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search students
     * @description Search for students based on criteria.
     */
    get: operations['searchStudents'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/total-points': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get quiz total points
     * @description Returns the maximum possible points for a quiz.
     */
    get: operations['getQuizTotalPoints'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/question-distribution': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get question category distribution
     * @description Returns distribution of question types within a quiz.
     */
    get: operations['getQuestionDistribution'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/{quizUuid}/attempts': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get quiz attempts
     * @description Retrieves all attempts for a specific quiz with scoring data.
     */
    get: operations['getQuizAttempts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search quizzes
     * @description Advanced quiz search with flexible criteria and operators.
     *
     *     **Common Quiz Search Examples:**
     *     - `title_like=midterm` - Quizzes with "midterm" in title
     *     - `lessonUuid=uuid` - Quizzes for specific lesson
     *     - `status=PUBLISHED` - Only published quizzes
     *     - `active=true` - Only active quizzes
     *     - `timeLimitMinutes_gte=30` - Quizzes with 30+ minute time limit
     *     - `attemptsAllowed_lte=3` - Quizzes with 3 or fewer attempts allowed
     *     - `passingScore_gte=70` - Quizzes with passing score 70%+
     *
     */
    get: operations['searchQuizzes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/questions/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search quiz questions
     * @description Search questions across all quizzes.
     *
     *     **Common Question Search Examples:**
     *     - `quizUuid=uuid` - All questions for specific quiz
     *     - `questionType=MULTIPLE_CHOICE` - Only multiple choice questions
     *     - `points_gte=2` - Questions worth 2+ points
     *     - `questionText_like=calculate` - Questions containing "calculate"
     *
     */
    get: operations['searchQuestions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/quizzes/attempts/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search quiz attempts
     * @description Search quiz attempts across all quizzes.
     *
     *     **Common Attempt Search Examples:**
     *     - `quizUuid=uuid` - All attempts for specific quiz
     *     - `enrollmentUuid=uuid` - All attempts by specific student
     *     - `status=COMPLETED` - Only completed attempts
     *     - `isPassed=true` - Only passing attempts
     *     - `percentage_gte=85` - Attempts with 85%+ score
     *     - `startedAt_gte=2024-01-01T00:00:00` - Attempts from 2024
     *
     */
    get: operations['searchAttempts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/enrollments': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program enrollments
     * @description Retrieves enrollment data for a specific program with completion analytics.
     */
    get: operations['getProgramEnrollments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/courses/required': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get required courses
     * @description Retrieves only the required courses for a program.
     */
    get: operations['getRequiredCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/courses/optional': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get optional courses
     * @description Retrieves only the optional courses for a program.
     */
    get: operations['getOptionalCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/completion-rate': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program completion rate
     * @description Returns the completion rate percentage for a program.
     */
    get: operations['getProgramCompletionRate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/{programUuid}/certificates': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get program certificates
     * @description Retrieves all certificates issued for program completions.
     */
    get: operations['getProgramCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search training programs
     * @description Advanced program search with flexible criteria and operators.
     *
     *     **Common Program Search Examples:**
     *     - `title_like=data science` - Programs with titles containing "data science"
     *     - `status=PUBLISHED` - Only published programs
     *     - `active=true` - Only active programs
     *     - `status_in=PUBLISHED,ACTIVE` - Published or active programs
     *     - `price_lte=500.00` - Programs priced at $500 or less
     *     - `price=null` - Free programs
     *     - `instructorUuid=uuid` - Programs by specific instructor
     *     - `categoryUuid=uuid` - Programs in specific category
     *     - `totalDurationHours_gte=40` - Programs 40+ hours long
     *     - `totalDurationHours_between=20,100` - Programs between 20-100 hours
     *     - `createdDate_gte=2024-01-01T00:00:00` - Programs created after Jan 1, 2024
     *
     *     **Advanced Program Queries:**
     *     - `status=PUBLISHED&active=true&price_lte=100` - Published, active programs under $100
     *     - `title_like=certification&totalDurationHours_gte=50` - Certification programs 50+ hours
     *     - `instructorUuid=uuid&status=PUBLISHED` - Published programs by specific instructor
     *
     *     For complete operator documentation, see the instructor search endpoint.
     *
     */
    get: operations['searchTrainingPrograms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/requirements/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search program requirements
     * @description Search program requirements and prerequisites.
     *
     *     **Common Program Requirement Search Examples:**
     *     - `programUuid=uuid` - All requirements for specific program
     *     - `requirementType=PREREQUISITE` - Only prerequisites
     *     - `isMandatory=true` - Only mandatory requirements
     *     - `requirementText_like=certification` - Requirements mentioning "certification"
     *
     */
    get: operations['searchProgramRequirements'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/published': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get published programs
     * @description Retrieves all published programs available for enrollment.
     */
    get: operations['getPublishedPrograms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/instructor/{instructorUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get programs by instructor
     * @description Retrieves all programs created by a specific instructor.
     */
    get: operations['getProgramsByInstructor'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/free': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get free programs
     * @description Retrieves all programs available at no cost.
     */
    get: operations['getFreePrograms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/enrollments/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search program enrollments
     * @description Search enrollment records across all programs.
     *
     *     **Common Program Enrollment Search Examples:**
     *     - `programUuid=uuid` - All enrollments for specific program
     *     - `studentUuid=uuid` - All program enrollments for specific student
     *     - `status=COMPLETED` - Only completed program enrollments
     *     - `progressPercentage_gte=90` - Students with 90%+ program progress
     *     - `enrollmentDate_gte=2024-01-01T00:00:00` - Program enrollments from 2024
     *     - `finalGrade_gte=85` - Program completions with grade 85+
     *
     */
    get: operations['searchProgramEnrollments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/courses/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search program courses
     * @description Search course associations within programs.
     *
     *     **Common Program Course Search Examples:**
     *     - `programUuid=uuid` - All courses for specific program
     *     - `courseUuid=uuid` - All programs containing specific course
     *     - `isRequired=true` - Only required course associations
     *     - `sequenceOrder_gte=3` - Courses from sequence 3 onwards
     *
     */
    get: operations['searchProgramCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/category/{categoryUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get programs by category
     * @description Retrieves all programs in a specific category.
     */
    get: operations['getProgramsByCategory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/programs/active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get active programs
     * @description Retrieves all currently active and published programs.
     */
    get: operations['getActivePrograms'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/users': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /** Get users by organisation ID */
    get: operations['getUsersByOrganisation'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/users/domain/{domainName}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        domainName: string;
      };
      cookie?: never;
    };
    /**
     * Get users by organisation and domain
     * @description Retrieves all users in the organisation filtered by their role/domain. This endpoint is useful for getting all instructors, students, or admins within an organisation.
     */
    get: operations['getUsersByOrganisationAndDomain'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get users assigned to training branch
     * @description Retrieves all users that are assigned to a specific training branch within the organization. This includes users with any role/domain within the branch.
     */
    get: operations['getBranchUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/domain/{domainName}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        branchUuid: string;
        domainName: string;
      };
      cookie?: never;
    };
    /**
     * Get users by training branch and domain
     * @description Retrieves all users in the training branch filtered by their role/domain. This endpoint is useful for getting all instructors, students, or admins within a specific branch.
     */
    get: operations['getBranchUsersByDomain'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search organisations
     * @description Fetches a paginated list of organisations based on optional filters. Supports pagination and sorting.
     */
    get: operations['search_2'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/validate/{token}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        token: string;
      };
      cookie?: never;
    };
    /**
     * Validate invitation token
     * @description Validates whether an invitation token is currently valid and can be accepted or declined. Checks if the invitation exists, is in PENDING status, and has not expired. This endpoint is useful for pre-validation before displaying acceptance/decline forms.
     */
    get: operations['validateInvitation'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/token/{token}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        token: string;
      };
      cookie?: never;
    };
    /**
     * Get invitation details by token
     * @description Retrieves complete invitation information using the unique token from the invitation email. This endpoint is typically used by the invitation acceptance/decline pages to display invitation details before the user makes their decision. Includes organization, branch, and role information.
     */
    get: operations['getInvitationByToken'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/pending': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get pending invitations for email address
     * @description Retrieves all pending invitations sent to a specific email address across all organizations and branches. This endpoint helps users see all outstanding invitations they have received. Only returns invitations with PENDING status that haven't expired.
     */
    get: operations['getPendingInvitationsForEmail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/skills/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructor skills
     * @description Search skills with flexible criteria.
     *
     *     **Common Skills Search Examples:**
     *     - `instructorUuid=uuid` - All skills for specific instructor
     *     - `skillName_like=java` - Skills containing "java"
     *     - `proficiencyLevel=EXPERT` - Expert level skills only
     *     - `proficiencyLevel_in=ADVANCED,EXPERT` - Advanced or expert skills
     *     - `skillName_startswith=Data` - Skills starting with "Data"
     *     - `proficiencyLevel_noteq=BEGINNER` - Non-beginner skills
     *
     *     **Skills Analysis Queries:**
     *     - `skillName_like=programming&proficiencyLevel_in=ADVANCED,EXPERT` - Advanced programming skills
     *     - `createdDate_gte=2024-01-01&proficiencyLevel=EXPERT` - Recently added expert skills
     *
     *     **Proficiency Levels:** BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
     *
     *     For complete operator documentation, see the main search endpoint.
     *
     */
    get: operations['searchSkills'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructors
     * @description  Search for instructors using flexible criteria with advanced operators.
     *
     *      **Basic Search:**
     *      - `field=value` - Exact match (default operation)
     *      - `firstName=John` - Find instructors with firstName exactly "John"
     *
     *      **Comparison Operators:**
     *      - `field_gt=value` - Greater than
     *      - `field_lt=value` - Less than
     *      - `field_gte=value` - Greater than or equal
     *      - `field_lte=value` - Less than or equal
     *      - `createdDate_gte=2024-01-01T00:00:00` - Created after Jan 1, 2024
     *
     *      **String Operations:**
     *      - `field_like=value` - Contains (case-insensitive)
     *      - `field_startswith=value` - Starts with (case-insensitive)
     *      - `field_endswith=value` - Ends with (case-insensitive)
     *      - `lastName_like=smith` - Last name contains "smith"
     *
     *      **List Operations:**
     *      - `field_in=val1,val2,val3` - Field is in list
     *      - `field_notin=val1,val2` - Field is not in list
     *      - `status_in=ACTIVE,PENDING` - Status is either ACTIVE or PENDING
     *
     *      **Negation:**
     *      - `field_noteq=value` - Not equal to value
     *      - `isActive_noteq=false` - Is not false (i.e., is true)
     *
     *      **Range Operations:**
     *      - `field_between=start,end` - Value between start and end (inclusive)
     *      - `createdDate_between=2024-01-01T00:00:00,2024-12-31T23:59:59` - Created in 2024
     *
     *      **Complex Operations:**
     *      - `field_notingroup=relationshipField,groupId` - Not in specific group
     *
     *      **Nested Field Access:**
     *      - `nestedObject.field=value` - Search in nested objects
     *
     *      **Supported Data Types:**
     *      - String, UUID, Boolean (true/false or 1/0), Integer, Long, Double, Float, BigDecimal
     *      - Date (YYYY-MM-DD), Timestamp, LocalDateTime (ISO format)
     *
     *      **Examples:**
     *      - `/search?firstName_like=john&isActive=true&createdDate_gte=2024-01-01T00:00:00`
     *      - `/search?experience_gt=5&status_in=ACTIVE,VERIFIED`
     *      - `/search?email_endswith=@company.com&department_noteq=IT`
     *
     */
    get: operations['searchInstructors'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/memberships/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructor memberships
     * @description Search membership records with flexible criteria.
     *
     *     **Common Membership Search Examples:**
     *     - `instructorUuid=uuid` - All memberships for specific instructor
     *     - `isActive=true` - Active memberships only
     *     - `organizationName_like=professional` - Organizations with "professional" in name
     *     - `startDate_gte=2023-01-01` - Memberships started in 2023 or later
     *     - `endDate=null` - Ongoing memberships (no end date)
     *     - `membershipNumber_startswith=PRO` - Numbers starting with "PRO"
     *
     *     **Membership Analysis Queries:**
     *     - `isActive=true&endDate=null` - Currently active ongoing memberships
     *     - `isActive=false&endDate_gte=2024-01-01` - Recently expired memberships
     *     - `startDate_between=2020-01-01,2023-12-31` - Joined between 2020-2023
     *
     *     For complete operator documentation, see the main search endpoint.
     *
     */
    get: operations['searchMemberships'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/experience/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructor experience
     * @description Search experience records with flexible criteria.
     *
     *     **Common Experience Search Examples:**
     *     - `instructorUuid=uuid` - All experience for specific instructor
     *     - `isCurrentPosition=true` - Current positions only
     *     - `position_like=manager` - Positions containing "manager"
     *     - `organizationName_endswith=Ltd` - Organizations ending with "Ltd"
     *     - `yearsOfExperience_gte=5` - 5+ years experience
     *     - `startDate_gte=2020-01-01` - Started in 2020 or later
     *     - `endDate=null` - Ongoing positions (no end date)
     *     - `responsibilities_like=team` - Responsibilities mentioning "team"
     *
     *     **Experience Analysis Queries:**
     *     - `isCurrentPosition=false&endDate_gte=2023-01-01` - Recent past positions
     *     - `yearsOfExperience_between=3,10` - Mid-level experience (3-10 years)
     *
     *     For complete operator documentation, see the main search endpoint.
     *
     */
    get: operations['searchExperience'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/education/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructor education
     * @description Search education records with flexible criteria.
     *
     *     **Common Education Search Examples:**
     *     - `instructorUuid=uuid` - All education for specific instructor
     *     - `qualification_like=degree` - Qualifications containing "degree"
     *     - `schoolName_startswith=University` - Schools starting with "University"
     *     - `yearCompleted_gte=2020` - Completed in 2020 or later
     *     - `yearCompleted_between=2015,2020` - Completed between 2015-2020
     *     - `certificateNumber_noteq=null` - Has certificate number
     *
     *     For complete operator documentation, see the main search endpoint.
     *
     */
    get: operations['searchEducation'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/instructors/documents/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search instructor documents
     * @description Search documents with flexible criteria using advanced operators.
     *
     *     **Common Document Search Examples:**
     *     - `instructorUuid=uuid` - All documents for specific instructor
     *     - `isVerified=false` - Unverified documents
     *     - `status=PENDING` - Documents with pending status
     *     - `status_in=APPROVED,VERIFIED` - Approved or verified documents
     *     - `expiryDate_lte=2025-12-31` - Documents expiring by end of 2025
     *     - `mimeType_like=pdf` - PDF documents
     *     - `fileSizeBytes_gt=1048576` - Files larger than 1MB
     *     - `title_startswith=Certificate` - Titles starting with "Certificate"
     *     - `createdDate_between=2024-01-01T00:00:00,2024-12-31T23:59:59` - Created in 2024
     *
     *     **Special Document Queries:**
     *     - `isVerified=false&expiryDate_lte=2025-12-31` - Unverified expiring documents
     *     - `status_noteq=EXPIRED&expiryDate_lt=2025-07-02` - Non-expired but overdue docs
     *
     *     For complete operator documentation, see the main search endpoint.
     *
     */
    get: operations['searchDocuments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{uuid}/status-transitions': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    /**
     * Get available status transitions
     * @description Returns the list of valid status transitions for a course based on its current state and business rules.
     *
     *     **Status Transition Rules:**
     *     - DRAFT → IN_REVIEW, ARCHIVED
     *     - IN_REVIEW → DRAFT, PUBLISHED, ARCHIVED
     *     - PUBLISHED → DRAFT (if no active enrollments), ARCHIVED
     *     - ARCHIVED → (no transitions - permanent state)
     *
     */
    get: operations['getStatusTransitions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/enrollments': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course enrollments
     * @description Retrieves enrollment data for a specific course with analytics.
     */
    get: operations['getCourseEnrollments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/completion-rate': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course completion rate
     * @description Returns the completion rate percentage for a course.
     */
    get: operations['getCourseCompletionRate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/categories': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get course categories
     * @description Retrieves all categories assigned to a specific course.
     */
    get: operations['getCourseCategories'];
    put?: never;
    post?: never;
    /**
     * Remove all categories from course
     * @description Removes all category associations from a course.
     */
    delete: operations['removeAllCategoriesFromCourse'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search courses with enhanced category filtering
     * @description Advanced course search with flexible criteria and operators, including category-based filtering.
     *
     *     **Category-Specific Search Examples:**
     *     - `categoryUuids_in=uuid1,uuid2` - Courses in any of these categories
     *     - `categoryUuids_contains=uuid` - Courses containing specific category
     *     - `categoryNames_like=programming` - Courses in categories with "programming" in the name
     *     - `categoryCount_gte=2` - Courses assigned to 2 or more categories
     *     - `hasMultipleCategories=true` - Courses with multiple category assignments
     *
     *     **Combined Search Examples:**
     *     - `status=PUBLISHED&categoryUuids_in=uuid1,uuid2&price_lte=100` - Published courses under $100 in specific categories
     *     - `name_like=java&categoryNames_like=programming&active=true` - Active Java courses in programming categories
     *
     *     For complete operator documentation, see the general course search endpoint.
     *
     */
    get: operations['searchCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/requirements/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search course requirements
     * @description Search course requirements and prerequisites.
     *
     *     **Common Requirement Search Examples:**
     *     - `courseUuid=uuid` - All requirements for specific course
     *     - `requirementType=PREREQUISITE` - Only prerequisites
     *     - `isMandatory=true` - Only mandatory requirements
     *     - `requirementText_like=experience` - Requirements mentioning "experience"
     *
     */
    get: operations['searchRequirements'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/published': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get published courses
     * @description Retrieves all published courses available for enrollment.
     */
    get: operations['getPublishedCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/media/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        fileName: string;
      };
      cookie?: never;
    };
    /**
     * Get course media by file name
     * @description Retrieves course media files (thumbnails, banners, intro videos) by their file name.
     *     This endpoint serves the actual media files with appropriate content types and caching headers.
     *
     *     **File Types Served:**
     *     - Course thumbnails from course_thumbnails folder
     *     - Course banners from course_banners folder
     *     - Course intro videos from course_intro_videos folder
     *
     *     **Response Features:**
     *     - Automatic content type detection
     *     - Optimized caching headers for performance
     *     - Support for range requests (for videos)
     *     - Proper file serving with inline disposition
     *
     *     **Usage:**
     *     - File names are typically returned from upload endpoints
     *     - URLs are automatically generated and stored in course records
     *     - Direct access via this endpoint for custom implementations
     *
     */
    get: operations['getCourseMedia'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/lessons/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search lessons
     * @description Search course lessons with advanced filtering.
     *
     *     **Common Lesson Search Examples:**
     *     - `courseUuid=uuid` - All lessons for specific course
     *     - `status=PUBLISHED` - Only published lessons
     *     - `active=true` - Only active lessons
     *     - `lessonNumber_gte=5` - Lessons from lesson 5 onwards
     *     - `title_like=introduction` - Lessons with "introduction" in title
     *     - `durationHours_between=1,3` - Lessons between 1-3 hours
     *
     */
    get: operations['searchLessons'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/instructor/{instructorUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get courses by instructor
     * @description Retrieves all courses created by a specific instructor.
     */
    get: operations['getCoursesByInstructor'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/enrollments/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search course enrollments
     * @description Search enrollment records across all courses.
     *
     *     **Common Enrollment Search Examples:**
     *     - `courseUuid=uuid` - All enrollments for specific course
     *     - `studentUuid=uuid` - All enrollments for specific student
     *     - `status=COMPLETED` - Only completed enrollments
     *     - `progressPercentage_gte=80` - Students with 80%+ progress
     *     - `enrollmentDate_gte=2024-01-01T00:00:00` - Enrollments from 2024
     *
     */
    get: operations['searchEnrollments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/content/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search lesson content
     * @description Search lesson content across all courses.
     *
     *     **Common Content Search Examples:**
     *     - `lessonUuid=uuid` - All content for specific lesson
     *     - `contentTypeUuid=uuid` - Content of specific type
     *     - `isRequired=true` - Only required content
     *     - `title_like=video` - Content with "video" in title
     *     - `fileSizeBytes_gt=1048576` - Files larger than 1MB
     *
     */
    get: operations['searchLessonContent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/category/{categoryUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get courses by category
     * @description Retrieves all courses in a specific category.
     *
     *     **Enhanced Category Search:**
     *     This endpoint now supports the many-to-many relationship, returning courses that have
     *     the specified category assigned to them, regardless of what other categories they may also have.
     *
     */
    get: operations['getCoursesByCategory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/category-mappings/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search course category mappings
     * @description Search course-category relationships.
     *
     *     **Common Mapping Search Examples:**
     *     - `courseUuid=uuid` - All category mappings for specific course
     *     - `categoryUuid=uuid` - All course mappings for specific category
     *     - `courseName_like=java` - Mappings for courses with "java" in name
     *     - `categoryName_like=programming` - Mappings for categories with "programming" in name
     *
     */
    get: operations['searchCategoryMappings'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/assessments/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search course assessments
     * @description Search assessments across all courses.
     *
     *     **Common Assessment Search Examples:**
     *     - `courseUuid=uuid` - All assessments for specific course
     *     - `assessmentType=QUIZ` - Only quiz assessments
     *     - `isRequired=true` - Only required assessments
     *     - `weightPercentage_gte=20` - Assessments worth 20% or more
     *
     */
    get: operations['searchAssessments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/active': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get active courses
     * @description Retrieves all currently active and published courses.
     */
    get: operations['getActiveCourses'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/content-types/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search content types
     * @description Search content types with filtering options.
     *
     *     **Common Content Type Search Examples:**
     *     - `name_like=video` - Content types with "video" in name
     *     - `mimeTypes_like=image/` - Image content types
     *     - `maxFileSizeMb_gte=100` - Large file content types
     *
     */
    get: operations['searchContentTypes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/content-types/mime-support/{mimeType}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mimeType: string;
      };
      cookie?: never;
    };
    /**
     * Check MIME type support
     * @description Checks if a specific MIME type is supported by the system.
     */
    get: operations['checkMimeTypeSupport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/content-types/media': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get media content types
     * @description Retrieves content types for media files (video, audio, images).
     */
    get: operations['getMediaContentTypes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/categories/{parentUuid}/subcategories': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        parentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get subcategories
     * @description Retrieves all subcategories for a specific parent category.
     */
    get: operations['getSubCategories'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/categories/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search categories
     * @description Search categories with filtering options.
     *
     *     **Common Category Search Examples:**
     *     - `name_like=technology` - Categories with "technology" in name
     *     - `parentUuid=null` - Root categories only
     *     - `parentUuid=uuid` - Subcategories of specific parent
     *     - `isActive=true` - Only active categories
     *
     */
    get: operations['searchCategories'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/config/categories/root': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get root categories
     * @description Retrieves all top-level categories (no parent).
     */
    get: operations['getRootCategories'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/verify/{certificateNumber}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        certificateNumber: string;
      };
      cookie?: never;
    };
    /**
     * Verify certificate
     * @description Verifies the authenticity of a certificate using its certificate number.
     */
    get: operations['verifyCertificate'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/templates/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search certificate templates
     * @description Search certificate templates with filtering.
     *
     *     **Common Template Search Examples:**
     *     - `templateType=COURSE` - Course certificate templates
     *     - `templateType=PROGRAM` - Program certificate templates
     *     - `status=PUBLISHED` - Published templates
     *     - `active=true` - Active templates
     *     - `name_like=modern` - Templates with "modern" in name
     *
     */
    get: operations['searchCertificateTemplates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/student/{studentUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get student certificates
     * @description Retrieves all certificates earned by a specific student.
     */
    get: operations['getStudentCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/student/{studentUuid}/downloadable': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get downloadable certificates
     * @description Retrieves all valid certificates available for download by a student.
     */
    get: operations['getDownloadableCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search certificates
     * @description Advanced certificate search with flexible criteria and operators.
     *
     *     **Common Certificate Search Examples:**
     *     - `studentUuid=uuid` - All certificates for specific student
     *     - `courseUuid=uuid` - All certificates for specific course
     *     - `programUuid=uuid` - All certificates for specific program
     *     - `isValid=true` - Only valid certificates
     *     - `isValid=false` - Only revoked certificates
     *     - `finalGrade_gte=85` - Certificates with grade 85%+
     *     - `issuedDate_gte=2024-01-01T00:00:00` - Certificates issued from 2024
     *     - `certificateNumber_like=CERT-2024` - Certificates from 2024
     *
     *     **Certificate Analytics Queries:**
     *     - `courseUuid_noteq=null&isValid=true` - Valid course certificates
     *     - `programUuid_noteq=null&isValid=true` - Valid program certificates
     *     - `finalGrade_between=80,100&isValid=true` - High-grade valid certificates
     *
     */
    get: operations['searchCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/revoked': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get revoked certificates
     * @description Retrieves all revoked certificates for administrative review.
     */
    get: operations['getRevokedCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/program-certificates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get program certificates
     * @description Retrieves all certificates issued for program completions.
     */
    get: operations['getProgramCertificates_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/number/{certificateNumber}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        certificateNumber: string;
      };
      cookie?: never;
    };
    /**
     * Get certificate by number
     * @description Retrieves certificate details using certificate number for public verification.
     */
    get: operations['getCertificateByNumber'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/certificates/course-certificates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get course certificates
     * @description Retrieves all certificates issued for course completions.
     */
    get: operations['getCourseCertificates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/submissions': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get assignment submissions
     * @description Retrieves all submissions for a specific assignment.
     */
    get: operations['getAssignmentSubmissions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/high-performance': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get high performance submissions
     * @description Returns submissions with scores above 85%.
     */
    get: operations['getHighPerformanceSubmissions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/average-score': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get average submission score
     * @description Returns the average score for all graded submissions of an assignment.
     */
    get: operations['getAverageScore'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/{assignmentUuid}/analytics': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get submission analytics
     * @description Returns analytics data for assignment submissions including category distribution.
     */
    get: operations['getSubmissionAnalytics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/submissions/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search assignment submissions
     * @description Search submissions across all assignments.
     *
     *     **Common Submission Search Examples:**
     *     - `assignmentUuid=uuid` - All submissions for specific assignment
     *     - `enrollmentUuid=uuid` - All submissions by specific student
     *     - `status=GRADED` - Only graded submissions
     *     - `percentage_gte=90` - Submissions with 90%+ score
     *     - `submittedAt_gte=2024-01-01T00:00:00` - Submissions from 2024
     *     - `gradedByUuid=uuid` - Submissions graded by specific instructor
     *
     */
    get: operations['searchSubmissions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search assignments
     * @description Advanced assignment search with flexible criteria and operators.
     *
     *     **Common Assignment Search Examples:**
     *     - `title_like=essay` - Assignments with "essay" in title
     *     - `lessonUuid=uuid` - Assignments for specific lesson
     *     - `status=PUBLISHED` - Only published assignments
     *     - `active=true` - Only active assignments
     *     - `dueDate_gte=2024-12-01T00:00:00` - Assignments due from Dec 1, 2024
     *     - `maxPoints_gte=50` - Assignments worth 50+ points
     *
     */
    get: operations['searchAssignments'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/assignments/instructor/{instructorUuid}/pending-grading': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    /**
     * Get pending grading
     * @description Retrieves all submissions pending grading for a specific instructor.
     */
    get: operations['getPendingGrading'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/organisations/{uuid}/invitations/{invitationUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
        invitationUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Cancel pending invitation
     * @description Cancels a pending invitation within this organization, preventing it from being accepted or declined. Only the original inviter or an organization administrator can cancel invitations. This action is irreversible and the invitation cannot be reactivated.
     */
    delete: operations['cancelInvitation'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/maintenance/cleanup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Cleanup old invitations
     * @description System maintenance endpoint to delete old invitations that are expired, declined, or cancelled. This helps maintain database cleanliness by removing old invitation records.
     */
    delete: operations['cleanupOldInvitations'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/courses/{courseUuid}/categories/{categoryUuid}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        categoryUuid: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove category from course
     * @description Removes a specific category from a course without affecting other categories.
     */
    delete: operations['removeCategoryFromCourse'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ResponseDTOVoid: {
      data?: Record<string, never>;
      /** Format: int32 */
      status?: number;
      message?: string;
      errors?: {
        [key: string]: string;
      };
      /** Format: date-time */
      timestamp?: string;
    };
    /**
     * @description Complete user profile information including personal details, authentication, and organizational data
     * @example {
     *       "uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
     *       "first_name": "Jane",
     *       "middle_name": "A.",
     *       "last_name": "Doe",
     *       "email": "jane.doe@example.com",
     *       "phone_number": "+254712345678",
     *       "profile_image_url": "https://example.com/images/jane.jpg",
     *       "dob": "1990-01-01",
     *       "username": "janedoe",
     *       "active": true,
     *       "keycloak_id": "keycloak-user-123",
     *       "created_date": "2024-04-01T12:00:00",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "created_by": "system",
     *       "updated_by": "admin",
     *       "gender": "FEMALE",
     *       "user_domain": [
     *         "Student",
     *         "Instructor"
     *       ]
     *     }
     */
    User: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.
       * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.
       * @example Jane
       */
      first_name: string;
      /**
       * @description **[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.
       * @example A.
       */
      middle_name?: string;
      /**
       * @description **[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.
       * @example Doe
       */
      last_name: string;
      /**
       * Format: email
       * @description **[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.
       * @example jane.doe@example.com
       */
      email: string;
      /**
       * @description **[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.
       * @example janedoe
       */
      username: string;
      /**
       * Format: date
       * @description **[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.
       * @example 1990-01-01
       */
      dob: string;
      /**
       * @description **[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.
       * @example +254712345678
       */
      phone_number: string;
      /**
       * @description **[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.
       * @default true
       * @example true
       */
      active: boolean;
      /**
       * @description **[OPTIONAL]** Keycloak user identifier for authentication integration. Links the user to their Keycloak identity for SSO functionality.
       * @example keycloak-user-123
       */
      keycloak_id?: string;
      /**
       * @description **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
       * @example FEMALE
       * @enum {string}
       */
      gender?: 'MALE' | 'FEMALE' | 'OTHER' | 'PREFER_NOT_TO_SAY';
      user_domain?: ('student' | 'instructor' | 'admin' | 'organisation_user')[];
      /**
       * Format: uri
       * @description **[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.
       * @example https://example.com/images/jane.jpg
       */
      readonly profile_image_url?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Identifier of the user who created this account. Automatically set by the system for audit purposes.
       * @example system
       */
      readonly created_by?: string;
      /**
       * @description **[READ-ONLY]** Identifier of the user who last updated this account. Automatically set by the system for audit purposes.
       * @example admin
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** User's display name for UI purposes, consisting of first name and last name only (excludes middle name). Automatically computed from name components.
       * @example Jane Doe
       */
      readonly display_name?: string;
      /**
       * @description **[READ-ONLY]** User's complete full name including first, middle (if present), and last names concatenated together. Automatically computed from individual name components.
       * @example Jane A. Doe
       */
      readonly full_name?: string;
    };
    ApiResponseUser: {
      success?: boolean;
      data?: components['schemas']['User'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Training branch information including location details and point of contact
     * @example {
     *       "uuid": "c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw",
     *       "organisation_uuid": "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
     *       "branch_name": "Nairobi Main Campus",
     *       "address": "123 University Way, Nairobi",
     *       "poc_user_uuid": "d1e2f3g4-h5i6-j7k8-l9m0-nopqrstuvwx",
     *       "active": true,
     *       "created_date": "2024-01-01T09:00:00",
     *       "updated_date": "2024-04-15T14:30:00"
     *     }
     */
    TrainingBranch: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the training branch. Auto-generated by the system and cannot be modified.
       * @example c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** UUID of the parent organisation this branch belongs to.
       * @example b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv
       */
      organisation_uuid: string;
      /**
       * @description **[REQUIRED]** Name of the training branch or location. Must not be blank.
       * @example Nairobi Main Campus
       */
      branch_name: string;
      /**
       * @description **[OPTIONAL]** Physical address of the training branch.
       * @example 123
       */
      address?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** UUID of the user who serves as point of contact for this branch.
       * @example d1e2f3g4-h5i6-j7k8-l9m0-nopqrstuvwx
       */
      poc_user_uuid?: string;
      /**
       * @description **[REQUIRED]** Indicates whether the training branch is active and operational.
       * @default true
       * @example true
       */
      active: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the training branch was first created. Automatically set by the system and cannot be modified.
       * @example 2024-01-01T09:00:00
       */
      readonly created_date?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the training branch was last updated. Automatically updated by the system on any changes and cannot be directly modified.
       * @example 2024-04-15T14:30:00
       */
      readonly updated_date?: string;
    };
    ApiResponseTrainingBranch: {
      success?: boolean;
      data?: components['schemas']['TrainingBranch'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Student profile information including guardian contacts and academic details. Links to a base user account.
     * @example {
     *       "uuid": "s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv",
     *       "user_uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
     *       "first_guardian_name": "John Doe",
     *       "first_guardian_mobile": "+254712345678",
     *       "second_guardian_name": "Jane Doe",
     *       "second_guardian_mobile": "+254787654321",
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com"
     *     }
     */
    Student: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.
       * @example s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.
       * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
       */
      user_uuid: string;
      /**
       * @description **[OPTIONAL]** Full name of the primary guardian/parent. This is the main emergency contact for the student.
       * @example John Doe
       */
      first_guardian_name?: string;
      /**
       * @description **[OPTIONAL]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.
       * @example +254712345678
       */
      first_guardian_mobile?: string;
      /**
       * @description **[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.
       * @example Jane Doe
       */
      second_guardian_name?: string;
      /**
       * @description **[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.
       * @example +254787654321
       */
      second_guardian_mobile?: string;
      secondaryGuardianContact?: string;
      primaryGuardianContact?: string;
      allGuardianContacts?: string[];
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
    };
    /**
     * @description Quiz assessment with configurable questions, timing, and scoring
     * @example {
     *       "uuid": "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
     *       "lesson_uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
     *       "title": "OOP Concepts Quiz",
     *       "description": "Test your understanding of object-oriented programming fundamentals",
     *       "instructions": "Answer all questions. You have 30 minutes to complete this quiz.",
     *       "time_limit_minutes": 30,
     *       "attempts_allowed": 3,
     *       "passing_score": 70,
     *       "rubric_uuid": "r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl",
     *       "status": "PUBLISHED",
     *       "active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "time_limit_display": "30 minutes",
     *       "is_timed": true,
     *       "is_published": true,
     *       "has_multiple_attempts": true
     *     }
     */
    Quiz: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the quiz. Auto-generated by the system.
       * @example q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the lesson UUID that contains this quiz.
       * @example l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl
       */
      lesson_uuid: string;
      /**
       * @description **[REQUIRED]** Quiz title that clearly describes the assessment content.
       * @example OOP Concepts Quiz
       */
      title: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the quiz purpose and content coverage.
       * @example Test your understanding of object-oriented programming fundamentals including classes, inheritance, and polymorphism
       */
      description?: string;
      /**
       * @description **[OPTIONAL]** Instructions for students on how to complete the quiz.
       * @example Answer all questions carefully. You have 30 minutes to complete this quiz. Make sure to review your answers before submitting.
       */
      instructions?: string;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Time limit for completing the quiz in minutes. Null means no time limit.
       * @example 30
       */
      time_limit_minutes?: number;
      /**
       * Format: int32
       * @description **[REQUIRED]** Number of attempts allowed for this quiz. Set to 1 for single attempt.
       * @example 3
       */
      attempts_allowed: number;
      /**
       * @description **[REQUIRED]** Minimum score percentage required to pass the quiz.
       * @example 70
       */
      passing_score: number;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.
       * @example r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl
       */
      rubric_uuid?: string;
      /**
       * @description **[REQUIRED]** Quiz publication status in the content workflow.
       * @example PUBLISHED
       * @enum {string}
       */
      status: 'DRAFT' | 'IN_REVIEW' | 'PUBLISHED' | 'ARCHIVED';
      /**
       * @description **[OPTIONAL]** Indicates if the quiz is actively available to students. Can only be true for published quizzes.
       * @example true
       */
      active?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the quiz was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this quiz. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the quiz was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this quiz. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the quiz is published and accessible to students.
       * @example true
       */
      readonly is_published?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable format of quiz time limit.
       * @example 30
       */
      readonly time_limit_display?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the quiz has a time limit.
       * @example true
       */
      readonly is_timed?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if students can take the quiz multiple times.
       * @example true
       */
      readonly has_multiple_attempts?: boolean;
    };
    ApiResponseQuiz: {
      success?: boolean;
      data?: components['schemas']['Quiz'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Individual question within a quiz supporting multiple question types
     * @example {
     *       "uuid": "q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl",
     *       "quiz_uuid": "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
     *       "question_text": "What is the main principle of object-oriented programming that allows a class to inherit properties from another class?",
     *       "question_type": "MULTIPLE_CHOICE",
     *       "points": 2,
     *       "display_order": 1,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "question_category": "Multiple Choice Question",
     *       "points_display": "2.0 points",
     *       "requires_options": true,
     *       "question_number": "Question 1"
     *     }
     */
    QuizQuestion: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the quiz question. Auto-generated by the system.
       * @example q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the quiz UUID that contains this question.
       * @example q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl
       */
      quiz_uuid: string;
      /**
       * @description **[REQUIRED]** The actual question text that students will see and answer.
       * @example What is the main principle of object-oriented programming that allows a class to inherit properties from another class?
       */
      question_text: string;
      /**
       * @description **[REQUIRED]** Type of question determining the answer format and validation.
       * @example MULTIPLE_CHOICE
       * @enum {string}
       */
      question_type: 'MULTIPLE_CHOICE' | 'TRUE_FALSE' | 'SHORT_ANSWER' | 'ESSAY';
      /**
       * @description **[REQUIRED]** Point value for this question when answered correctly.
       * @example 2
       */
      points: number;
      /**
       * Format: int32
       * @description **[REQUIRED]** Display order of the question within the quiz for sequential presentation.
       * @example 1
       */
      display_order: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the question was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this question. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the question was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this question. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this question type requires predefined answer options.
       * @example true
       */
      readonly requires_options?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable category of the question type.
       * @example Multiple Choice Question
       */
      readonly question_category?: string;
      /**
       * @description **[READ-ONLY]** Human-readable format of the points value.
       * @example 2
       */
      readonly points_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted question number for display in quiz interface.
       * @example Question 1
       */
      readonly question_number?: string;
    };
    ApiResponseQuizQuestion: {
      success?: boolean;
      data?: components['schemas']['QuizQuestion'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Individual answer option for quiz questions with correctness and ordering information
     * @example {
     *       "uuid": "o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl",
     *       "question_uuid": "q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl",
     *       "option_text": "A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.",
     *       "is_correct": true,
     *       "display_order": 2,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-03T10:15:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "option_category": "Correct Answer Option",
     *       "is_incorrect": false,
     *       "position_display": "Option 2",
     *       "correctness_status": "Correct Answer",
     *       "option_summary": "Correct answer option in position 2"
     *     }
     */
    QuizQuestionOption: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the quiz question option. Auto-generated by the system.
       * @example o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the quiz question UUID this option belongs to.
       * @example q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl
       */
      question_uuid: string;
      /**
       * @description **[REQUIRED]** Text content of the answer option displayed to students.
       * @example A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.
       */
      option_text: string;
      /**
       * @description **[OPTIONAL]** Indicates if this option is the correct answer for the question.
       * @example true
       */
      is_correct?: boolean;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Display order of this option within the question's answer choices.
       * @example 2
       */
      display_order?: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the option was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this option. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the option was last modified. Automatically updated by the system.
       * @example 2024-04-03T10:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this option. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the option based on its correctness status.
       * @example Correct Answer Option
       */
      readonly option_category?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this option is an incorrect answer choice.
       * @example false
       */
      readonly is_incorrect?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted display of the option's position within the question.
       * @example Option 2
       */
      readonly position_display?: string;
      /**
       * @description **[READ-ONLY]** Status description indicating whether this option is correct or incorrect.
       * @example Correct Answer
       */
      readonly correctness_status?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the option including correctness and position.
       * @example Correct answer option in position 2
       */
      readonly option_summary?: string;
    };
    ApiResponseQuizQuestionOption: {
      success?: boolean;
      data?: components['schemas']['QuizQuestionOption'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Program requirement with type classification and mandatory status
     * @example {
     *       "uuid": "r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl",
     *       "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
     *       "requirement_type": "STUDENT",
     *       "requirement_text": "Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.",
     *       "is_mandatory": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-05T14:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "requirement_category": "Mandatory Student Requirement",
     *       "is_optional": false,
     *       "requirement_priority": "High Priority",
     *       "compliance_level": "Mandatory Compliance",
     *       "requirement_summary": "Student requirement with mandatory compliance"
     *     }
     */
    ProgramRequirement: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the program requirement. Auto-generated by the system.
       * @example r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the program UUID this requirement applies to.
       * @example p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl
       */
      program_uuid: string;
      /**
       * @description **[REQUIRED]** Type of requirement classification for this program element.
       * @example STUDENT
       * @enum {string}
       */
      requirement_type: 'STUDENT' | 'TRAINING_CENTER' | 'INSTRUCTOR';
      /**
       * @description **[REQUIRED]** Detailed text describing the specific requirement and its criteria.
       * @example Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.
       */
      requirement_text: string;
      /**
       * @description **[OPTIONAL]** Indicates if this requirement is mandatory for program completion.
       * @example true
       */
      is_mandatory?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.
       * @example 2024-04-05T14:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the requirement is optional (not mandatory).
       * @example false
       */
      readonly is_optional?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted category of the requirement based on type and mandatory status.
       * @example Mandatory Student Requirement
       */
      readonly requirement_category?: string;
      /**
       * @description **[READ-ONLY]** Priority level of the requirement based on type and mandatory status.
       * @example High Priority
       */
      readonly requirement_priority?: string;
      /**
       * @description **[READ-ONLY]** Compliance level indicating how strictly the requirement must be followed.
       * @example Mandatory Compliance
       */
      readonly compliance_level?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the requirement including type and compliance level.
       * @example Student requirement with mandatory compliance
       */
      readonly requirement_summary?: string;
    };
    ApiResponseProgramRequirement: {
      success?: boolean;
      data?: components['schemas']['ProgramRequirement'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Association between programs and courses with sequencing and requirement information
     * @example {
     *       "uuid": "p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl",
     *       "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "sequence_order": 3,
     *       "is_required": true,
     *       "prerequisite_course_uuid": "c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl",
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-02T09:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "association_category": "Required Course",
     *       "has_prerequisites": true,
     *       "sequence_display": "Course 3 of Program",
     *       "requirement_status": "Mandatory Course",
     *       "curriculum_summary": "Required course with prerequisites in sequence position 3"
     *     }
     */
    ProgramCourse: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the program-course association. Auto-generated by the system.
       * @example p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the program UUID that contains this course.
       * @example p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl
       */
      program_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the course UUID that is part of this program.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Sequential order of this course within the program curriculum.
       * @example 3
       */
      sequence_order?: number;
      /**
       * @description **[OPTIONAL]** Indicates if this course is required for program completion.
       * @example true
       */
      is_required?: boolean;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the prerequisite course UUID that must be completed before this course.
       * @example c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl
       */
      prerequisite_course_uuid?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the program-course association was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this association. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the association was last modified. Automatically updated by the system.
       * @example 2024-04-02T09:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this association. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the course association based on requirement status.
       * @example Required Course
       */
      readonly association_category?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this course has prerequisite requirements.
       * @example true
       */
      readonly has_prerequisites?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted display of the course position within the program sequence.
       * @example Course 3 of Program
       */
      readonly sequence_display?: string;
      /**
       * @description **[READ-ONLY]** Requirement status of the course within the program.
       * @example Mandatory Course
       */
      readonly requirement_status?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the course's role within the program curriculum.
       * @example Required course with prerequisites in sequence position 3
       */
      readonly curriculum_summary?: string;
    };
    ApiResponseProgramCourse: {
      success?: boolean;
      data?: components['schemas']['ProgramCourse'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Complete organisation profile information including basic details, configuration, and metadata
     * @example {
     *       "uuid": "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
     *       "name": "Sarafrika University",
     *       "description": "Leading educational institution in Kenya",
     *       "active": true,
     *       "code": "SARU",
     *       "licence_no": "EDU-2024-001",
     *       "domain": "sarafrika.edu.ke",
     *       "user_uuid": "a1b2c3d4-e5f6-g7h8-i9j0-klmnopqrstuv",
     *       "location": "Nairobi, Kenya",
     *       "country": "Kenya",
     *       "created_date": "2024-01-01T09:00:00",
     *       "updated_date": "2024-04-15T14:30:00"
     *     }
     */
    Organisation: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the organisation. Auto-generated by the system and cannot be modified.
       * @example b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Organisation's official name. Used for display purposes and official documentation. Must not be blank.
       * @example Sarafrika University
       */
      name: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the organisation. Provides additional context about the organisation's purpose and activities.
       * @example Leading educational institution in Kenya
       */
      description?: string;
      /**
       * @description **[REQUIRED]** Indicates whether the organisation is active and can access the system. Inactive organisations cannot perform any operations.
       * @default true
       * @example true
       */
      active: boolean;
      /**
       * @description **[OPTIONAL]** Short code or abbreviation for the organisation. Used for quick identification and referencing.
       * @example SARU
       */
      code?: string;
      /**
       * @description **[OPTIONAL]** Official licence number or registration number for the organisation. Used for regulatory compliance and verification.
       * @example EDU-2024-001
       */
      licence_no?: string;
      /**
       * @description **[OPTIONAL]** Organisation's domain name. Used for email validation and system integration.
       * @example sarafrika.edu.ke
       */
      domain?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the primary contact user for this organisation.
       * @example a1b2c3d4-e5f6-g7h8-i9j0-klmnopqrstuv
       */
      user_uuid?: string;
      /**
       * @description **[OPTIONAL]** Physical location or address of the organisation.
       * @example Nairobi, Kenya
       */
      location?: string;
      /**
       * @description **[OPTIONAL]** Country where the organisation is located.
       * @example Kenya
       */
      country?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the organisation was first created. Automatically set by the system and cannot be modified.
       * @example 2024-01-01T09:00:00
       */
      readonly created_date?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the organisation was last updated. Automatically updated by the system on any changes and cannot be directly modified.
       * @example 2024-04-15T14:30:00
       */
      readonly updated_date?: string;
    };
    ApiResponseOrganisation: {
      success?: boolean;
      data?: components['schemas']['Organisation'];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseVoid: {
      success?: boolean;
      data?: Record<string, never>;
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Instructor profile including location data for educational service delivery
     * @example {
     *       "uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "user_uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
     *       "full_name": "Dr. Jane Smith",
     *       "latitude": -1.2921,
     *       "longitude": 36.8219,
     *       "website": "https://drjanesmith.com",
     *       "bio": "Experienced educator with 10+ years in software development training and mentorship.",
     *       "professional_headline": "Senior Software Development Instructor & Tech Consultant",
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "has_location_coordinates": true,
     *       "formatted_location": "-1.292100, 36.821900",
     *       "is_profile_complete": true
     *     }
     */
    Instructor: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.
       * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
       */
      user_uuid: string;
      /**
       * @description **[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
       * @example -1.2921
       */
      latitude?: number;
      /**
       * @description **[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
       * @example 36.8219
       */
      longitude?: number;
      /**
       * Format: uri
       * @description **[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.
       * @example https://drjanesmith.com
       */
      website?: string;
      /**
       * @description **[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.
       * @example Experienced educator with 10+ years in software development training and mentorship. Specializes in full-stack development, cloud architecture, and agile methodologies.
       */
      bio?: string;
      /**
       * @description **[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.
       * @example Senior Software Development Instructor & Tech Consultant
       */
      professional_headline?: string;
      /**
       * @description **[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.
       * @example Dr. Jane Smith
       */
      readonly full_name?: string;
      /**
       * @description **[READ-ONLY]** Indicates whether the instructor has been verified by an administrator. True if verified, false if not verified, null if verification status is unknown or pending.
       * @example true
       */
      readonly admin_verified?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the instructor has both latitude and longitude coordinates configured.
       * @example true
       */
      readonly has_location_coordinates?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted location coordinates as a string. Returns null if location coordinates are not available.
       * @example -1.292100, 36.821900
       */
      readonly formatted_location?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the instructor profile is considered complete. Requires bio and professional headline.
       * @example true
       */
      readonly is_profile_complete?: boolean;
    };
    /**
     * @description Technical and professional skill record for instructors with proficiency levels and competency classifications
     * @example {
     *       "uuid": "skill123-4567-89ab-cdef-0123456789ab",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "skill_name": "Java Programming",
     *       "proficiency_level": "EXPERT",
     *       "created_date": "2024-06-15T14:30:22",
     *       "created_by": "instructor@example.com",
     *       "updated_date": "2024-06-16T09:15:00",
     *       "updated_by": "instructor@example.com",
     *       "skill_category": "PROGRAMMING_LANGUAGE",
     *       "proficiency_description": "Expert level with 7+ years of experience",
     *       "proficiency_percentage": 95,
     *       "is_core_skill": true,
     *       "is_teaching_qualified": true,
     *       "skill_level_numeric": 4,
     *       "certification_recommended": false,
     *       "market_demand": "HIGH"
     *     }
     */
    InstructorSkill: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the skill record. Auto-generated by the system.
       * @example skill123-4567-89ab-cdef-0123456789ab
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor profile UUID. Links skill record to specific instructor.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * @description **[REQUIRED]** Name of the technical or professional skill. Should be specific and standardized for consistency.
       * @example Java Programming
       */
      skill_name: string;
      /**
       * @description **[REQUIRED]** Level of proficiency in this skill. Indicates instructor's competency and teaching capability.
       * @example EXPERT
       * @enum {string}
       */
      proficiency_level: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the skill record was first created. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this skill record.
       * @example instructor@example.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the skill record was last modified. Automatically updated by the system.
       * @example 2024-06-16T09:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this skill record.
       * @example instructor@example.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted skill name for display in UI components.
       * @example Java Programming (Expert)
       */
      readonly display_name?: string;
      /**
       * @description **[READ-ONLY]** Brief summary of the skill for display in skill lists.
       * @example Java Programming - Expert level, High market demand, Teaching qualified
       */
      readonly summary?: string;
      /**
       * @description **[READ-ONLY]** Human-readable description of the proficiency level.
       * @example Expert level with 7+ years of experience
       */
      readonly proficiency_description?: string;
    };
    ApiResponseInstructorSkill: {
      success?: boolean;
      data?: components['schemas']['InstructorSkill'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Professional membership record for instructors including associations, industry bodies, and certification organizations
     * @example {
     *       "uuid": "mem12345-6789-abcd-ef01-234567890abc",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "organization_name": "Institute of Electrical and Electronics Engineers (IEEE)",
     *       "membership_number": "IEEE-92345678",
     *       "start_date": "2020-03-15",
     *       "end_date": null,
     *       "is_active": true,
     *       "created_date": "2024-06-15T14:30:22",
     *       "created_by": "instructor@example.com",
     *       "updated_date": "2024-06-16T09:15:00",
     *       "updated_by": "instructor@example.com",
     *       "membership_duration_months": 51,
     *       "formatted_duration": "4 years, 3 months",
     *       "membership_period": "Mar 2020 - Present",
     *       "is_long_standing_member": true,
     *       "has_membership_number": true,
     *       "membership_status": "ACTIVE",
     *       "organization_type": "PROFESSIONAL_INSTITUTE",
     *       "years_of_membership": 4.25,
     *       "is_recent_membership": true
     *     }
     */
    InstructorProfessionalMembership: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the membership record. Auto-generated by the system.
       * @example mem12345-6789-abcd-ef01-234567890abc
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor profile UUID. Links membership record to specific instructor.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * @description **[REQUIRED]** Full name of the professional organization, association, or certification body.
       * @example Institute of Electrical and Electronics Engineers (IEEE)
       */
      organization_name: string;
      /**
       * @description **[OPTIONAL]** Official membership number or identifier issued by the organization.
       * @example IEEE-92345678
       */
      membership_number?: string;
      /**
       * Format: date
       * @description **[OPTIONAL]** Date when the membership began or was first obtained.
       * @example 2020-03-15
       */
      start_date?: string;
      /**
       * Format: date
       * @description **[OPTIONAL]** Date when the membership ended or expired. Should be null for active memberships.
       * @example null
       */
      end_date?: string;
      /**
       * @description **[OPTIONAL]** Indicates whether the membership is currently active. True for active memberships, false for inactive or expired.
       * @example true
       */
      is_active?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the membership record was first created. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this membership record.
       * @example instructor@example.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the membership record was last modified. Automatically updated by the system.
       * @example 2024-06-16T09:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this membership record.
       * @example instructor@example.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the membership is currently valid and active.
       * @example true
       */
      readonly is_valid?: boolean;
      /**
       * @description **[READ-ONLY]** Brief summary of the membership for display in listings.
       * @example IEEE Member (4 years, 3 months) - Active
       */
      readonly summary?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the membership record has all essential information.
       * @example true
       */
      readonly is_complete?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable formatted duration of membership.
       * @example 4
       */
      readonly formatted_duration?: string;
      /**
       * @description **[READ-ONLY]** Current status of the membership.
       * @example ACTIVE
       * @enum {string}
       */
      readonly membership_status?: 'ACTIVE' | 'INACTIVE' | 'EXPIRED' | 'UNKNOWN';
      /**
       * @description **[READ-ONLY]** Formatted membership period showing start and end dates.
       * @example Mar 2020 - Present
       */
      readonly membership_period?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this membership has been held for 5 years or more.
       * @example true
       */
      readonly is_long_standing_member?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the membership has a membership number documented.
       * @example true
       */
      readonly has_membership_number?: boolean;
      /**
       * @description **[READ-ONLY]** Classification of organization type based on name keywords.
       * @example PROFESSIONAL_INSTITUTE
       * @enum {string}
       */
      readonly organization_type?:
        | 'PROFESSIONAL_INSTITUTE'
        | 'CERTIFICATION_BODY'
        | 'INDUSTRY_ASSOCIATION'
        | 'ACADEMIC_SOCIETY'
        | 'TRADE_ORGANIZATION'
        | 'OTHER';
      /**
       * Format: double
       * @description **[READ-ONLY]** Years of membership calculated with decimal precision.
       * @example 4.25
       */
      readonly years_of_membership?: number;
      /**
       * @description **[READ-ONLY]** Indicates if this membership was started within the last 3 years.
       * @example true
       */
      readonly is_recent_membership?: boolean;
      /**
       * Format: int32
       * @description **[READ-ONLY]** Duration of membership calculated from start and end dates, in months.
       * @example 51
       */
      readonly membership_duration_months?: number;
    };
    ApiResponseInstructorProfessionalMembership: {
      success?: boolean;
      data?: components['schemas']['InstructorProfessionalMembership'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Professional work experience record for instructors including positions, organizations, responsibilities, and employment duration
     * @example {
     *       "uuid": "exp12345-6789-abcd-ef01-234567890abc",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "position": "Senior Software Developer",
     *       "organization_name": "Safaricom PLC",
     *       "responsibilities": "Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.",
     *       "years_of_experience": 5.5,
     *       "start_date": "2019-01-15",
     *       "end_date": "2024-06-30",
     *       "is_current_position": false,
     *       "created_date": "2024-06-15T14:30:22",
     *       "created_by": "instructor@example.com",
     *       "updated_date": "2024-06-16T09:15:00",
     *       "updated_by": "instructor@example.com",
     *       "duration_in_months": 66,
     *       "formatted_duration": "5 years, 5 months",
     *       "employment_period": "Jan 2019 - Jun 2024",
     *       "is_long_term_position": true,
     *       "has_responsibilities": true,
     *       "experience_level": "SENIOR",
     *       "is_recent_experience": true,
     *       "calculated_years": 5.46
     *     }
     */
    InstructorExperience: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the experience record. Auto-generated by the system.
       * @example exp12345-6789-abcd-ef01-234567890abc
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor profile UUID. Links experience record to specific instructor.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * @description **[REQUIRED]** Job title or position held by the instructor in this role.
       * @example Senior Software Developer
       */
      position: string;
      /**
       * @description **[REQUIRED]** Name of the organization, company, or institution where the instructor worked.
       * @example Safaricom PLC
       */
      organization_name: string;
      /**
       * @description **[OPTIONAL]** Detailed description of key responsibilities, achievements, and duties performed in this position.
       * @example Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.
       */
      responsibilities?: string;
      /**
       * @description **[OPTIONAL]** Total years of experience in this position, including fractional years for more precise representation.
       * @example 5.5
       */
      years_of_experience?: number;
      /**
       * Format: date
       * @description **[OPTIONAL]** Date when employment in this position began.
       * @example 2019-01-15
       */
      start_date?: string;
      /**
       * Format: date
       * @description **[OPTIONAL]** Date when employment in this position ended. Should be null for current positions.
       * @example 2024-06-30
       */
      end_date?: string;
      /**
       * @description **[OPTIONAL]** Indicates whether this is the instructor's current position. True for ongoing employment.
       * @example false
       */
      is_current_position?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the experience record was first created. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this experience record.
       * @example instructor@example.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the experience record was last modified. Automatically updated by the system.
       * @example 2024-06-16T09:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this experience record.
       * @example instructor@example.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Brief summary of the experience for display in listings.
       * @example Senior Software Developer at Safaricom PLC (5 years, 5 months)
       */
      readonly summary?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the experience record has all essential information.
       * @example true
       */
      readonly is_complete?: boolean;
      /**
       * Format: int32
       * @description **[READ-ONLY]** Duration of employment calculated from start and end dates, in months.
       * @example 66
       */
      readonly duration_in_months?: number;
      /**
       * @description **[READ-ONLY]** Human-readable formatted duration of employment.
       * @example 5
       */
      readonly formatted_duration?: string;
      /**
       * @description **[READ-ONLY]** Formatted employment period showing start and end dates.
       * @example Jan 2019 - Jun 2024
       */
      readonly employment_period?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this position was held for 2 years or more.
       * @example true
       */
      readonly is_long_term_position?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the position has responsibilities documented.
       * @example true
       */
      readonly has_responsibilities?: boolean;
      /**
       * @description **[READ-ONLY]** Classification of experience level based on position title and duration.
       * @example SENIOR
       * @enum {string}
       */
      readonly experience_level?: 'ENTRY' | 'JUNIOR' | 'MID' | 'SENIOR' | 'LEAD' | 'EXECUTIVE';
      /**
       * @description **[READ-ONLY]** Indicates if this experience is recent (within the last 5 years).
       * @example true
       */
      readonly is_recent_experience?: boolean;
      /**
       * Format: double
       * @description **[READ-ONLY]** Calculated years of experience based on start and end dates.
       * @example 5.46
       */
      readonly calculated_years?: number;
    };
    ApiResponseInstructorExperience: {
      success?: boolean;
      data?: components['schemas']['InstructorExperience'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Educational qualification record for instructors including degrees, diplomas, certificates, and academic credentials
     * @example {
     *       "uuid": "edu12345-6789-abcd-ef01-234567890abc",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "qualification": "Master of Science in Computer Science",
     *       "school_name": "University of Nairobi",
     *       "year_completed": 2020,
     *       "certificate_number": "MSC/CS/2020/0456",
     *       "created_date": "2024-06-15T14:30:22",
     *       "created_by": "instructor@example.com",
     *       "updated_date": "2024-06-16T09:15:00",
     *       "updated_by": "instructor@example.com",
     *       "is_recent_qualification": true,
     *       "years_since_completion": 4,
     *       "education_level": "POSTGRADUATE",
     *       "has_certificate_number": true,
     *       "formatted_completion": "2020 - University of Nairobi"
     *     }
     */
    InstructorEducation: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the education record. Auto-generated by the system.
       * @example edu12345-6789-abcd-ef01-234567890abc
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor profile UUID. Links education record to specific instructor.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * @description **[REQUIRED]** Name or title of the academic qualification, degree, diploma, or certificate obtained.
       * @example Master of Science in Computer Science
       */
      qualification: string;
      /**
       * @description **[REQUIRED]** Full name of the educational institution, university, college, or training organization.
       * @example University of Nairobi
       */
      school_name: string;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Year when the qualification was completed or awarded. Must be a valid year not in the future.
       * @example 2020
       */
      year_completed?: number;
      /**
       * @description **[OPTIONAL]** Official certificate, diploma, or degree number issued by the educational institution.
       * @example MSC/CS/2020/0456
       */
      certificate_number?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the education record was first created. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this education record.
       * @example instructor@example.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the education record was last modified. Automatically updated by the system.
       * @example 2024-06-16T09:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this education record.
       * @example instructor@example.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Complete description combining qualification, school, and year.
       * @example Master of Science in Computer Science from University of Nairobi (2020)
       */
      readonly full_description?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the education record has all essential information.
       * @example true
       */
      readonly is_complete?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if this qualification was completed within the last 10 years.
       * @example true
       */
      readonly is_recent_qualification?: boolean;
      /**
       * Format: int32
       * @description **[READ-ONLY]** Number of years since the qualification was completed.
       * @example 4
       */
      readonly years_since_completion?: number;
      /**
       * @description **[READ-ONLY]** Classification of education level based on qualification type.
       * @example POSTGRADUATE
       * @enum {string}
       */
      readonly education_level?:
        | 'CERTIFICATE'
        | 'DIPLOMA'
        | 'UNDERGRADUATE'
        | 'POSTGRADUATE'
        | 'DOCTORAL'
        | 'OTHER';
      /**
       * @description **[READ-ONLY]** Indicates if the education record has a certificate number provided.
       * @example true
       */
      readonly has_certificate_number?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted string showing year of completion and school name.
       * @example 2020
       */
      readonly formatted_completion?: string;
    };
    ApiResponseInstructorEducation: {
      success?: boolean;
      data?: components['schemas']['InstructorEducation'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Document record for instructor credential verification including educational certificates, experience documents, and professional memberships
     * @example {
     *       "uuid": "doc12345-6789-abcd-ef01-234567890abc",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "document_type_uuid": "dt123456-7890-abcd-ef01-234567890abc",
     *       "education_uuid": "edu12345-6789-abcd-ef01-234567890abc",
     *       "experience_uuid": null,
     *       "membership_uuid": null,
     *       "original_filename": "AWS_Solutions_Architect_Certificate.pdf",
     *       "stored_filename": "instructor_doc_20240615_143022_abc123.pdf",
     *       "file_path": "/documents/instructors/2024/06/instructor_doc_20240615_143022_abc123.pdf",
     *       "file_size_bytes": 2048576,
     *       "mime_type": "application/pdf",
     *       "file_hash": "sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6",
     *       "title": "AWS Certified Solutions Architect - Professional Certificate",
     *       "description": "Professional certification in cloud architecture and solutions design",
     *       "upload_date": "2024-06-15T14:30:22",
     *       "is_verified": true,
     *       "verified_by": "admin@sarafrika.com",
     *       "verified_at": "2024-06-16T09:15:00",
     *       "verification_notes": "Certificate verified against AWS official database",
     *       "status": "APPROVED",
     *       "expiry_date": "2027-06-15",
     *       "created_date": "2024-06-15T14:30:22",
     *       "created_by": "instructor@example.com",
     *       "updated_date": "2024-06-16T09:15:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "file_size_formatted": "2.0 MB",
     *       "is_expired": false,
     *       "days_until_expiry": 1095,
     *       "is_pending_verification": false,
     *       "has_expiry_date": true,
     *       "verification_status": "VERIFIED"
     *     }
     */
    InstructorDocument: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the document record. Auto-generated by the system.
       * @example doc12345-6789-abcd-ef01-234567890abc
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor profile UUID. Links document to specific instructor.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the document type UUID. Defines the category and validation rules for this document.
       * @example dt123456-7890-abcd-ef01-234567890abc
       */
      document_type_uuid: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to specific education record UUID if this document supports an educational qualification.
       * @example edu12345-6789-abcd-ef01-234567890abc
       */
      education_uuid?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to specific experience record UUID if this document supports work experience.
       * @example exp12345-6789-abcd-ef01-234567890abc
       */
      experience_uuid?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to specific membership record UUID if this document supports professional body membership.
       * @example mem12345-6789-abcd-ef01-234567890abc
       */
      membership_uuid?: string;
      /**
       * @description **[REQUIRED]** Original filename as uploaded by the user. Preserved for user reference and display purposes.
       * @example AWS_Solutions_Architect_Certificate.pdf
       */
      original_filename: string;
      /**
       * @description **[REQUIRED]** Descriptive title for the document. Used for identification and display in document lists.
       * @example AWS Certified Solutions Architect - Professional Certificate
       */
      title: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the document content and its relevance to instructor qualifications.
       * @example Professional certification in cloud architecture and solutions design, demonstrating expertise in AWS services and best practices.
       */
      description?: string;
      /**
       * @description **[READ-ONLY]** Current status of the document in the verification workflow.
       * @example APPROVED
       * @enum {string}
       */
      readonly status?: 'PENDING' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'UNDER_REVIEW';
      /**
       * Format: date
       * @description **[OPTIONAL]** Expiry date of the document if applicable. Used for certificates and time-limited credentials.
       * @example 2027-06-15
       */
      expiry_date?: string;
      /**
       * @description **[READ-ONLY]** System-generated filename for secure storage. Used internally for file system operations.
       * @example instructor_doc_20240615_143022_abc123.pdf
       */
      readonly stored_filename?: string;
      /**
       * @description **[READ-ONLY]** Full file system path where the document is stored. Used for internal file operations.
       * @example /documents/instructors/2024/06/instructor_doc_20240615_143022_abc123.pdf
       */
      readonly file_path?: string;
      /**
       * Format: int64
       * @description **[READ-ONLY]** File size in bytes. Automatically calculated during upload.
       * @example 2048576
       */
      readonly file_size_bytes?: number;
      /**
       * @description **[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.
       * @example application/pdf
       */
      readonly mime_type?: string;
      /**
       * @description **[READ-ONLY]** SHA-256 hash of the file content. Used for integrity verification and duplicate detection.
       * @example sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
       */
      readonly file_hash?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the document was uploaded. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly upload_date?: string;
      /**
       * @description **[READ-ONLY]** Verification status of the document. True if verified by admin, false if not verified, null if pending.
       * @example true
       */
      readonly is_verified?: boolean;
      /**
       * @description **[READ-ONLY]** Email or username of the administrator who verified this document.
       * @example admin@sarafrika.com
       */
      readonly verified_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the document was verified. Set automatically when verification is completed.
       * @example 2024-06-16T09:15:00
       */
      readonly verified_at?: string;
      /**
       * @description **[READ-ONLY]** Notes or comments from the verification process. Includes details about verification outcome.
       * @example Certificate verified against AWS official database. Valid credential confirmed.
       */
      readonly verification_notes?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the document record was first created. Automatically set by the system.
       * @example 2024-06-15T14:30:22
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this document record.
       * @example instructor@example.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the document record was last modified. Automatically updated by the system.
       * @example 2024-06-16T09:15:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this document record.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the document has expired based on the expiry date.
       * @example false
       */
      readonly is_expired?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable formatted file size.
       * @example 2
       */
      readonly file_size_formatted?: string;
      /**
       * Format: int32
       * @description **[READ-ONLY]** Number of days until document expiry. Returns null if no expiry date or already expired.
       * @example 1095
       */
      readonly days_until_expiry?: number;
      /**
       * @description **[READ-ONLY]** Indicates if the document is pending verification.
       * @example false
       */
      readonly is_pending_verification?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the document has an expiry date configured.
       * @example true
       */
      readonly has_expiry_date?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable verification status of the document.
       * @example VERIFIED
       * @enum {string}
       */
      readonly verification_status?: 'VERIFIED' | 'PENDING' | 'REJECTED';
    };
    ApiResponseInstructorDocument: {
      success?: boolean;
      data?: components['schemas']['InstructorDocument'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Complete course with metadata, content organization, and publication status supporting multiple categories
     * @example {
     *       "uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "name": "Advanced Java Programming",
     *       "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
     *       "category_uuids": [
     *         "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
     *         "p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl"
     *       ],
     *       "difficulty_uuid": "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
     *       "description": "Comprehensive course covering advanced Java concepts and enterprise development",
     *       "objectives": "Master advanced Java features, design patterns, and enterprise frameworks",
     *       "prerequisites": "Basic Java knowledge and OOP concepts",
     *       "duration_hours": 40,
     *       "duration_minutes": 30,
     *       "class_limit": 25,
     *       "price": 299.99,
     *       "age_lower_limit": 18,
     *       "age_upper_limit": 65,
     *       "thumbnail_url": "https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg",
     *       "intro_video_url": "https://cdn.sarafrika.com/courses/java-advanced-intro.mp4",
     *       "banner_url": "https://cdn.sarafrika.com/courses/java-advanced-banner.jpg",
     *       "status": "PUBLISHED",
     *       "active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "category_names": [
     *         "Programming",
     *         "Advanced Java"
     *       ],
     *       "total_duration_display": "40 hours 30 minutes",
     *       "is_free": false,
     *       "is_published": true,
     *       "is_draft": false
     *     }
     */
    Course: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the course. Auto-generated by the system.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Course title. Should be descriptive and engaging for potential students.
       * @example Advanced Java Programming
       */
      name: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the instructor's UUID who created and owns this course.
       * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
       */
      instructor_uuid: string;
      /**
       * @description **[OPTIONAL]** List of category UUIDs for organizing the course. A course can belong to multiple categories.
       * @example [
       *       "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
       *       "p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl"
       *     ]
       */
      category_uuids?: string[];
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the difficulty level UUID indicating course complexity.
       * @example d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl
       */
      difficulty_uuid?: string;
      /**
       * @description **[OPTIONAL]** Detailed course description explaining content, approach, and outcomes.
       * @example Comprehensive course covering advanced Java concepts including concurrency, design patterns, and enterprise development frameworks
       */
      description?: string;
      /**
       * @description **[OPTIONAL]** Learning objectives and goals students will achieve upon completion.
       * @example Master advanced Java features, understand design patterns, implement enterprise solutions
       */
      objectives?: string;
      /**
       * @description **[OPTIONAL]** Required knowledge and skills students should have before taking this course.
       * @example Basic Java knowledge, understanding of OOP concepts, familiarity with development tools
       */
      prerequisites?: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Course duration in hours.
       * @example 40
       */
      duration_hours: number;
      /**
       * Format: int32
       * @description **[REQUIRED]** Additional course duration in minutes (0-59).
       * @example 30
       */
      duration_minutes: number;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Maximum number of students that can enroll in the course.
       * @example 25
       */
      class_limit?: number;
      /**
       * @description **[OPTIONAL]** Course price in the system currency. Set to null or 0 for free courses.
       * @example 299.99
       */
      price?: number;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Minimum age requirement for course enrollment.
       * @example 18
       */
      age_lower_limit?: number;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Maximum age requirement for course enrollment.
       * @example 65
       */
      age_upper_limit?: number;
      /**
       * Format: uri
       * @description **[OPTIONAL]** URL to course thumbnail image for course listings and previews.
       * @example https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg
       */
      thumbnail_url?: string;
      /**
       * Format: uri
       * @description **[OPTIONAL]** URL to course introduction video for marketing and preview purposes.
       * @example https://cdn.sarafrika.com/courses/java-advanced-intro.mp4
       */
      intro_video_url?: string;
      /**
       * Format: uri
       * @description **[OPTIONAL]** URL to course banner image for detailed course pages.
       * @example https://cdn.sarafrika.com/courses/java-advanced-banner.jpg
       */
      banner_url?: string;
      /**
       * @description **[REQUIRED]** Course publication status in the content workflow.
       * @example published
       * @enum {string}
       */
      status: 'draft' | 'in_review' | 'published' | 'archived';
      /**
       * @description **[OPTIONAL]** Indicates if the course is actively available to students. Can only be true for published courses.
       * @example true
       */
      active?: boolean;
      /**
       * @description **[READ-ONLY]** List of category names this course belongs to. Computed from category mappings.
       * @example [
       *       "Programming",
       *       "Advanced Java"
       *     ]
       */
      readonly category_names?: string[];
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the course was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this course. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the course was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this course. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the course is offered for free.
       * @example false
       */
      readonly is_free?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the course is published and discoverable.
       * @example true
       */
      readonly is_published?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the course is archived and no longer available.
       * @example false
       */
      readonly is_archived?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the course is currently under review.
       * @example false
       */
      readonly is_in_review?: boolean;
      /**
       * @description **[READ-ONLY]** Indicates if the course is still in draft mode.
       * @example false
       */
      readonly is_draft?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable format of total course duration.
       * @example 40
       */
      readonly total_duration_display?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the course belongs to multiple categories.
       * @example true
       */
      readonly has_multiple_categories?: boolean;
      /**
       * Format: int32
       * @description **[READ-ONLY]** Number of categories this course belongs to.
       * @example 2
       */
      readonly category_count?: number;
      /**
       * @description **[READ-ONLY]** Human-readable description of the course's current lifecycle stage.
       * @example Published and Active
       */
      readonly lifecycle_stage?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the course is currently accepting new student enrollments.
       * @example true
       */
      readonly accepts_new_enrollments?: boolean;
    };
    ApiResponseCourse: {
      success?: boolean;
      data?: components['schemas']['Course'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Course prerequisites and participation requirements
     * @example {
     *       "uuid": "r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "requirement_type": "STUDENT",
     *       "requirement_text": "Basic knowledge of Java programming and object-oriented concepts",
     *       "is_mandatory": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "requirement_category": "Student Prerequisite",
     *       "is_technical_requirement": true,
     *       "priority_level": "High"
     *     }
     */
    CourseRequirement: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the course requirement. Auto-generated by the system.
       * @example r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the course UUID that this requirement applies to.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * @description **[REQUIRED]** Type of requirement specifying who or what this applies to.
       * @example STUDENT
       * @enum {string}
       */
      requirement_type: 'STUDENT' | 'TRAINING_CENTER' | 'INSTRUCTOR';
      /**
       * @description **[REQUIRED]** Detailed description of the specific requirement or prerequisite.
       * @example Basic knowledge of Java programming and object-oriented concepts including classes, inheritance, and polymorphism
       */
      requirement_text: string;
      /**
       * @description **[OPTIONAL]** Indicates if this requirement is mandatory or optional for course participation.
       * @example true
       */
      is_mandatory?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
    };
    ApiResponseCourseRequirement: {
      success?: boolean;
      data?: components['schemas']['CourseRequirement'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Individual lesson within a course containing structured learning content
     * @example {
     *       "uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "lesson_number": 3,
     *       "title": "Object-Oriented Programming Fundamentals",
     *       "duration_hours": 2,
     *       "duration_minutes": 30,
     *       "description": "Introduction to OOP concepts including classes, objects, inheritance, and polymorphism",
     *       "learning_objectives": "Understand OOP principles, implement classes and objects, apply inheritance concepts",
     *       "status": "PUBLISHED",
     *       "active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "duration_display": "2 hours 30 minutes",
     *       "is_published": true,
     *       "lesson_sequence": "Lesson 3"
     *     }
     */
    Lesson: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the lesson. Auto-generated by the system.
       * @example l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the parent course UUID that contains this lesson.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Sequential number of the lesson within the course. Must be unique per course.
       * @example 3
       */
      lesson_number: number;
      /**
       * @description **[REQUIRED]** Descriptive title of the lesson that clearly indicates the learning content.
       * @example Object-Oriented Programming Fundamentals
       */
      title: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Estimated lesson duration in hours.
       * @example 2
       */
      duration_hours: number;
      /**
       * Format: int32
       * @description **[REQUIRED]** Additional lesson duration in minutes (0-59).
       * @example 30
       */
      duration_minutes: number;
      /**
       * @description **[OPTIONAL]** Detailed description of the lesson content and what students will learn.
       * @example Introduction to Object-Oriented Programming concepts including classes, objects, inheritance, and polymorphism with practical examples
       */
      description?: string;
      /**
       * @description **[OPTIONAL]** Specific learning objectives and outcomes for this lesson.
       * @example Understand OOP principles, implement classes and objects, apply inheritance concepts in practical scenarios
       */
      learning_objectives?: string;
      /**
       * @description **[REQUIRED]** Lesson publication status in the content workflow.
       * @example PUBLISHED
       * @enum {string}
       */
      status: 'DRAFT' | 'IN_REVIEW' | 'PUBLISHED' | 'ARCHIVED';
      /**
       * @description **[OPTIONAL]** Indicates if the lesson is actively available to students. Can only be true for published lessons.
       * @example true
       */
      active?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the lesson was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this lesson. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the lesson was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this lesson. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the lesson is published and accessible to students.
       * @example true
       */
      readonly is_published?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable format of lesson duration.
       * @example 2
       */
      readonly duration_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted lesson sequence for display purposes.
       * @example Lesson 3
       */
      readonly lesson_sequence?: string;
    };
    ApiResponseLesson: {
      success?: boolean;
      data?: components['schemas']['Lesson'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Individual content item within a lesson supporting various media types
     * @example {
     *       "uuid": "l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl",
     *       "lesson_uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
     *       "content_type_uuid": "c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl",
     *       "title": "Introduction to Classes and Objects",
     *       "description": "Comprehensive video explanation of OOP fundamentals with examples",
     *       "content_text": null,
     *       "file_url": "https://cdn.sarafrika.com/lessons/oop-intro.mp4",
     *       "file_size_bytes": 157286400,
     *       "mime_type": "video/mp4",
     *       "display_order": 1,
     *       "is_required": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "file_size_display": "150 MB",
     *       "content_category": "Video Content",
     *       "is_downloadable": true,
     *       "estimated_duration": "15 minutes"
     *     }
     */
    LessonContent: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the lesson content. Auto-generated by the system.
       * @example l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the lesson UUID that contains this content.
       * @example l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl
       */
      lesson_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the content type UUID defining the format and restrictions.
       * @example c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl
       */
      content_type_uuid: string;
      /**
       * @description **[REQUIRED]** Descriptive title of the content item for student navigation.
       * @example Introduction to Classes and Objects
       */
      title: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the content and its learning purpose.
       * @example Comprehensive video explanation of object-oriented programming fundamentals with practical examples and code demonstrations
       */
      description?: string;
      /**
       * @description **[OPTIONAL]** Text content for text-based content types. Null for file-based content.
       * @example null
       */
      content_text?: string;
      /**
       * Format: uri
       * @description **[OPTIONAL]** URL to the uploaded content file. Null for text-based content.
       * @example https://cdn.sarafrika.com/lessons/oop-intro.mp4
       */
      file_url?: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Display order of content within the lesson for sequential presentation.
       * @example 1
       */
      display_order: number;
      /**
       * @description **[OPTIONAL]** Indicates if this content is required for lesson completion.
       * @example true
       */
      is_required?: boolean;
      /**
       * Format: int64
       * @description **[READ-ONLY]** Size of the uploaded file in bytes. Null for text content.
       * @example 157286400
       */
      readonly file_size_bytes?: number;
      /**
       * @description **[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.
       * @example video/mp4
       */
      readonly mime_type?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the content was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this content. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the content was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this content. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Category of content based on its type and format.
       * @example Video Content
       */
      readonly content_category?: string;
      /**
       * @description **[READ-ONLY]** Human-readable format of file size.
       * @example 150
       */
      readonly file_size_display?: string;
    };
    ApiResponseLessonContent: {
      success?: boolean;
      data?: components['schemas']['LessonContent'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Course-level assessment component with weighting for final grade calculation
     * @example {
     *       "uuid": "c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "assessment_type": "Attendance",
     *       "title": "Class Attendance and Participation",
     *       "description": "Regular attendance and active participation in class discussions and activities",
     *       "weight_percentage": 20,
     *       "rubric_uuid": "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
     *       "is_required": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "assessment_category": "Participation Component",
     *       "weight_display": "20% of final grade",
     *       "is_major_assessment": false,
     *       "contribution_level": "Standard Contribution"
     *     }
     */
    CourseAssessment: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the course assessment. Auto-generated by the system.
       * @example c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the course UUID that this assessment belongs to.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * @description **[REQUIRED]** Type of assessment component for categorization and processing.
       * @example Attendance
       */
      assessment_type: string;
      /**
       * @description **[REQUIRED]** Title of the assessment component that clearly describes its purpose.
       * @example Class Attendance and Participation
       */
      title: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the assessment criteria and expectations.
       * @example Regular attendance and active participation in class discussions, group activities, and collaborative learning sessions
       */
      description?: string;
      /**
       * @description **[REQUIRED]** Percentage weight of this assessment in the final grade calculation.
       * @example 20
       */
      weight_percentage: number;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.
       * @example a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl
       */
      rubric_uuid?: string;
      /**
       * @description **[OPTIONAL]** Indicates if this assessment is required for course completion.
       * @example true
       */
      is_required?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the assessment was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this assessment. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the assessment was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this assessment. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Category classification of the assessment type.
       * @example Participation Component
       */
      readonly assessment_category?: string;
      /**
       * @description **[READ-ONLY]** Human-readable format of the weight percentage.
       * @example 20% of final grade
       */
      readonly weight_display?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this is a major assessment component.
       * @example false
       */
      readonly is_major_assessment?: boolean;
      /**
       * @description **[READ-ONLY]** Level of contribution to final grade based on weight.
       * @example Standard Contribution
       */
      readonly contribution_level?: string;
    };
    ApiResponseCourseAssessment: {
      success?: boolean;
      data?: components['schemas']['CourseAssessment'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Grading scale level with points and ordering for assessments
     * @example {
     *       "uuid": "g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl",
     *       "name": "Distinction",
     *       "points": 5,
     *       "level_order": 1,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "system",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "grade_display": "Level 1: Distinction (5 points)",
     *       "is_passing_grade": true,
     *       "grade_category": "Excellent",
     *       "percentage_range": "90-100%"
     *     }
     */
    GradingLevel: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the grading level. Auto-generated by the system.
       * @example g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Name of the grading level. Must be unique across all grading levels.
       * @example Distinction
       */
      name: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Point value assigned to this grading level for scoring calculations.
       * @example 5
       */
      points: number;
      /**
       * Format: int32
       * @description **[REQUIRED]** Numeric order defining the grade hierarchy. Lower numbers indicate higher grades.
       * @example 1
       */
      level_order: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the grading level was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this grading level. Used for audit trails.
       * @example system
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the grading level was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this grading level. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted display of grade level with complete information.
       * @example Level 1: Distinction (5 points)
       */
      readonly grade_display?: string;
    };
    ApiResponseGradingLevel: {
      success?: boolean;
      data?: components['schemas']['GradingLevel'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Course difficulty level defining learning progression stages
     * @example {
     *       "uuid": "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
     *       "name": "Intermediate",
     *       "level_order": 3,
     *       "description": "For learners with basic knowledge seeking to develop intermediate skills",
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "system",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "display_name": "Level 3: Intermediate",
     *       "is_entry_level": false
     *     }
     */
    DifficultyLevel: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the difficulty level. Auto-generated by the system.
       * @example d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Name of the difficulty level. Must be unique across all difficulty levels.
       * @example Intermediate
       */
      name: string;
      /**
       * Format: int32
       * @description **[REQUIRED]** Numeric order defining the progression sequence. Lower numbers indicate easier levels.
       * @example 3
       */
      level_order: number;
      /**
       * @description **[OPTIONAL]** Detailed description of the difficulty level and target audience.
       * @example For learners with basic knowledge seeking to develop intermediate skills and tackle more complex challenges
       */
      description?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the difficulty level was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this difficulty level. Used for audit trails.
       * @example system
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the difficulty level was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this difficulty level. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted display name including level order for UI presentation.
       * @example Level 3: Intermediate
       */
      readonly display_name?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this is the entry-level difficulty for beginners.
       * @example false
       */
      readonly is_entry_level?: boolean;
    };
    ApiResponseDifficultyLevel: {
      success?: boolean;
      data?: components['schemas']['DifficultyLevel'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Supported content type with file format specifications and size limits
     * @example {
     *       "uuid": "c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl",
     *       "name": "Video",
     *       "mime_types": [
     *         "video/mp4",
     *         "video/webm",
     *         "video/mpeg"
     *       ],
     *       "max_file_size_mb": 500,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "system",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "supported_formats": "MP4, WebM, MPEG",
     *       "size_limit_display": "500 MB",
     *       "is_media_type": true,
     *       "upload_category": "Large Media Files"
     *     }
     */
    ContentType: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the content type. Auto-generated by the system.
       * @example c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Name of the content type. Must be unique across all content types.
       * @example Video
       */
      name: string;
      /**
       * @description **[REQUIRED]** Array of supported MIME types for this content type.
       * @example [
       *       "video/mp4",
       *       "video/webm",
       *       "video/mpeg"
       *     ]
       */
      mime_types: string[];
      /**
       * Format: int32
       * @description **[OPTIONAL]** Maximum file size allowed in megabytes. Null means no size limit.
       * @example 500
       */
      max_file_size_mb?: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the content type was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this content type. Used for audit trails.
       * @example system
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the content type was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this content type. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Category for organizing uploads in the user interface.
       * @example Large Media Files
       */
      readonly upload_category?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this content type is for media files.
       * @example true
       */
      readonly is_media_type?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable list of supported file formats.
       * @example MP4, WebM, MPEG
       */
      readonly supported_formats?: string;
      /**
       * @description **[READ-ONLY]** Human-readable format of maximum file size.
       * @example 500
       */
      readonly size_limit_display?: string;
    };
    ApiResponseContentType: {
      success?: boolean;
      data?: components['schemas']['ContentType'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Course category supporting hierarchical organization
     * @example {
     *       "uuid": "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
     *       "name": "Programming",
     *       "description": "Software development and programming courses",
     *       "parent_uuid": "t1e2c3h4-5n6o-7l8o-9g10-abcdefghijkl",
     *       "is_active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-15T15:30:00",
     *       "updated_by": "admin@sarafrika.com",
     *       "is_root_category": false,
     *       "category_path": "Technology > Programming"
     *     }
     */
    Category: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the category. Auto-generated by the system.
       * @example c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Category name. Must be unique within the same parent category.
       * @example Programming
       */
      name: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the category and its scope.
       * @example Software development and programming courses covering various languages and frameworks
       */
      description?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to parent category UUID for hierarchical organization. Null for root categories.
       * @example t1e2c3h4-5n6o-7l8o-9g10-abcdefghijkl
       */
      parent_uuid?: string;
      /**
       * @description **[OPTIONAL]** Indicates if the category is active and available for course assignment.
       * @example true
       */
      is_active?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the category was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this category. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the category was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this category. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if this is a root category with no parent.
       * @example false
       */
      readonly is_root_category?: boolean;
      /**
       * @description **[READ-ONLY]** Hierarchical path showing category position in the tree structure.
       * @example Technology > Programming
       */
      readonly category_path?: string;
    };
    ApiResponseCategory: {
      success?: boolean;
      data?: components['schemas']['Category'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Issued certificate documenting course or program completion
     * @example {
     *       "uuid": "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
     *       "certificate_number": "CERT-2024-JAV-001234",
     *       "student_uuid": "s1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "program_uuid": null,
     *       "template_uuid": "t1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl",
     *       "issued_date": "2024-05-15T16:30:00",
     *       "completion_date": "2024-05-15T15:45:00",
     *       "final_grade": 87.5,
     *       "certificate_url": "https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf",
     *       "is_valid": true,
     *       "revoked_at": null,
     *       "revoked_reason": null,
     *       "created_date": "2024-05-15T16:30:00",
     *       "created_by": "system",
     *       "updated_date": "2024-05-15T16:30:00",
     *       "updated_by": "system",
     *       "certificate_type": "Course Completion",
     *       "grade_letter": "B+",
     *       "is_downloadable": true,
     *       "validity_status": "Valid Certificate"
     *     }
     */
    Certificate: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the certificate. Auto-generated by the system.
       * @example c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the student UUID who earned this certificate.
       * @example s1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl
       */
      student_uuid: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the course UUID if this is a course completion certificate. Mutually exclusive with program_uuid.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the program UUID if this is a program completion certificate. Mutually exclusive with course_uuid.
       * @example null
       */
      program_uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the certificate template UUID used for generating this certificate.
       * @example t1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl
       */
      template_uuid: string;
      /**
       * Format: date-time
       * @description **[REQUIRED]** Date when the course or program was completed by the student.
       * @example 2024-05-15T15:45:00
       */
      completion_date: string;
      /**
       * @description **[OPTIONAL]** Final grade percentage achieved by the student.
       * @example 87.5
       */
      final_grade?: number;
      /**
       * @description **[OPTIONAL]** Indicates if the certificate is valid and has not been revoked.
       * @example true
       */
      is_valid?: boolean;
      /**
       * @description **[READ-ONLY]** Unique certificate number for verification and reference purposes.
       * @example CERT-2024-JAV-001234
       */
      readonly certificate_number?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the certificate was issued. Automatically set by the system.
       * @example 2024-05-15T16:30:00
       */
      readonly issued_date?: string;
      /**
       * Format: uri
       * @description **[READ-ONLY]** URL to the generated certificate PDF file for download.
       * @example https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf
       */
      readonly certificate_url?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the certificate was revoked, if applicable.
       * @example null
       */
      readonly revoked_at?: string;
      /**
       * @description **[READ-ONLY]** Reason for certificate revocation, if applicable.
       * @example null
       */
      readonly revoked_reason?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the certificate record was created. Automatically set by the system.
       * @example 2024-05-15T16:30:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this certificate. Used for audit trails.
       * @example system
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the certificate was last modified. Automatically updated by the system.
       * @example 2024-05-15T16:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this certificate. Used for audit trails.
       * @example system
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Type of certificate based on completion achievement.
       * @example Course Completion
       */
      readonly certificate_type?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the certificate can be downloaded by the student.
       * @example true
       */
      readonly is_downloadable?: boolean;
      /**
       * @description **[READ-ONLY]** Letter grade representation of the final grade.
       * @example B+
       */
      readonly grade_letter?: string;
      /**
       * @description **[READ-ONLY]** Current validity status of the certificate.
       * @example Valid Certificate
       */
      readonly validity_status?: string;
    };
    ApiResponseCertificate: {
      success?: boolean;
      data?: components['schemas']['Certificate'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Certificate template with design elements and layout configuration
     * @example {
     *       "uuid": "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
     *       "name": "Music Course Completion Certificate",
     *       "template_type": "COURSE_COMPLETION",
     *       "template_html": "<div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>",
     *       "template_css": ".certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }",
     *       "background_image_url": "https://storage.sarafrika.com/templates/music_cert_bg.jpg",
     *       "status": "PUBLISHED",
     *       "active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "admin@sarafrika.com",
     *       "updated_date": "2024-04-05T14:20:00",
     *       "updated_by": "design@sarafrika.com",
     *       "template_category": "Course Completion Template",
     *       "is_published": true,
     *       "design_complexity": "Standard Design",
     *       "template_scope": "General Use Template",
     *       "usage_summary": "Active Public Template"
     *     }
     */
    CertificateTemplate: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the certificate template. Auto-generated by the system.
       * @example c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * @description **[REQUIRED]** Name of the certificate template that clearly describes its purpose.
       * @example Music Course Completion Certificate
       */
      name: string;
      /**
       * @description **[REQUIRED]** Type of certificate this template is designed for.
       * @example COURSE_COMPLETION
       * @enum {string}
       */
      template_type: 'COURSE_COMPLETION' | 'PARTICIPATION' | 'ACHIEVEMENT' | 'CUSTOM';
      /**
       * @description **[OPTIONAL]** HTML content defining the certificate layout and structure.
       * @example <div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>
       */
      template_html?: string;
      /**
       * @description **[OPTIONAL]** CSS styles for the certificate template design.
       * @example .certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }
       */
      template_css?: string;
      /**
       * @description **[OPTIONAL]** URL to the background image for the certificate.
       * @example https://storage.sarafrika.com/templates/music_cert_bg.jpg
       */
      background_image_url?: string;
      /**
       * @description **[OPTIONAL]** Indicates if the template is actively available for use. Can only be true for published templates.
       * @example true
       */
      active?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the template was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this template. Used for audit trails.
       * @example admin@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the template was last modified. Automatically updated by the system.
       * @example 2024-04-05T14:20:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this template. Used for audit trails.
       * @example design@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Assessment of the template's design complexity based on HTML and CSS content.
       * @example Standard Design
       */
      readonly design_complexity?: string;
    };
    ApiResponseCertificateTemplate: {
      success?: boolean;
      data?: components['schemas']['CertificateTemplate'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Assignment with learning activities and assessment criteria
     * @example {
     *       "uuid": "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
     *       "lesson_uuid": "l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl",
     *       "title": "Music Theory Fundamentals Assignment",
     *       "description": "Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions",
     *       "instructions": "Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.",
     *       "due_date": "2024-04-15T23:59:59",
     *       "max_points": 100,
     *       "rubric_uuid": "r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl",
     *       "submission_types": [
     *         "PDF",
     *         "AUDIO",
     *         "TEXT"
     *       ],
     *       "status": "PUBLISHED",
     *       "active": true,
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com",
     *       "updated_date": "2024-04-05T10:30:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "assignment_category": "Theory Assignment",
     *       "is_published": true,
     *       "points_display": "100.00 points",
     *       "assignment_scope": "Lesson-Specific",
     *       "submission_summary": "3 submission types accepted"
     *     }
     */
    Assignment: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the assignment. Auto-generated by the system.
       * @example a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the lesson UUID this assignment belongs to.
       * @example l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl
       */
      lesson_uuid: string;
      /**
       * @description **[REQUIRED]** Title of the assignment that clearly describes its purpose.
       * @example Music Theory Fundamentals Assignment
       */
      title: string;
      /**
       * @description **[OPTIONAL]** Detailed description of the assignment's objectives and scope.
       * @example Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions
       */
      description?: string;
      /**
       * @description **[OPTIONAL]** Detailed instructions for completing the assignment.
       * @example Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.
       */
      instructions?: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Due date and time for assignment submission.
       * @example 2024-04-15T23:59:59
       */
      due_date?: string;
      /**
       * @description **[OPTIONAL]** Maximum points that can be earned for this assignment.
       * @example 100
       */
      max_points?: number;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the rubric UUID used for grading this assignment.
       * @example r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl
       */
      rubric_uuid?: string;
      /**
       * @description **[OPTIONAL]** Array of accepted submission types for this assignment.
       * @example [
       *       "PDF",
       *       "AUDIO",
       *       "TEXT"
       *     ]
       */
      submission_types?: string[];
      /**
       * @description **[OPTIONAL]** Indicates if the assignment is actively available for students. Can only be true for published assignments.
       * @example true
       */
      is_published?: boolean;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the assignment was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this assignment. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the assignment was last modified. Automatically updated by the system.
       * @example 2024-04-05T10:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this assignment. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the assignment based on its characteristics.
       * @example Theory Assignment
       */
      readonly assignment_category?: string;
      /**
       * @description **[READ-ONLY]** Formatted display of the maximum points for this assignment.
       * @example 100
       */
      readonly points_display?: string;
      /**
       * @description **[READ-ONLY]** Scope of the assignment - lesson-specific or standalone.
       * @example Lesson-Specific
       */
      readonly assignment_scope?: string;
      /**
       * @description **[READ-ONLY]** Summary of accepted submission types for this assignment.
       * @example 3
       */
      readonly submission_summary?: string;
    };
    ApiResponseAssignment: {
      success?: boolean;
      data?: components['schemas']['Assignment'];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseStudent: {
      success?: boolean;
      data?: components['schemas']['Student'];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseString: {
      success?: boolean;
      data?: string;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseInvitation: {
      success?: boolean;
      data?: components['schemas']['Invitation'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Complete invitation information including recipient details, organization/branch assignment, invitation status, and lifecycle tracking
     * @example {
     *       "uuid": "550e8400-e29b-41d4-a716-446655440000",
     *       "token": "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd",
     *       "recipient_email": "john.doe@example.com",
     *       "recipient_name": "John Doe",
     *       "organisation_uuid": "550e8400-e29b-41d4-a716-446655440001",
     *       "organisation_name": "Acme Training Institute",
     *       "branch_uuid": "550e8400-e29b-41d4-a716-446655440002",
     *       "branch_name": "Downtown Branch",
     *       "domain_uuid": "550e8400-e29b-41d4-a716-446655440003",
     *       "domain_name": "instructor",
     *       "inviter_uuid": "550e8400-e29b-41d4-a716-446655440004",
     *       "inviter_name": "Jane Smith",
     *       "status": "PENDING",
     *       "expires_at": "2025-07-16T14:30:00",
     *       "accepted_at": null,
     *       "declined_at": null,
     *       "user_uuid": null,
     *       "notes": "Welcome to our training program! We're excited to have you join our team.",
     *       "created_date": "2025-07-09T09:00:00",
     *       "updated_date": "2025-07-09T09:00:00",
     *       "created_by": "admin@organization.com",
     *       "updated_by": "admin@organization.com"
     *     }
     */
    Invitation: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the invitation. Auto-generated by the system and cannot be modified.
       * @example 550e8400-e29b-41d4-a716-446655440000
       */
      readonly uuid?: string;
      /**
       * @description **[READ-ONLY]** Unique token used for invitation acceptance and decline links. Generated by the system and used in email URLs for secure invitation processing.
       * @example abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd
       */
      readonly token?: string;
      /**
       * Format: email
       * @description **[REQUIRED]** Email address of the invitation recipient. Must be a valid email format and will be used to send invitation emails.
       * @example john.doe@example.com
       */
      recipient_email: string;
      /**
       * @description **[REQUIRED]** Full name of the invitation recipient. Used in email templates and for display purposes throughout the invitation process.
       * @example John Doe
       */
      recipient_name: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** UUID of the organization the user is being invited to join. References the target organization for this invitation.
       * @example 550e8400-e29b-41d4-a716-446655440001
       */
      organisation_uuid: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** UUID of the training branch for branch-specific invitations. When provided, the invitation is for a specific branch within the organization.
       * @example 550e8400-e29b-41d4-a716-446655440002
       */
      branch_uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** UUID of the user domain/role being offered to the recipient. Determines what permissions and access the user will have upon acceptance.
       * @example 550e8400-e29b-41d4-a716-446655440003
       */
      domain_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** UUID of the user who sent the invitation. References the user who initiated this invitation process.
       * @example 550e8400-e29b-41d4-a716-446655440004
       */
      inviter_uuid: string;
      /**
       * @description **[READ-ONLY]** Current status of the invitation in its lifecycle. Automatically managed by the system based on user actions and expiration rules.
       * @default PENDING
       * @example PENDING
       * @enum {string}
       */
      readonly status: 'PENDING' | 'ACCEPTED' | 'DECLINED' | 'EXPIRED' | 'CANCELLED';
      /**
       * @description **[OPTIONAL]** Optional notes or message included with the invitation. Can contain welcoming text, instructions, or other relevant information for the recipient.
       * @example Welcome to our training program! We're excited to have you join our team.
       */
      notes?: string;
      /**
       * @description **[READ-ONLY]** Name of the organization for display purposes. Populated by the system based on the organisation_uuid and cannot be directly modified.
       * @example Acme Training Institute
       */
      readonly organisation_name?: string;
      /**
       * @description **[READ-ONLY]** Name of the training branch for display purposes. Populated by the system based on the branch_uuid and cannot be directly modified.
       * @example Downtown Branch
       */
      readonly branch_name?: string;
      /**
       * @description **[READ-ONLY]** Name of the user domain/role for display purposes. Populated by the system based on the domain_uuid and indicates the role being offered.
       * @example instructor
       * @enum {string}
       */
      readonly domain_name?: 'student' | 'instructor' | 'admin' | 'organisation_user';
      /**
       * @description **[READ-ONLY]** Full name of the user who sent the invitation. Cached for performance and email template purposes, automatically populated by the system.
       * @example Jane Smith
       */
      readonly inviter_name?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Date and time when the invitation expires in ISO 8601 format. After this time, the invitation cannot be accepted and will be marked as expired.
       * @example 2025-07-16T14:30:00
       */
      readonly expires_at?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Date and time when the invitation was accepted in ISO 8601 format. Only populated when the invitation status is ACCEPTED.
       * @example 2025-07-10T10:15:30
       */
      readonly accepted_at?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Date and time when the invitation was declined in ISO 8601 format. Only populated when the invitation status is DECLINED.
       * @example 2025-07-10T16:45:00
       */
      readonly declined_at?: string;
      /**
       * Format: uuid
       * @description **[READ-ONLY]** UUID of the user who accepted the invitation. Only populated when the invitation status is ACCEPTED, linking to the actual user account.
       * @example 550e8400-e29b-41d4-a716-446655440005
       */
      readonly user_uuid?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the invitation was first created in ISO 8601 format. Automatically set by the system and cannot be modified.
       * @example 2025-07-09T09:00:00
       */
      readonly created_date?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the invitation was last modified in ISO 8601 format. Automatically updated by the system on any changes and cannot be directly modified.
       * @example 2025-07-09T09:00:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or identifier of who created the invitation. Used for audit trail purposes and automatically populated by the system.
       * @example admin@organization.com
       */
      readonly created_by?: string;
      /**
       * @description **[READ-ONLY]** Email or identifier of who last modified the invitation. Used for audit trail purposes and automatically updated by the system on changes.
       * @example admin@organization.com
       */
      readonly updated_by?: string;
    };
    ApiResponseInteger: {
      success?: boolean;
      /** Format: int32 */
      data?: number;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseInstructor: {
      success?: boolean;
      data?: components['schemas']['Instructor'];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponse: {
      success?: boolean;
      data?: Record<string, never>;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseAssignmentSubmission: {
      success?: boolean;
      data?: components['schemas']['AssignmentSubmission'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Student submission for an assignment with grading and feedback information
     * @example {
     *       "uuid": "s1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl",
     *       "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
     *       "assignment_uuid": "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
     *       "submission_text": "This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.",
     *       "file_urls": [
     *         "https://storage.sarafrika.com/submissions/audio_example.mp3",
     *         "https://storage.sarafrika.com/submissions/written_analysis.pdf"
     *       ],
     *       "submitted_at": "2024-04-10T14:30:00",
     *       "status": "GRADED",
     *       "score": 85,
     *       "max_score": 100,
     *       "percentage": 85,
     *       "instructor_comments": "Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.",
     *       "graded_at": "2024-04-12T16:45:00",
     *       "graded_by_uuid": "i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl",
     *       "created_date": "2024-04-10T14:30:00",
     *       "created_by": "student@sarafrika.com",
     *       "updated_date": "2024-04-12T16:45:00",
     *       "updated_by": "instructor@sarafrika.com",
     *       "submission_category": "Mixed Media Submission",
     *       "is_graded": true,
     *       "grade_display": "85.00 / 100.00 (85%)",
     *       "submission_status_display": "Graded - Instructor Feedback Available",
     *       "file_count_display": "2 files attached"
     *     }
     */
    AssignmentSubmission: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the assignment submission. Auto-generated by the system.
       * @example s1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the enrollment UUID of the student making this submission.
       * @example e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl
       */
      enrollment_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the assignment UUID this submission is for.
       * @example a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl
       */
      assignment_uuid: string;
      /**
       * @description **[OPTIONAL]** Text content of the student's submission.
       * @example This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.
       */
      submission_text?: string;
      /**
       * @description **[OPTIONAL]** Array of file URLs attached to this submission.
       * @example [
       *       "https://storage.sarafrika.com/submissions/audio_example.mp3",
       *       "https://storage.sarafrika.com/submissions/written_analysis.pdf"
       *     ]
       */
      file_urls?: string[];
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the submission was made by the student.
       * @example 2024-04-10T14:30:00
       */
      submitted_at?: string;
      /**
       * @description **[REQUIRED]** Current status of the submission in the grading workflow.
       * @example GRADED
       * @enum {string}
       */
      status: 'DRAFT' | 'SUBMITTED' | 'IN_REVIEW' | 'GRADED' | 'RETURNED';
      /**
       * @description **[OPTIONAL]** Score awarded to this submission by the instructor.
       * @example 85
       */
      score?: number;
      /**
       * @description **[OPTIONAL]** Maximum possible score for this submission.
       * @example 100
       */
      max_score?: number;
      /**
       * @description **[OPTIONAL]** Percentage score calculated from score and max_score.
       * @example 85
       */
      percentage?: number;
      /**
       * @description **[OPTIONAL]** Instructor's feedback and comments on the submission.
       * @example Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.
       */
      instructor_comments?: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the submission was graded by the instructor.
       * @example 2024-04-12T16:45:00
       */
      graded_at?: string;
      /**
       * Format: uuid
       * @description **[OPTIONAL]** Reference to the instructor UUID who graded this submission.
       * @example i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl
       */
      graded_by_uuid?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the submission was created. Automatically set by the system.
       * @example 2024-04-10T14:30:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the student who created this submission. Used for audit trails.
       * @example student@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the submission was last modified. Automatically updated by the system.
       * @example 2024-04-12T16:45:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this submission. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the submission has been graded by an instructor.
       * @example true
       */
      readonly is_graded?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted category of the submission based on its content type.
       * @example Mixed Media Submission
       */
      readonly submission_category?: string;
      /**
       * @description **[READ-ONLY]** Formatted display of the grade information.
       * @example 85
       */
      readonly grade_display?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive status indicating submission state and availability of feedback.
       * @example Graded - Instructor Feedback Available
       */
      readonly submission_status_display?: string;
      /**
       * @description **[READ-ONLY]** Summary of files attached to this submission.
       * @example 2
       */
      readonly file_count_display?: string;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    ApiResponsePagedDTOUser: {
      success?: boolean;
      data?: components['schemas']['PagedDTOUser'];
      message?: string;
      error?: Record<string, never>;
    };
    PageLinks: {
      first?: string;
      previous?: string;
      self?: string;
      next?: string;
      last?: string;
    };
    PageMetadata: {
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      hasNext?: boolean;
      hasPrevious?: boolean;
      first?: boolean;
      last?: boolean;
    };
    PagedDTOUser: {
      content?: components['schemas']['User'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListInvitation: {
      success?: boolean;
      data?: components['schemas']['Invitation'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOTrainingBranch: {
      success?: boolean;
      data?: components['schemas']['PagedDTOTrainingBranch'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOTrainingBranch: {
      content?: components['schemas']['TrainingBranch'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOStudent: {
      success?: boolean;
      data?: components['schemas']['PagedDTOStudent'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOStudent: {
      content?: components['schemas']['Student'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    Page: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      first?: boolean;
      last?: boolean;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      size?: number;
      content?: Record<string, never>[];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    PageableObject: {
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'];
      unpaged?: boolean;
    };
    SortObject: {
      sorted?: boolean;
      empty?: boolean;
      unsorted?: boolean;
    };
    ApiResponsePagedDTOQuiz: {
      success?: boolean;
      data?: components['schemas']['PagedDTOQuiz'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOQuiz: {
      content?: components['schemas']['Quiz'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseBigDecimal: {
      success?: boolean;
      data?: number;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseListQuizQuestion: {
      success?: boolean;
      data?: components['schemas']['QuizQuestion'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOQuizQuestionOption: {
      success?: boolean;
      data?: components['schemas']['PagedDTOQuizQuestionOption'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOQuizQuestionOption: {
      content?: components['schemas']['QuizQuestionOption'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseMapStringLong: {
      success?: boolean;
      data?: {
        [key: string]: number;
      };
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOQuizAttempt: {
      success?: boolean;
      data?: components['schemas']['PagedDTOQuizAttempt'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOQuizAttempt: {
      content?: components['schemas']['QuizAttempt'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    /**
     * @description Student quiz attempt with timing, scoring, and completion tracking
     * @example {
     *       "uuid": "q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl",
     *       "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
     *       "quiz_uuid": "q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl",
     *       "attempt_number": 2,
     *       "started_at": "2024-04-10T14:15:00",
     *       "submitted_at": "2024-04-10T15:30:00",
     *       "time_taken_minutes": 75,
     *       "score": 85,
     *       "max_score": 100,
     *       "percentage": 85,
     *       "is_passed": true,
     *       "status": "GRADED",
     *       "created_date": "2024-04-10T14:15:00",
     *       "created_by": "student@sarafrika.com",
     *       "updated_date": "2024-04-10T15:30:00",
     *       "updated_by": "system@sarafrika.com",
     *       "attempt_category": "Graded Attempt",
     *       "is_completed": true,
     *       "grade_display": "85.00 / 100.00 (85%)",
     *       "time_display": "1 hour 15 minutes",
     *       "performance_summary": "Passed on attempt 2 with 85% score"
     *     }
     */
    QuizAttempt: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the quiz attempt. Auto-generated by the system.
       * @example q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the enrollment UUID of the student taking the quiz.
       * @example e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl
       */
      enrollment_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the quiz UUID being attempted.
       * @example q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl
       */
      quiz_uuid: string;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Sequential number of this attempt for the same quiz by the same student.
       * @example 2
       */
      attempt_number?: number;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student started the quiz attempt.
       * @example 2024-04-10T14:15:00
       */
      started_at?: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student submitted the quiz attempt.
       * @example 2024-04-10T15:30:00
       */
      submitted_at?: string;
      /**
       * Format: int32
       * @description **[OPTIONAL]** Total time taken to complete the quiz in minutes.
       * @example 75
       */
      time_taken_minutes?: number;
      /**
       * @description **[OPTIONAL]** Score achieved by the student on this quiz attempt.
       * @example 85
       */
      score?: number;
      /**
       * @description **[OPTIONAL]** Maximum possible score for this quiz.
       * @example 100
       */
      max_score?: number;
      /**
       * @description **[OPTIONAL]** Percentage score calculated from score and max_score.
       * @example 85
       */
      percentage?: number;
      /**
       * @description **[OPTIONAL]** Indicates if the student passed the quiz based on passing criteria.
       * @example true
       */
      is_passed?: boolean;
      /**
       * @description **[REQUIRED]** Current status of the quiz attempt.
       * @example GRADED
       * @enum {string}
       */
      status: 'IN_PROGRESS' | 'SUBMITTED' | 'GRADED';
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the attempt was created. Automatically set by the system.
       * @example 2024-04-10T14:15:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this attempt. Used for audit trails.
       * @example student@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the attempt was last modified. Automatically updated by the system.
       * @example 2024-04-10T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this attempt. Used for audit trails.
       * @example system@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the quiz attempt has been completed (submitted or graded).
       * @example true
       */
      readonly is_completed?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted display of the grade information.
       * @example 85
       */
      readonly grade_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted display of the time taken to complete the quiz.
       * @example 1
       */
      readonly time_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the attempt based on outcome and status.
       * @example Graded Attempt
       */
      readonly attempt_category?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the quiz attempt performance.
       * @example Passed on attempt 2 with 85% score
       */
      readonly performance_summary?: string;
    };
    ApiResponsePagedDTOQuizQuestion: {
      success?: boolean;
      data?: components['schemas']['PagedDTOQuizQuestion'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOQuizQuestion: {
      content?: components['schemas']['QuizQuestion'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOProgramRequirement: {
      success?: boolean;
      data?: components['schemas']['PagedDTOProgramRequirement'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOProgramRequirement: {
      content?: components['schemas']['ProgramRequirement'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOProgramEnrollment: {
      success?: boolean;
      data?: components['schemas']['PagedDTOProgramEnrollment'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOProgramEnrollment: {
      content?: components['schemas']['ProgramEnrollment'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    /**
     * @description Student enrollment in an educational program with progress tracking and completion details
     * @example {
     *       "uuid": "p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl",
     *       "student_uuid": "s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl",
     *       "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
     *       "enrollment_date": "2024-04-01T09:00:00",
     *       "completion_date": "2024-06-30T16:45:00",
     *       "status": "COMPLETED",
     *       "progress_percentage": 100,
     *       "final_grade": 87.25,
     *       "created_date": "2024-04-01T09:00:00",
     *       "created_by": "student@sarafrika.com",
     *       "updated_date": "2024-06-30T16:45:00",
     *       "updated_by": "system@sarafrika.com",
     *       "enrollment_category": "Completed Program Enrollment",
     *       "is_active": false,
     *       "progress_display": "100.00% Complete",
     *       "enrollment_duration": "90 days",
     *       "status_summary": "Successfully completed program with final grade of 87.25"
     *     }
     */
    ProgramEnrollment: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the program enrollment. Auto-generated by the system.
       * @example p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the student UUID who is enrolled in the program.
       * @example s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl
       */
      student_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the program UUID the student is enrolled in.
       * @example p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl
       */
      program_uuid: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student enrolled in the program.
       * @example 2024-04-01T09:00:00
       */
      enrollment_date?: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student completed the program. Null if not yet completed.
       * @example 2024-06-30T16:45:00
       */
      completion_date?: string;
      /**
       * @description **[REQUIRED]** Current status of the student's enrollment in the program.
       * @example COMPLETED
       * @enum {string}
       */
      status: 'ACTIVE' | 'COMPLETED' | 'DROPPED' | 'SUSPENDED';
      /**
       * @description **[OPTIONAL]** Percentage of program content completed by the student.
       * @example 100
       */
      progress_percentage?: number;
      /**
       * @description **[OPTIONAL]** Final grade achieved by the student in the program.
       * @example 87.25
       */
      final_grade?: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.
       * @example 2024-04-01T09:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.
       * @example student@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.
       * @example 2024-06-30T16:45:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.
       * @example system@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.
       * @example false
       */
      readonly is_active?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted display of the student's progress in the program.
       * @example 100.00% Complete
       */
      readonly progress_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the enrollment based on current status.
       * @example Completed Program Enrollment
       */
      readonly enrollment_category?: string;
      /**
       * @description **[READ-ONLY]** Duration of the enrollment from start to completion or current date.
       * @example 90
       */
      readonly enrollment_duration?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.
       * @example Successfully completed program with final grade of 87.25
       */
      readonly status_summary?: string;
    };
    ApiResponseListCourse: {
      success?: boolean;
      data?: components['schemas']['Course'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseDouble: {
      success?: boolean;
      /** Format: double */
      data?: number;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOCertificate: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCertificate'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCertificate: {
      content?: components['schemas']['Certificate'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOProgramCourse: {
      success?: boolean;
      data?: components['schemas']['PagedDTOProgramCourse'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOProgramCourse: {
      content?: components['schemas']['ProgramCourse'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOOrganisation: {
      success?: boolean;
      data?: components['schemas']['PagedDTOOrganisation'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOOrganisation: {
      content?: components['schemas']['Organisation'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListUser: {
      success?: boolean;
      data?: components['schemas']['User'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseBoolean: {
      success?: boolean;
      data?: boolean;
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOInstructor: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructor'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructor: {
      content?: components['schemas']['Instructor'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOInstructorSkill: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructorSkill'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructorSkill: {
      content?: components['schemas']['InstructorSkill'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOInstructorProfessionalMembership: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructorProfessionalMembership'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructorProfessionalMembership: {
      content?: components['schemas']['InstructorProfessionalMembership'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOInstructorExperience: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructorExperience'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructorExperience: {
      content?: components['schemas']['InstructorExperience'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListInstructorEducation: {
      success?: boolean;
      data?: components['schemas']['InstructorEducation'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponseListInstructorDocument: {
      success?: boolean;
      data?: components['schemas']['InstructorDocument'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOInstructorEducation: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructorEducation'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructorEducation: {
      content?: components['schemas']['InstructorEducation'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOInstructorDocument: {
      success?: boolean;
      data?: components['schemas']['PagedDTOInstructorDocument'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOInstructorDocument: {
      content?: components['schemas']['InstructorDocument'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOCourse: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCourse'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCourse: {
      content?: components['schemas']['Course'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListContentStatus: {
      success?: boolean;
      data?: ('draft' | 'in_review' | 'published' | 'archived')[];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOCourseRequirement: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCourseRequirement'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCourseRequirement: {
      content?: components['schemas']['CourseRequirement'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOLesson: {
      success?: boolean;
      data?: components['schemas']['PagedDTOLesson'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOLesson: {
      content?: components['schemas']['Lesson'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListLessonContent: {
      success?: boolean;
      data?: components['schemas']['LessonContent'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOCourseEnrollment: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCourseEnrollment'];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Student enrollment in a course with progress tracking and completion details
     * @example {
     *       "uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
     *       "student_uuid": "s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "enrollment_date": "2024-04-01T09:00:00",
     *       "completion_date": "2024-04-30T16:45:00",
     *       "status": "COMPLETED",
     *       "progress_percentage": 100,
     *       "final_grade": 85.5,
     *       "created_date": "2024-04-01T09:00:00",
     *       "created_by": "student@sarafrika.com",
     *       "updated_date": "2024-04-30T16:45:00",
     *       "updated_by": "system@sarafrika.com",
     *       "enrollment_category": "Completed Enrollment",
     *       "is_active": false,
     *       "progress_display": "100.00% Complete",
     *       "enrollment_duration": "29 days",
     *       "status_summary": "Successfully completed with final grade of 85.50"
     *     }
     */
    CourseEnrollment: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the course enrollment. Auto-generated by the system.
       * @example e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the student UUID who is enrolled in the course.
       * @example s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl
       */
      student_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the course UUID the student is enrolled in.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student enrolled in the course.
       * @example 2024-04-01T09:00:00
       */
      enrollment_date?: string;
      /**
       * Format: date-time
       * @description **[OPTIONAL]** Timestamp when the student completed the course. Null if not yet completed.
       * @example 2024-04-30T16:45:00
       */
      completion_date?: string;
      /**
       * @description **[REQUIRED]** Current status of the student's enrollment in the course.
       * @example COMPLETED
       * @enum {string}
       */
      status: 'ACTIVE' | 'COMPLETED' | 'DROPPED' | 'SUSPENDED';
      /**
       * @description **[OPTIONAL]** Percentage of course content completed by the student.
       * @example 100
       */
      progress_percentage?: number;
      /**
       * @description **[OPTIONAL]** Final grade achieved by the student in the course.
       * @example 85.5
       */
      final_grade?: number;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.
       * @example 2024-04-01T09:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.
       * @example student@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.
       * @example 2024-04-30T16:45:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.
       * @example system@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.
       * @example false
       */
      readonly is_active?: boolean;
      /**
       * @description **[READ-ONLY]** Formatted display of the student's progress in the course.
       * @example 100.00% Complete
       */
      readonly progress_display?: string;
      /**
       * @description **[READ-ONLY]** Formatted category of the enrollment based on current status.
       * @example Completed Enrollment
       */
      readonly enrollment_category?: string;
      /**
       * @description **[READ-ONLY]** Duration of the enrollment from start to completion or current date.
       * @example 29
       */
      readonly enrollment_duration?: string;
      /**
       * @description **[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.
       * @example Successfully completed with final grade of 85.50
       */
      readonly status_summary?: string;
    };
    PagedDTOCourseEnrollment: {
      content?: components['schemas']['CourseEnrollment'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListCourseCategoryMapping: {
      success?: boolean;
      data?: components['schemas']['CourseCategoryMapping'][];
      message?: string;
      error?: Record<string, never>;
    };
    /**
     * @description Represents the many-to-many relationship between courses and categories
     * @example {
     *       "uuid": "m1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl",
     *       "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
     *       "category_uuid": "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
     *       "course_name": "Advanced Java Programming",
     *       "category_name": "Programming",
     *       "created_date": "2024-04-01T12:00:00",
     *       "created_by": "instructor@sarafrika.com"
     *     }
     */
    CourseCategoryMapping: {
      /**
       * Format: uuid
       * @description **[READ-ONLY]** Unique system identifier for the mapping. Auto-generated by the system.
       * @example m1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl
       */
      readonly uuid?: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the course UUID in this mapping.
       * @example c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl
       */
      course_uuid: string;
      /**
       * Format: uuid
       * @description **[REQUIRED]** Reference to the category UUID in this mapping.
       * @example c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl
       */
      category_uuid: string;
      /**
       * @description **[READ-ONLY]** Name of the course for display purposes. Fetched from the course entity.
       * @example Advanced Java Programming
       */
      readonly course_name?: string;
      /**
       * @description **[READ-ONLY]** Name of the category for display purposes. Fetched from the category entity.
       * @example Programming
       */
      readonly category_name?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the mapping was created. Automatically set by the system.
       * @example 2024-04-01T12:00:00
       */
      readonly created_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who created this mapping. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly created_by?: string;
      /**
       * Format: date-time
       * @description **[READ-ONLY]** Timestamp when the mapping was last modified. Automatically updated by the system.
       * @example 2024-04-15T15:30:00
       */
      readonly updated_date?: string;
      /**
       * @description **[READ-ONLY]** Email or username of the user who last modified this mapping. Used for audit trails.
       * @example instructor@sarafrika.com
       */
      readonly updated_by?: string;
      /**
       * @description **[READ-ONLY]** Indicates if both course and category names are populated.
       * @example true
       */
      readonly has_names?: boolean;
      /**
       * @description **[READ-ONLY]** Human-readable text representing this course-category relationship.
       * @example Advanced Java Programming → Programming
       */
      readonly display_text?: string;
    };
    ApiResponsePagedDTOCourseAssessment: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCourseAssessment'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCourseAssessment: {
      content?: components['schemas']['CourseAssessment'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOLessonContent: {
      success?: boolean;
      data?: components['schemas']['PagedDTOLessonContent'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOLessonContent: {
      content?: components['schemas']['LessonContent'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOCourseCategoryMapping: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCourseCategoryMapping'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCourseCategoryMapping: {
      content?: components['schemas']['CourseCategoryMapping'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponsePagedDTOGradingLevel: {
      success?: boolean;
      data?: components['schemas']['PagedDTOGradingLevel'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOGradingLevel: {
      content?: components['schemas']['GradingLevel'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListDifficultyLevel: {
      success?: boolean;
      data?: components['schemas']['DifficultyLevel'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOContentType: {
      success?: boolean;
      data?: components['schemas']['PagedDTOContentType'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOContentType: {
      content?: components['schemas']['ContentType'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListContentType: {
      success?: boolean;
      data?: components['schemas']['ContentType'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOCategory: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCategory'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCategory: {
      content?: components['schemas']['Category'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListCategory: {
      success?: boolean;
      data?: components['schemas']['Category'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOCertificateTemplate: {
      success?: boolean;
      data?: components['schemas']['PagedDTOCertificateTemplate'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOCertificateTemplate: {
      content?: components['schemas']['CertificateTemplate'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListCertificate: {
      success?: boolean;
      data?: components['schemas']['Certificate'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOAssignment: {
      success?: boolean;
      data?: components['schemas']['PagedDTOAssignment'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOAssignment: {
      content?: components['schemas']['Assignment'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    ApiResponseListAssignmentSubmission: {
      success?: boolean;
      data?: components['schemas']['AssignmentSubmission'][];
      message?: string;
      error?: Record<string, never>;
    };
    ApiResponsePagedDTOAssignmentSubmission: {
      success?: boolean;
      data?: components['schemas']['PagedDTOAssignmentSubmission'];
      message?: string;
      error?: Record<string, never>;
    };
    PagedDTOAssignmentSubmission: {
      content?: components['schemas']['AssignmentSubmission'][];
      metadata?: components['schemas']['PageMetadata'];
      links?: components['schemas']['PageLinks'];
    };
    /**
     * Format: phone
     * @description Valid African phone number in international or local format
     * @example +254712345678
     */
    AfricanPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid Kenyan mobile phone number (Safaricom, Airtel formats)
     * @example +254712345678
     */
    KenyanPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid Nigerian mobile phone number (MTN, Glo, Airtel, 9mobile formats)
     * @example +2348012345678
     */
    NigerianPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid East African phone number (Kenya, Uganda, Tanzania, Rwanda, Burundi, South Sudan)
     * @example +254712345678
     */
    EastAfricanPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid West African phone number (Nigeria, Ghana, Senegal, Mali, etc.)
     * @example +2348012345678
     */
    WestAfricanPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid Southern African phone number (South Africa, Zimbabwe, Zambia, Botswana, etc.)
     * @example +27821234567
     */
    SouthernAfricanPhoneNumber: unknown;
    /**
     * Format: phone
     * @description Valid international phone number in E.164 format
     * @example +1234567890
     */
    InternationalPhoneNumber: unknown;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type ResponseDtoVoid = components['schemas']['ResponseDTOVoid'];
export type User = components['schemas']['User'];
export type ApiResponseUser = components['schemas']['ApiResponseUser'];
export type TrainingBranch = components['schemas']['TrainingBranch'];
export type ApiResponseTrainingBranch = components['schemas']['ApiResponseTrainingBranch'];
export type Student = components['schemas']['Student'];
export type Quiz = components['schemas']['Quiz'];
export type ApiResponseQuiz = components['schemas']['ApiResponseQuiz'];
export type QuizQuestion = components['schemas']['QuizQuestion'];
export type ApiResponseQuizQuestion = components['schemas']['ApiResponseQuizQuestion'];
export type QuizQuestionOption = components['schemas']['QuizQuestionOption'];
export type ApiResponseQuizQuestionOption = components['schemas']['ApiResponseQuizQuestionOption'];
export type ProgramRequirement = components['schemas']['ProgramRequirement'];
export type ApiResponseProgramRequirement = components['schemas']['ApiResponseProgramRequirement'];
export type ProgramCourse = components['schemas']['ProgramCourse'];
export type ApiResponseProgramCourse = components['schemas']['ApiResponseProgramCourse'];
export type Organisation = components['schemas']['Organisation'];
export type ApiResponseOrganisation = components['schemas']['ApiResponseOrganisation'];
export type ApiResponseVoid = components['schemas']['ApiResponseVoid'];
export type Instructor = components['schemas']['Instructor'];
export type InstructorSkill = components['schemas']['InstructorSkill'];
export type ApiResponseInstructorSkill = components['schemas']['ApiResponseInstructorSkill'];
export type InstructorProfessionalMembership =
  components['schemas']['InstructorProfessionalMembership'];
export type ApiResponseInstructorProfessionalMembership =
  components['schemas']['ApiResponseInstructorProfessionalMembership'];
export type InstructorExperience = components['schemas']['InstructorExperience'];
export type ApiResponseInstructorExperience =
  components['schemas']['ApiResponseInstructorExperience'];
export type InstructorEducation = components['schemas']['InstructorEducation'];
export type ApiResponseInstructorEducation =
  components['schemas']['ApiResponseInstructorEducation'];
export type InstructorDocument = components['schemas']['InstructorDocument'];
export type ApiResponseInstructorDocument = components['schemas']['ApiResponseInstructorDocument'];
export type Course = components['schemas']['Course'];
export type ApiResponseCourse = components['schemas']['ApiResponseCourse'];
export type CourseRequirement = components['schemas']['CourseRequirement'];
export type ApiResponseCourseRequirement = components['schemas']['ApiResponseCourseRequirement'];
export type Lesson = components['schemas']['Lesson'];
export type ApiResponseLesson = components['schemas']['ApiResponseLesson'];
export type LessonContent = components['schemas']['LessonContent'];
export type ApiResponseLessonContent = components['schemas']['ApiResponseLessonContent'];
export type CourseAssessment = components['schemas']['CourseAssessment'];
export type ApiResponseCourseAssessment = components['schemas']['ApiResponseCourseAssessment'];
export type GradingLevel = components['schemas']['GradingLevel'];
export type ApiResponseGradingLevel = components['schemas']['ApiResponseGradingLevel'];
export type DifficultyLevel = components['schemas']['DifficultyLevel'];
export type ApiResponseDifficultyLevel = components['schemas']['ApiResponseDifficultyLevel'];
export type ContentType = components['schemas']['ContentType'];
export type ApiResponseContentType = components['schemas']['ApiResponseContentType'];
export type Category = components['schemas']['Category'];
export type ApiResponseCategory = components['schemas']['ApiResponseCategory'];
export type Certificate = components['schemas']['Certificate'];
export type ApiResponseCertificate = components['schemas']['ApiResponseCertificate'];
export type CertificateTemplate = components['schemas']['CertificateTemplate'];
export type ApiResponseCertificateTemplate =
  components['schemas']['ApiResponseCertificateTemplate'];
export type Assignment = components['schemas']['Assignment'];
export type ApiResponseAssignment = components['schemas']['ApiResponseAssignment'];
export type ApiResponseStudent = components['schemas']['ApiResponseStudent'];
export type ApiResponseString = components['schemas']['ApiResponseString'];
export type ApiResponseInvitation = components['schemas']['ApiResponseInvitation'];
export type Invitation = components['schemas']['Invitation'];
export type ApiResponseInteger = components['schemas']['ApiResponseInteger'];
export type ApiResponseInstructor = components['schemas']['ApiResponseInstructor'];
export type ApiResponse = components['schemas']['ApiResponse'];
export type ApiResponseAssignmentSubmission =
  components['schemas']['ApiResponseAssignmentSubmission'];
export type AssignmentSubmission = components['schemas']['AssignmentSubmission'];
export type Pageable = components['schemas']['Pageable'];
export type ApiResponsePagedDtoUser = components['schemas']['ApiResponsePagedDTOUser'];
export type PageLinks = components['schemas']['PageLinks'];
export type PageMetadata = components['schemas']['PageMetadata'];
export type PagedDtoUser = components['schemas']['PagedDTOUser'];
export type ApiResponseListInvitation = components['schemas']['ApiResponseListInvitation'];
export type ApiResponsePagedDtoTrainingBranch =
  components['schemas']['ApiResponsePagedDTOTrainingBranch'];
export type PagedDtoTrainingBranch = components['schemas']['PagedDTOTrainingBranch'];
export type ApiResponsePagedDtoStudent = components['schemas']['ApiResponsePagedDTOStudent'];
export type PagedDtoStudent = components['schemas']['PagedDTOStudent'];
export type Page = components['schemas']['Page'];
export type PageableObject = components['schemas']['PageableObject'];
export type SortObject = components['schemas']['SortObject'];
export type ApiResponsePagedDtoQuiz = components['schemas']['ApiResponsePagedDTOQuiz'];
export type PagedDtoQuiz = components['schemas']['PagedDTOQuiz'];
export type ApiResponseBigDecimal = components['schemas']['ApiResponseBigDecimal'];
export type ApiResponseListQuizQuestion = components['schemas']['ApiResponseListQuizQuestion'];
export type ApiResponsePagedDtoQuizQuestionOption =
  components['schemas']['ApiResponsePagedDTOQuizQuestionOption'];
export type PagedDtoQuizQuestionOption = components['schemas']['PagedDTOQuizQuestionOption'];
export type ApiResponseMapStringLong = components['schemas']['ApiResponseMapStringLong'];
export type ApiResponsePagedDtoQuizAttempt =
  components['schemas']['ApiResponsePagedDTOQuizAttempt'];
export type PagedDtoQuizAttempt = components['schemas']['PagedDTOQuizAttempt'];
export type QuizAttempt = components['schemas']['QuizAttempt'];
export type ApiResponsePagedDtoQuizQuestion =
  components['schemas']['ApiResponsePagedDTOQuizQuestion'];
export type PagedDtoQuizQuestion = components['schemas']['PagedDTOQuizQuestion'];
export type ApiResponsePagedDtoProgramRequirement =
  components['schemas']['ApiResponsePagedDTOProgramRequirement'];
export type PagedDtoProgramRequirement = components['schemas']['PagedDTOProgramRequirement'];
export type ApiResponsePagedDtoProgramEnrollment =
  components['schemas']['ApiResponsePagedDTOProgramEnrollment'];
export type PagedDtoProgramEnrollment = components['schemas']['PagedDTOProgramEnrollment'];
export type ProgramEnrollment = components['schemas']['ProgramEnrollment'];
export type ApiResponseListCourse = components['schemas']['ApiResponseListCourse'];
export type ApiResponseDouble = components['schemas']['ApiResponseDouble'];
export type ApiResponsePagedDtoCertificate =
  components['schemas']['ApiResponsePagedDTOCertificate'];
export type PagedDtoCertificate = components['schemas']['PagedDTOCertificate'];
export type ApiResponsePagedDtoProgramCourse =
  components['schemas']['ApiResponsePagedDTOProgramCourse'];
export type PagedDtoProgramCourse = components['schemas']['PagedDTOProgramCourse'];
export type ApiResponsePagedDtoOrganisation =
  components['schemas']['ApiResponsePagedDTOOrganisation'];
export type PagedDtoOrganisation = components['schemas']['PagedDTOOrganisation'];
export type ApiResponseListUser = components['schemas']['ApiResponseListUser'];
export type ApiResponseBoolean = components['schemas']['ApiResponseBoolean'];
export type ApiResponsePagedDtoInstructor = components['schemas']['ApiResponsePagedDTOInstructor'];
export type PagedDtoInstructor = components['schemas']['PagedDTOInstructor'];
export type ApiResponsePagedDtoInstructorSkill =
  components['schemas']['ApiResponsePagedDTOInstructorSkill'];
export type PagedDtoInstructorSkill = components['schemas']['PagedDTOInstructorSkill'];
export type ApiResponsePagedDtoInstructorProfessionalMembership =
  components['schemas']['ApiResponsePagedDTOInstructorProfessionalMembership'];
export type PagedDtoInstructorProfessionalMembership =
  components['schemas']['PagedDTOInstructorProfessionalMembership'];
export type ApiResponsePagedDtoInstructorExperience =
  components['schemas']['ApiResponsePagedDTOInstructorExperience'];
export type PagedDtoInstructorExperience = components['schemas']['PagedDTOInstructorExperience'];
export type ApiResponseListInstructorEducation =
  components['schemas']['ApiResponseListInstructorEducation'];
export type ApiResponseListInstructorDocument =
  components['schemas']['ApiResponseListInstructorDocument'];
export type ApiResponsePagedDtoInstructorEducation =
  components['schemas']['ApiResponsePagedDTOInstructorEducation'];
export type PagedDtoInstructorEducation = components['schemas']['PagedDTOInstructorEducation'];
export type ApiResponsePagedDtoInstructorDocument =
  components['schemas']['ApiResponsePagedDTOInstructorDocument'];
export type PagedDtoInstructorDocument = components['schemas']['PagedDTOInstructorDocument'];
export type ApiResponsePagedDtoCourse = components['schemas']['ApiResponsePagedDTOCourse'];
export type PagedDtoCourse = components['schemas']['PagedDTOCourse'];
export type ApiResponseListContentStatus = components['schemas']['ApiResponseListContentStatus'];
export type ApiResponsePagedDtoCourseRequirement =
  components['schemas']['ApiResponsePagedDTOCourseRequirement'];
export type PagedDtoCourseRequirement = components['schemas']['PagedDTOCourseRequirement'];
export type ApiResponsePagedDtoLesson = components['schemas']['ApiResponsePagedDTOLesson'];
export type PagedDtoLesson = components['schemas']['PagedDTOLesson'];
export type ApiResponseListLessonContent = components['schemas']['ApiResponseListLessonContent'];
export type ApiResponsePagedDtoCourseEnrollment =
  components['schemas']['ApiResponsePagedDTOCourseEnrollment'];
export type CourseEnrollment = components['schemas']['CourseEnrollment'];
export type PagedDtoCourseEnrollment = components['schemas']['PagedDTOCourseEnrollment'];
export type ApiResponseListCourseCategoryMapping =
  components['schemas']['ApiResponseListCourseCategoryMapping'];
export type CourseCategoryMapping = components['schemas']['CourseCategoryMapping'];
export type ApiResponsePagedDtoCourseAssessment =
  components['schemas']['ApiResponsePagedDTOCourseAssessment'];
export type PagedDtoCourseAssessment = components['schemas']['PagedDTOCourseAssessment'];
export type ApiResponsePagedDtoLessonContent =
  components['schemas']['ApiResponsePagedDTOLessonContent'];
export type PagedDtoLessonContent = components['schemas']['PagedDTOLessonContent'];
export type ApiResponsePagedDtoCourseCategoryMapping =
  components['schemas']['ApiResponsePagedDTOCourseCategoryMapping'];
export type PagedDtoCourseCategoryMapping = components['schemas']['PagedDTOCourseCategoryMapping'];
export type ApiResponsePagedDtoGradingLevel =
  components['schemas']['ApiResponsePagedDTOGradingLevel'];
export type PagedDtoGradingLevel = components['schemas']['PagedDTOGradingLevel'];
export type ApiResponseListDifficultyLevel =
  components['schemas']['ApiResponseListDifficultyLevel'];
export type ApiResponsePagedDtoContentType =
  components['schemas']['ApiResponsePagedDTOContentType'];
export type PagedDtoContentType = components['schemas']['PagedDTOContentType'];
export type ApiResponseListContentType = components['schemas']['ApiResponseListContentType'];
export type ApiResponsePagedDtoCategory = components['schemas']['ApiResponsePagedDTOCategory'];
export type PagedDtoCategory = components['schemas']['PagedDTOCategory'];
export type ApiResponseListCategory = components['schemas']['ApiResponseListCategory'];
export type ApiResponsePagedDtoCertificateTemplate =
  components['schemas']['ApiResponsePagedDTOCertificateTemplate'];
export type PagedDtoCertificateTemplate = components['schemas']['PagedDTOCertificateTemplate'];
export type ApiResponseListCertificate = components['schemas']['ApiResponseListCertificate'];
export type ApiResponsePagedDtoAssignment = components['schemas']['ApiResponsePagedDTOAssignment'];
export type PagedDtoAssignment = components['schemas']['PagedDTOAssignment'];
export type ApiResponseListAssignmentSubmission =
  components['schemas']['ApiResponseListAssignmentSubmission'];
export type ApiResponsePagedDtoAssignmentSubmission =
  components['schemas']['ApiResponsePagedDTOAssignmentSubmission'];
export type PagedDtoAssignmentSubmission = components['schemas']['PagedDTOAssignmentSubmission'];
export type AfricanPhoneNumber = components['schemas']['AfricanPhoneNumber'];
export type KenyanPhoneNumber = components['schemas']['KenyanPhoneNumber'];
export type NigerianPhoneNumber = components['schemas']['NigerianPhoneNumber'];
export type EastAfricanPhoneNumber = components['schemas']['EastAfricanPhoneNumber'];
export type WestAfricanPhoneNumber = components['schemas']['WestAfricanPhoneNumber'];
export type SouthernAfricanPhoneNumber = components['schemas']['SouthernAfricanPhoneNumber'];
export type InternationalPhoneNumber = components['schemas']['InternationalPhoneNumber'];
export type $defs = Record<string, never>;
export interface operations {
  getUserByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the user to retrieve. Must be an existing user identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUser'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the user to update. Must be an existing user identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['User'];
      };
    };
    responses: {
      /** @description User updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponseUser'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponseUser'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the user to delete. This will remove the user and all their organization relationships.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getTrainingBranchByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branch retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateTrainingBranch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TrainingBranch'];
      };
    };
    responses: {
      /** @description Training branch updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteTrainingBranch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branch deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getStudentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Student found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Student'];
        };
      };
      /** @description Student not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateStudent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Student'];
      };
    };
    responses: {
      /** @description Student updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Student'];
        };
      };
      /** @description Student not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteStudent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Student deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Student not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuizByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Quiz found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuiz'];
        };
      };
      /** @description Quiz not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quiz'];
      };
    };
    responses: {
      /** @description Quiz updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuiz'];
        };
      };
      /** @description Quiz not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Quiz deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Quiz not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateQuizQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QuizQuestion'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuizQuestion'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteQuizQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateQuestionOption: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
        optionUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QuizQuestionOption'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuizQuestionOption'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteQuestionOption: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
        optionUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getTrainingProgramByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Program found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Program not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateTrainingProgram: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': unknown;
      };
    };
    responses: {
      /** @description Program updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Program not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteTrainingProgram: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Program deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Program not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateProgramRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramRequirement'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseProgramRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteProgramRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateProgramCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramCourse'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseProgramCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  removeProgramCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getOrganisationByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to retrieve. Must be an existing organisation identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organisation retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseOrganisation'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateOrganisation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to update. Must be an existing organisation identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Organisation'];
      };
    };
    responses: {
      /** @description Organisation updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseOrganisation'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseOrganisation'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteOrganisation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to delete. This will soft-delete the organisation and all user relationships.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organisation deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getTrainingBranchByUuid_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to retrieve. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branch retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateTrainingBranch_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to update. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TrainingBranch'];
      };
    };
    responses: {
      /** @description Training branch updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteTrainingBranch_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to delete. This will soft-delete the branch and remove all user assignments.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branch deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updatePointOfContact: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to update the POC for. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
        /**
         * @description UUID of the user to set as point of contact. Must be assigned to the branch or be a member of the organization.
         * @example 550e8400-e29b-41d4-a716-446655440003
         */
        pocUserUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Point of contact updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description User is not eligible to be POC */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Training branch or user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Instructor found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Instructor'];
        };
      };
      /** @description Instructor not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructor: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Instructor'];
      };
    };
    responses: {
      /** @description Instructor updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Instructor'];
        };
      };
      /** @description Instructor not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructor: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Instructor deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Instructor not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructorSkill: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        skillUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorSkill'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorSkill'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructorSkill: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        skillUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructorMembership: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        membershipUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorProfessionalMembership'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorProfessionalMembership'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructorMembership: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        membershipUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructorExperience: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        experienceUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorExperience'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorExperience'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructorExperience: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        experienceUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructorEducation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        educationUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorEducation'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorEducation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructorEducation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        educationUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateInstructorDocument: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        documentUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorDocument'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorDocument'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteInstructorDocument: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
        documentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Course found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Course'];
      };
    };
    responses: {
      /** @description Course updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Invalid category UUIDs provided */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Course deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCourseRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseRequirement'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourseRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCourseRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        requirementUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseLesson: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the course containing the lesson
         * @example 123e4567-e89b-12d3-a456-426614174000
         */
        courseUuid: string;
        /**
         * @description UUID of the lesson to retrieve
         * @example 987fcdeb-51a2-43d7-8f9e-123456789abc
         */
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lesson retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Lesson'];
        };
      };
      /** @description Invalid UUID format provided */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponse'];
        };
      };
      /** @description Access denied - insufficient permissions to view lesson details */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponse'];
        };
      };
      /** @description Lesson not found or does not belong to the specified course */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCourseLesson: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Lesson'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseLesson'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCourseLesson: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateLessonContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
        contentUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LessonContent'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseLessonContent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteLessonContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
        contentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCourseAssessment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        assessmentUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseAssessment'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourseAssessment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCourseAssessment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        assessmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateGradingLevel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GradingLevel'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseGradingLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteGradingLevel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateDifficultyLevel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DifficultyLevel'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseDifficultyLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteDifficultyLevel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateContentType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentType'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseContentType'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteContentType: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCategoryByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Category'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCertificateByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCertificate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Certificate'];
      };
    };
    responses: {
      /** @description Certificate updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCertificate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateCertificateTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        templateUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CertificateTemplate'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificateTemplate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteCertificateTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        templateUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAssignmentByUuid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Assignment found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignment'];
        };
      };
      /** @description Assignment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  updateAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Assignment'];
      };
    };
    responses: {
      /** @description Assignment updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignment'];
        };
      };
      /** @description Assignment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  deleteAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Assignment deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Assignment not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  declineInvitation: {
    parameters: {
      query: {
        /**
         * @description Unique invitation token from the invitation email URL. This is the 64-character token that identifies the specific invitation.
         * @example abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd
         */
        token: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the user who is declining the invitation. The user's email must match the invitation recipient email for security.
         * @example 550e8400-e29b-41d4-a716-446655440005
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation declined successfully, notifications sent to inviter */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invalid token, expired invitation, or user email mismatch */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invitation token not found or user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  acceptInvitation: {
    parameters: {
      query: {
        /**
         * @description Unique invitation token from the invitation email URL. This is the 64-character token that identifies the specific invitation.
         * @example abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd
         */
        token: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the user who is accepting the invitation. The user's email must match the invitation recipient email for security.
         * @example 550e8400-e29b-41d4-a716-446655440005
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation accepted successfully, user added to organization/branch with specified role */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUser'];
        };
      };
      /** @description Invalid token, expired invitation, user email mismatch, or user already member of organization */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseUser'];
        };
      };
      /** @description Invitation token not found or user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  uploadProfileImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the user */
        userUuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Profile image file to upload
           */
          profileImage: string;
        };
      };
    };
    responses: {
      /** @description Profile Image Uploaded successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllTrainingBranches: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branches retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOTrainingBranch'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createTrainingBranch: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TrainingBranch'];
      };
    };
    responses: {
      /** @description Training branch created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllStudents: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOStudent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createStudent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Student'];
      };
    };
    responses: {
      /** @description Student created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Student'];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseStudent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllQuizzes: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuiz'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Quiz'];
      };
    };
    responses: {
      /** @description Quiz created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Quiz'];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuiz'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuizQuestions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListQuizQuestion'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addQuizQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QuizQuestion'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuizQuestion'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuestionOptions: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuizQuestionOption'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addQuestionOption: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
        questionUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['QuizQuestionOption'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseQuizQuestionOption'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  reorderQuizQuestions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllTrainingPrograms: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createTrainingProgram: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': unknown;
      };
    };
    responses: {
      /** @description Program created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  publishProgram: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Program published successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Program not ready for publishing */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramRequirements: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOProgramRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addProgramRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramRequirement'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseProgramRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramCourses: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addProgramCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProgramCourse'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseProgramCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllOrganisations: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organisations retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOOrganisation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createOrganisation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Organisation'];
      };
    };
    responses: {
      /** @description Organisation created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseOrganisation'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseOrganisation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getTrainingBranchesByOrganisation: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to get training branches for. Must be an existing organisation identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branches retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOTrainingBranch'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createTrainingBranch_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization to create the training branch in. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TrainingBranch'];
      };
    };
    responses: {
      /** @description Training branch created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseTrainingBranch'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  assignUserToBranch: {
    parameters: {
      query: {
        /**
         * @description Role/domain name for the user in this branch. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
         * @example student
         */
        domain_name: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to assign the user to. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
        /**
         * @description UUID of the user to assign to the training branch. Must be an existing user.
         * @example 550e8400-e29b-41d4-a716-446655440003
         */
        userUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User assigned to branch successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invalid domain name */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Training branch or user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  removeUserFromBranch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to remove the user from. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
        /**
         * @description UUID of the user to remove from the training branch. Must be currently assigned to the branch.
         * @example 550e8400-e29b-41d4-a716-446655440003
         */
        userUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User removed from branch successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Training branch or user not found, or user not assigned to branch */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getBranchInvitations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to retrieve invitations for. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Branch invitations retrieved successfully (may be empty list) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInvitation'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createBranchInvitation: {
    parameters: {
      query: {
        /**
         * @description Email address of the person being invited to the training branch. Must be a valid email format.
         * @example jane.smith@example.com
         */
        recipient_email: string;
        /**
         * @description Full name of the person being invited to the training branch. Used in email templates and records.
         * @example Jane Smith
         */
        recipient_name: string;
        /**
         * @description Role/domain name being offered to the recipient within the training branch. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
         * @example student
         */
        domain_name: string;
        /**
         * @description UUID of the user who is sending this branch invitation. Must be an existing user with appropriate permissions.
         * @example 550e8400-e29b-41d4-a716-446655440004
         */
        inviter_uuid: string;
        /**
         * @description Optional personal message or notes to include with the branch invitation email. Maximum 500 characters.
         * @example Join our downtown training center for hands-on learning!
         */
        notes?: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch the user is being invited to join. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Branch invitation created and email sent successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInvitation'];
        };
      };
      /** @description Invalid input data: duplicate invitation, invalid domain, or invalid branch */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInvitation'];
        };
      };
      /** @description Training branch, inviter user not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getOrganizationInvitations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization to retrieve invitations for. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organization invitations retrieved successfully (may be empty list) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInvitation'];
        };
      };
      /** @description Organization not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createOrganizationInvitation: {
    parameters: {
      query: {
        /**
         * @description Email address of the person being invited. Must be a valid email format.
         * @example john.doe@example.com
         */
        recipient_email: string;
        /**
         * @description Full name of the person being invited. Used in email templates and invitation records.
         * @example John Doe
         */
        recipient_name: string;
        /**
         * @description Role/domain name being offered to the recipient. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
         * @example instructor
         */
        domain_name: string;
        /**
         * @description Optional UUID of a training branch within the organization. If provided, the invitation will be branch-specific. Must belong to the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branch_uuid?: string;
        /**
         * @description UUID of the user who is sending this invitation. Must be an existing user with appropriate permissions in the organization.
         * @example 550e8400-e29b-41d4-a716-446655440004
         */
        inviter_uuid: string;
        /**
         * @description Optional personal message or notes to include with the invitation email. Maximum 500 characters.
         * @example Welcome to our training program! We're excited to have you join our team.
         */
        notes?: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organization the user is being invited to join. Must be an existing, active organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation created and email sent successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInvitation'];
        };
      };
      /** @description Invalid input data: duplicate invitation, invalid domain, or branch doesn't belong to organization */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInvitation'];
        };
      };
      /** @description Organization, inviter user, or training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  resendInvitation: {
    parameters: {
      query: {
        /**
         * @description UUID of the user requesting to resend the invitation. Must be either the original inviter or an administrator of the organization.
         * @example 550e8400-e29b-41d4-a716-446655440004
         */
        resender_uuid: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the invitation. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the invitation to resend. Must be a pending invitation that hasn't been accepted, declined, or cancelled.
         * @example 550e8400-e29b-41d4-a716-446655440000
         */
        invitationUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation email resent successfully with updated expiry date */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invitation is not pending, or user lacks permission to resend */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invitation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  sendExpiryReminders: {
    parameters: {
      query?: {
        /**
         * @description Number of hours before expiry to send reminder. Default is 24 hours.
         * @example 24
         */
        hoursBeforeExpiry?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expiry reminders sent successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInteger'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  markExpiredInvitations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expired invitations marked successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInteger'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllInstructors: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructor'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createInstructor: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Instructor'];
      };
    };
    responses: {
      /** @description Instructor created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Instructor'];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructor'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorSkills: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorSkill'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addInstructorSkill: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorSkill'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorSkill'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorMemberships: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorProfessionalMembership'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addInstructorMembership: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorProfessionalMembership'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorProfessionalMembership'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorExperience: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorExperience'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addInstructorExperience: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorExperience'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorExperience'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorEducation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInstructorEducation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addInstructorEducation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorEducation'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorEducation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInstructorDocuments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInstructorDocument'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addInstructorDocument: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['InstructorDocument'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorDocument'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  verifyDocument: {
    parameters: {
      query: {
        verifiedBy: string;
        verificationNotes?: string;
      };
      header?: never;
      path: {
        instructorUuid: string;
        documentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInstructorDocument'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllCourses: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createCourse: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Course'];
      };
    };
    responses: {
      /** @description Course created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Course'];
        };
      };
      /** @description Invalid request data or category not found */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  unpublishCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Course unpublished successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  uploadCourseThumbnail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the course to upload thumbnail for. Must be an existing course identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Thumbnail image file to upload. Supported formats: JPG, PNG, GIF, WebP. Maximum size: 5MB.
           */
          thumbnail: string;
        };
      };
    };
    responses: {
      /** @description Thumbnail uploaded successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Course'];
        };
      };
      /** @description Invalid file format or size exceeds limit */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  publishCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Course published successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Course not ready for publishing */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  uploadCourseIntroVideo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the course to upload intro video for. Must be an existing course identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Introduction video file to upload. Supported formats: MP4, WebM, MOV, AVI. Maximum size: 100MB.
           */
          intro_video: string;
        };
      };
    };
    responses: {
      /** @description Introduction video uploaded successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Course'];
        };
      };
      /** @description Invalid file format or size exceeds limit */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  uploadCourseBanner: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the course to upload banner for. Must be an existing course identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description Banner image file to upload. Supported formats: JPG, PNG, GIF, WebP. Maximum size: 10MB.
           */
          banner: string;
        };
      };
    };
    responses: {
      /** @description Banner uploaded successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Course'];
        };
      };
      /** @description Invalid file format or size exceeds limit */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ApiResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  archiveCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Course archived successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourse'];
        };
      };
      /** @description Course not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseRequirements: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addCourseRequirement: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseRequirement'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourseRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseLessons: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOLesson'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addCourseLesson: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Lesson'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseLesson'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getLessonContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListLessonContent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addLessonContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LessonContent'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseLessonContent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  reorderLessonContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        lessonUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseAssessments: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseAssessment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  addCourseAssessment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseAssessment'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCourseAssessment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllGradingLevels: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOGradingLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createGradingLevel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GradingLevel'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseGradingLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllDifficultyLevels: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListDifficultyLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createDifficultyLevel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DifficultyLevel'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseDifficultyLevel'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  reorderDifficultyLevels: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllContentTypes: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOContentType'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createContentType: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentType'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseContentType'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllCategories: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Category'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllCertificates: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createCertificate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Certificate'];
      };
    };
    responses: {
      /** @description Certificate created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Certificate'];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  revokeCertificate: {
    parameters: {
      query: {
        reason: string;
      };
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate revoked successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Certificate not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  generateCertificateUrl: {
    parameters: {
      query: {
        certificateUrl: string;
      };
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCertificateTemplates: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCertificateTemplate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createCertificateTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CertificateTemplate'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificateTemplate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  generateProgramCertificate: {
    parameters: {
      query: {
        studentUuid: string;
        programUuid: string;
        finalGrade: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate generated successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Student not eligible for certificate */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  generateCourseCertificate: {
    parameters: {
      query: {
        studentUuid: string;
        courseUuid: string;
        finalGrade: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate generated successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Student not eligible for certificate */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllAssignments: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOAssignment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  createAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['Assignment'];
      };
    };
    responses: {
      /** @description Assignment created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Assignment'];
        };
      };
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  submitAssignment: {
    parameters: {
      query: {
        enrollmentUuid: string;
        content: string;
        fileUrls?: string[];
      };
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  returnSubmission: {
    parameters: {
      query: {
        feedback: string;
      };
      header?: never;
      path: {
        assignmentUuid: string;
        submissionUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  gradeSubmission: {
    parameters: {
      query: {
        score: number;
        maxScore: number;
        comments?: string;
      };
      header?: never;
      path: {
        assignmentUuid: string;
        submissionUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAllUsers: {
    parameters: {
      query: {
        /** @description Pagination and sorting parameters. Default page size is 20. Supports sorting by fields like firstName, lastName, email, createdAt. Example: ?page=0&size=10&sort=firstName,asc */
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of all users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOUser'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInvitationsSentByUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the user to retrieve sent invitations for. Must be an existing user.
         * @example 550e8400-e29b-41d4-a716-446655440004
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User's sent invitations retrieved successfully (may be empty list) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInvitation'];
        };
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getPendingInvitationsForUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the user to get pending invitations for. The system will use the user's email to find invitations.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pending invitations retrieved successfully (may be empty list) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInvitation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  search: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of users matching the search criteria */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOUser'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProfileImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Name of the profile image file to retrieve. Format: profile_images_uuid.extension
         * @example profile_images_c5be646f-34c3-4782-9be4-dfbe93fe06b6.png
         */
        fileName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Profile image retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': string;
        };
      };
      /** @description Profile image not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  search_1: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of training branches matching the search criteria */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOTrainingBranch'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getTrainingBranchesByOrganisation_1: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        organisationUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Training branches retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOTrainingBranch'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchStudents: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Search results returned successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Page'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuizTotalPoints: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseBigDecimal'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuestionDistribution: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseMapStringLong'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getQuizAttempts: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        quizUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuizAttempt'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchQuizzes: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuiz'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchQuestions: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuizQuestion'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchAttempts: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOQuizAttempt'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramEnrollments: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOProgramEnrollment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getRequiredCourses: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getOptionalCourses: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramCompletionRate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseDouble'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramCertificates: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        programUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchTrainingPrograms: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchProgramRequirements: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOProgramRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getPublishedPrograms: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramsByInstructor: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getFreePrograms: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchProgramEnrollments: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOProgramEnrollment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchProgramCourses: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOProgramCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramsByCategory: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        categoryUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getActivePrograms: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getUsersByOrganisation: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to get users for. Must be an existing organisation identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOUser'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getUsersByOrganisationAndDomain: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organisation to get users for. Must be an existing organisation identifier.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description Domain name to filter users by. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
         * @example instructor
         */
        domainName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Filtered users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListUser'];
        };
      };
      /** @description Invalid domain name */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListUser'];
        };
      };
      /** @description Organisation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getBranchUsers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to get users for. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Branch users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListUser'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getBranchUsersByDomain: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the training branch. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the training branch to get users for. Must be a branch within the specified organization.
         * @example 550e8400-e29b-41d4-a716-446655440002
         */
        branchUuid: string;
        /**
         * @description Domain name to filter users by. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
         * @example student
         */
        domainName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Filtered branch users retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListUser'];
        };
      };
      /** @description Invalid domain name */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListUser'];
        };
      };
      /** @description Training branch not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  search_2: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of organisations matching the search criteria */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOOrganisation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  validateInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Unique invitation token to validate. This is the 64-character token from invitation emails.
         * @example abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd
         */
        token: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Validation completed - check response body for result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseBoolean'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getInvitationByToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Unique invitation token from the invitation email URL. This is the 64-character identifier for the specific invitation.
         * @example abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd
         */
        token: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation details retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInvitation'];
        };
      };
      /** @description Invitation token not found or invalid */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getPendingInvitationsForEmail: {
    parameters: {
      query: {
        /**
         * @description Email address to search for pending invitations. Must be a valid email format. Search is case-insensitive.
         * @example john.doe@example.com
         */
        email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Pending invitations retrieved successfully (may be empty list) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListInvitation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchSkills: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorSkill'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchInstructors: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Search results returned successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['Page'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchMemberships: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorProfessionalMembership'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchExperience: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorExperience'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchEducation: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorEducation'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchDocuments: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOInstructorDocument'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getStatusTransitions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Available transitions retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListContentStatus'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseEnrollments: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseEnrollment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseCompletionRate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseDouble'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseCategories: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCourseCategoryMapping'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  removeAllCategoriesFromCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchCourses: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchRequirements: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseRequirement'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getPublishedCourses: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseMedia: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description Name of the media file to retrieve. This is typically returned from the upload endpoints.
         * @example course_thumbnails_550e8400-e29b-41d4-a716-446655440001.jpg
         */
        fileName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Media file retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/octet-stream': unknown;
        };
      };
      /** @description Media file not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponse'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchLessons: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOLesson'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCoursesByInstructor: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchEnrollments: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseEnrollment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchLessonContent: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOLessonContent'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCoursesByCategory: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path: {
        categoryUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchCategoryMappings: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseCategoryMapping'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchAssessments: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourseAssessment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getActiveCourses: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCourse'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchContentTypes: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOContentType'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  checkMimeTypeSupport: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        mimeType: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseBoolean'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getMediaContentTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListContentType'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getSubCategories: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        parentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchCategories: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getRootCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCategory'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  verifyCertificate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        certificateNumber: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Certificate verification result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseBoolean'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchCertificateTemplates: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCertificateTemplate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getStudentCertificates: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getDownloadableCertificates: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchCertificates: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getRevokedCertificates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getProgramCertificates_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCertificateByNumber: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        certificateNumber: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getCourseCertificates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListCertificate'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAssignmentSubmissions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getHighPerformanceSubmissions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getAverageScore: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseDouble'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getSubmissionAnalytics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        assignmentUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseMapStringLong'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchSubmissions: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  searchAssignments: {
    parameters: {
      query: {
        searchParams: {
          [key: string]: string;
        };
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponsePagedDTOAssignment'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  getPendingGrading: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        instructorUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseListAssignmentSubmission'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  cancelInvitation: {
    parameters: {
      query: {
        /**
         * @description UUID of the user requesting to cancel the invitation. Must be either the original inviter or an administrator of the organization.
         * @example 550e8400-e29b-41d4-a716-446655440004
         */
        canceller_uuid: string;
      };
      header?: never;
      path: {
        /**
         * @description UUID of the organization that owns the invitation. Must be an existing organization.
         * @example 550e8400-e29b-41d4-a716-446655440001
         */
        uuid: string;
        /**
         * @description UUID of the invitation to cancel. Must be a pending invitation that hasn't been accepted, declined, or expired.
         * @example 550e8400-e29b-41d4-a716-446655440000
         */
        invitationUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invitation cancelled successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invitation is not pending, or user lacks permission to cancel */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseVoid'];
        };
      };
      /** @description Invitation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  cleanupOldInvitations: {
    parameters: {
      query?: {
        /**
         * @description Delete invitations older than this many days. Default is 90 days.
         * @example 90
         */
        daysOld?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Old invitations cleaned up successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseInteger'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
  removeCategoryFromCourse: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        courseUuid: string;
        categoryUuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ApiResponseString'];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseDTOVoid'];
        };
      };
    };
  };
}
