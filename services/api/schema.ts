/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get a user by UUID */
        get: operations["getUserByUuid"];
        /** Update a user by UUID */
        put: operations["updateUser"];
        post?: never;
        /** Delete a user by UUID */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get a user group by UUID */
        get: operations["getUserGroupByUuid"];
        /** Update a user group by UUID */
        put: operations["updateUserGroup"];
        post?: never;
        /** Delete a user group by UUID */
        delete: operations["deleteUserGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/training-sessions/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get training session by ID
         * @description Fetches a training session by its UUID.
         */
        get: operations["getTrainingSessionById"];
        /**
         * Update a training session
         * @description Updates an existing training session record.
         */
        put: operations["updateTrainingSession"];
        post?: never;
        /**
         * Delete a training session
         * @description Removes a training session record from the system.
         */
        delete: operations["deleteTrainingSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/students/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get student by ID
         * @description Fetches a student by their UUID.
         */
        get: operations["getStudentById"];
        /**
         * Update a student
         * @description Updates an existing student record.
         */
        put: operations["updateStudent"];
        post?: never;
        /**
         * Delete a student
         * @description Removes a student record from the system.
         */
        delete: operations["deleteStudent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get a role by UUID */
        get: operations["getRoleByUuid"];
        /** Update a role by UUID */
        put: operations["updateRole"];
        post?: never;
        /** Delete a role by UUID */
        delete: operations["deleteRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prerequisite/{prerequisiteId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteId: string;
            };
            cookie?: never;
        };
        get?: never;
        put: operations["updatePrerequisite"];
        post?: never;
        delete: operations["deletePrerequisite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prerequisite/group/{prerequisiteGroupId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteGroupId: string;
            };
            cookie?: never;
        };
        get?: never;
        put: operations["updatePrerequisiteGroup"];
        post?: never;
        delete: operations["deletePrerequisiteGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisations/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get an organisation by UUID */
        get: operations["getOrganisationByUuid"];
        /** Update an organisation by UUID */
        put: operations["updateOrganisation"];
        post?: never;
        /** Delete an organisation by UUID */
        delete: operations["deleteOrganisation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get instructor by UUID
         * @description Fetches an instructor by their UUID.
         */
        get: operations["getInstructorByUuid"];
        /**
         * Update an instructor
         * @description Updates an existing instructor record.
         */
        put: operations["updateInstructor"];
        post?: never;
        /**
         * Delete an instructor
         * @description Removes an instructor record from the system.
         */
        delete: operations["deleteInstructor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: string;
            };
            cookie?: never;
        };
        get: operations["getCourse"];
        put: operations["updateCourse"];
        post?: never;
        delete: operations["deleteCourse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{courseId}/lessons/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: string;
                lessonId: string;
            };
            cookie?: never;
        };
        get: operations["getLesson"];
        put: operations["updateLesson"];
        post?: never;
        delete: operations["deleteLesson"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: string;
            };
            cookie?: never;
        };
        get: operations["getCategory"];
        put: operations["updateCategory"];
        post?: never;
        delete: operations["deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get: operations["getAssessment"];
        put: operations["updateAssessment"];
        post?: never;
        delete: operations["deleteAssessment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments/{assessmentId}/questions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: string;
                id: string;
            };
            cookie?: never;
        };
        get: operations["getQuestion"];
        put: operations["updateQuestion"];
        post?: never;
        delete: operations["deleteQuestion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new user group */
        post: operations["createUserGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups/{uuid}/users": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get users for a user group */
        get: operations["getUsersForUserGroup"];
        put?: never;
        /** Add users to a user group */
        post: operations["addUsersToGroup"];
        /** Remove users from a user group */
        delete: operations["removeUsersFromGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups/{uuid}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        /** Get roles for a user group */
        get: operations["getRolesForUserGroup"];
        put?: never;
        /** Assign roles to a user group */
        post: operations["assignRolesToGroup"];
        /** Remove roles from a user group */
        delete: operations["removeRolesFromGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/training-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all training sessions
         * @description Fetches a paginated list of training sessions.
         */
        get: operations["getAllTrainingSessions"];
        put?: never;
        /**
         * Create a new training session
         * @description Saves a new training session record in the system.
         */
        post: operations["createTrainingSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all students
         * @description Fetches a paginated list of students.
         */
        get: operations["getAllStudents"];
        put?: never;
        /**
         * Create a new student
         * @description Saves a new student record in the system.
         */
        post: operations["createStudent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new role for an organisation */
        post: operations["createRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prerequisite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findPrerequisites"];
        put?: never;
        post: operations["createPrerequisite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prerequisite/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createPrerequisiteGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prerequisite-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPrerequisiteTypes"];
        put?: never;
        post: operations["createPrerequisiteType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all organisations */
        get: operations["getAllOrganisations"];
        put?: never;
        /** Create a new organisation */
        post: operations["createOrganisation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all instructors
         * @description Fetches a paginated list of instructors.
         */
        get: operations["getAllInstructors"];
        put?: never;
        /**
         * Create a new instructor
         * @description Saves a new instructor record in the system.
         */
        post: operations["createInstructor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCourses"];
        put?: never;
        post: operations["createCourse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{courseId}/lessons": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: string;
            };
            cookie?: never;
        };
        get: operations["getLessons"];
        put?: never;
        post: operations["createLesson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllCategories"];
        put?: never;
        post: operations["createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createAssessment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments/{assessmentId}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: string;
            };
            cookie?: never;
        };
        get: operations["getQuestions"];
        put?: never;
        post: operations["createQuestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search users
         * @description Fetches a paginated list of users based on optional filters. Supports pagination and sorting.
         */
        get: operations["search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/profile-image/{fileName}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileName: string;
            };
            cookie?: never;
        };
        /** Get user profile image by file name */
        get: operations["getProfileImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        /** Get users by organisation ID */
        get: operations["getUsersByOrganisation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search user groups
         * @description Fetches a paginated list of user groups based on optional filters. Supports pagination and sorting.
         */
        get: operations["search_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-groups/organisation/{organisationUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationUuid: string;
            };
            cookie?: never;
        };
        /** Get all user groups for an organisation */
        get: operations["getUserGroupsByOrganisation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/training-sessions/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search training sessions
         * @description Search for training sessions based on criteria.
         */
        get: operations["searchTrainingSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/students/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search students
         * @description Search for students based on criteria.
         */
        get: operations["searchStudents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/users/{userUuid}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userUuid: string;
            };
            cookie?: never;
        };
        /**
         * Get effective roles for a user
         * @description Fetches roles for a user, considering both direct and group assignments, with precedence given to user roles.
         */
        get: operations["getEffectiveRolesForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search roles
         * @description Fetches a paginated list of roles based on optional filters. Supports pagination and sorting.
         */
        get: operations["searchRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch all available permissions
         * @description Retrieve a list of all available permissions that can be assigned to roles.
         */
        get: operations["getAllPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/organisation/{organisationUid}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationUid: string;
            };
            cookie?: never;
        };
        /** Get all roles for a specific organisation */
        get: operations["getRolesByOrganisation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisations/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search organisations
         * @description Fetches a paginated list of organisations based on optional filters. Supports pagination and sorting.
         */
        get: operations["search_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instructors/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search instructors
         * @description Search for instructors based on criteria.
         */
        get: operations["searchInstructors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/thumbnail/{fileName}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileName: string;
            };
            cookie?: never;
        };
        get: operations["getCourseThumbnail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments/lesson/{lessonId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lessonId: string;
            };
            cookie?: never;
        };
        get: operations["getAssessmentsByLesson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assessments/course/{courseId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: string;
            };
            cookie?: never;
        };
        get: operations["getAssessmentsByCourse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ResponseDTOVoid: {
            data?: Record<string, never>;
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        PermissionDTO: {
            /** Format: uuid */
            uuid?: string;
            moduleName?: string;
            permissionName?: string;
            description?: string;
        };
        RoleDTO: {
            /** Format: uuid */
            uuid?: string;
            /** Format: uuid */
            organisation_uuid: string;
            name: string;
            description?: string;
            active?: boolean;
            permissions?: components["schemas"]["PermissionDTO"][];
            /** Format: date-time */
            readonly created_date?: string;
            /** Format: date-time */
            readonly modified_date?: string;
        };
        /**
         * @description Complete user profile information including personal details, authentication, and organizational data
         * @example {
         *       "uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
         *       "first_name": "Jane",
         *       "middle_name": "A.",
         *       "last_name": "Doe",
         *       "email": "jane.doe@example.com",
         *       "phone_number": "+254712345678",
         *       "profile_image_url": "https://example.com/images/jane.jpg",
         *       "dob": "1990-01-01",
         *       "username": "janedoe",
         *       "organisation_uuid": "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
         *       "active": true,
         *       "created_date": "2024-04-01T12:00:00",
         *       "modified_date": "2024-04-15T15:30:00",
         *       "gender": "FEMALE",
         *       "user_domain": [
         *         "Student",
         *         "Instructor"
         *       ],
         *       "roles": [
         *         {
         *           "uuid": "role-uuid-1",
         *           "name": "ADMIN",
         *           "description": "Administrator role"
         *         }
         *       ]
         *     }
         */
        User: {
            /**
             * Format: uuid
             * @description **[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.
             * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
             */
            readonly uuid?: string;
            /**
             * @description **[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.
             * @example Jane
             */
            first_name: string;
            /**
             * @description **[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.
             * @example A.
             */
            middle_name?: string;
            /**
             * @description **[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.
             * @example Doe
             */
            last_name: string;
            /**
             * Format: email
             * @description **[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.
             * @example jane.doe@example.com
             */
            email: string;
            /**
             * @description **[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.
             * @example +254712345678
             */
            phone_number: string;
            /**
             * Format: date
             * @description **[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.
             * @example 1990-01-01
             */
            dob: string;
            /**
             * @description **[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.
             * @example janedoe
             */
            username: string;
            /**
             * Format: uuid
             * @description **[OPTIONAL]** UUID of the organization this user belongs to. Links user to their organizational context and determines available resources. Can be null for system administrators.
             * @example b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv
             */
            organisation_uuid?: string;
            /**
             * @description **[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.
             * @default true
             * @example true
             */
            active: boolean;
            /**
             * @description **[OPTIONAL]** Set of roles assigned to this user. Determines user permissions and access levels within the system. Can be empty for users with no specific roles assigned.
             * @example [
             *       {
             *         "uuid": "role-uuid-1",
             *         "name": "ADMIN",
             *         "description": "Administrator role with full system access"
             *       },
             *       {
             *         "uuid": "role-uuid-2",
             *         "name": "USER",
             *         "description": "Standard user role with basic access"
             *       }
             *     ]
             */
            roles?: components["schemas"]["RoleDTO"][];
            /**
             * @description **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
             * @example FEMALE
             * @enum {string}
             */
            gender?: "MALE" | "FEMALE" | "OTHER" | "PREFER_NOT_TO_SAY";
            /**
             * @description **[OPTIONAL]** List of domain roles that define the user's functional areas within the system. Determines available features and workflows. Can contain multiple values.
             * @example [
             *       "Student",
             *       "Instructor"
             *     ]
             * @enum {array}
             */
            user_domain: "student" | "instructor" | "admin" | "organisation_user";
            displayName?: string;
            fullName?: string;
            /**
             * Format: uri
             * @description **[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.
             * @example https://example.com/images/jane.jpg
             */
            readonly profile_image_url?: string;
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.
             * @example 2024-04-01T12:00:00
             */
            readonly created_date?: string;
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.
             * @example 2024-04-15T15:30:00
             */
            readonly modified_date?: string;
        };
        ApiResponseUser: {
            success?: boolean;
            data?: components["schemas"]["User"];
            message?: string;
            error?: Record<string, never>;
        };
        UserGroupDTO: {
            /** Format: uuid */
            uuid?: string;
            /** Format: uuid */
            organisation_uuid?: string;
            name: string;
            active: boolean;
            /** Format: date-time */
            readonly created_date?: string;
            /** Format: date-time */
            readonly modified_date?: string;
        };
        ApiResponseUserGroupDTO: {
            success?: boolean;
            data?: components["schemas"]["UserGroupDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        TrainingSessionDTO: {
            /** Format: uuid */
            uuid?: string;
            /** Format: uuid */
            course_uuid: string;
            /** Format: uuid */
            trainer_uuid: string;
            /** Format: date-time */
            start_date: string;
            /** Format: date-time */
            end_date: string;
            class_mode: string;
            location?: string;
            meeting_link?: string;
            schedule?: string;
            /** Format: int32 */
            capacity_limit?: number;
            /** Format: int32 */
            current_enrollment_count?: number;
            /** Format: int32 */
            waiting_list_count?: number;
            group_or_individual: string;
        };
        /**
         * @description Student profile information including guardian contacts and academic details. Links to a base user account.
         * @example {
         *       "uuid": "s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv",
         *       "user_uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
         *       "first_guardian_name": "John Doe",
         *       "first_guardian_mobile": "+254712345678",
         *       "second_guardian_name": "Jane Doe",
         *       "second_guardian_mobile": "+254787654321",
         *       "created_date": "2024-04-01T12:00:00",
         *       "created_by": "admin@sarafrika.com",
         *       "updated_date": "2024-04-15T15:30:00",
         *       "updated_by": "admin@sarafrika.com"
         *     }
         */
        Student: {
            /**
             * Format: uuid
             * @description **[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.
             * @example s1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv
             */
            readonly uuid?: string;
            /**
             * Format: uuid
             * @description **[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.
             * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
             */
            user_uuid: string;
            /**
             * @description **[REQUIRED]** Full name of the primary guardian/parent. This is the main emergency contact for the student.
             * @example John Doe
             */
            first_guardian_name: string;
            /**
             * @description **[REQUIRED]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.
             * @example +254712345678
             */
            first_guardian_mobile: string;
            /**
             * @description **[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.
             * @example Jane Doe
             */
            second_guardian_name?: string;
            /**
             * @description **[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.
             * @example +254787654321
             */
            second_guardian_mobile?: string;
            primaryGuardianContact?: string;
            secondaryGuardianContact?: string;
            allGuardianContacts?: string[];
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.
             * @example 2024-04-01T12:00:00
             */
            readonly created_date?: string;
            /**
             * @description **[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.
             * @example admin@sarafrika.com
             */
            readonly created_by?: string;
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.
             * @example 2024-04-15T15:30:00
             */
            readonly updated_date?: string;
            /**
             * @description **[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.
             * @example admin@sarafrika.com
             */
            readonly updated_by?: string;
        };
        ApiResponseRoleDTO: {
            success?: boolean;
            data?: components["schemas"]["RoleDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        UpdatePrerequisiteRequestDTO: {
            /** Format: int64 */
            prerequisiteTypeId?: number;
            /** Format: int64 */
            courseId?: number;
            /** Format: int64 */
            requiredForCourseId?: number;
            /** Format: double */
            minimumScore?: number;
        };
        UpdatePrerequisiteGroupRequestDTO: {
            /** Format: int64 */
            courseId?: number;
            /** @enum {string} */
            groupType?: "AND" | "OR";
            prerequisiteIds?: number[];
        };
        OrganisationDTO: {
            /** Format: uuid */
            uuid?: string;
            name: string;
            description?: string;
            active?: boolean;
            code?: string;
            readonly slug?: string;
            domain: string;
            /** Format: date-time */
            readonly created_date?: string;
            /** Format: date-time */
            readonly updated_date?: string;
        };
        ApiResponseOrganisationDTO: {
            success?: boolean;
            data?: components["schemas"]["OrganisationDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        /**
         * @description Comprehensive instructor profile including professional qualifications, training experience, certifications, and location data for educational service delivery
         * @example {
         *       "uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
         *       "user_uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
         *       "full_name": "Dr. Jane Smith",
         *       "latitude": -1.2921,
         *       "longitude": 36.8219,
         *       "website": "https://drjanesmith.com",
         *       "bio": "Experienced educator with 10+ years in software development training and mentorship.",
         *       "professional_headline": "Senior Software Development Instructor & Tech Consultant",
         *       "professional_bodies": [
         *         {
         *           "uuid": "pb-uuid-1",
         *           "name": "IEEE",
         *           "membership_number": "12345678"
         *         }
         *       ],
         *       "training_experiences": [
         *         {
         *           "uuid": "te-uuid-1",
         *           "title": "Full Stack Development Bootcamp",
         *           "duration_months": 6,
         *           "organization": "Tech Academy"
         *         }
         *       ],
         *       "certifications": [
         *         {
         *           "uuid": "cert-uuid-1",
         *           "name": "AWS Certified Solutions Architect",
         *           "issuing_organization": "Amazon Web Services",
         *           "issue_date": "2023-01-15"
         *         }
         *       ],
         *       "created_date": "2024-04-01T12:00:00",
         *       "created_by": "admin@sarafrika.com",
         *       "updated_date": "2024-04-15T15:30:00",
         *       "updated_by": "admin@sarafrika.com"
         *     }
         */
        Instructor: {
            /**
             * Format: uuid
             * @description **[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.
             * @example i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl
             */
            readonly uuid?: string;
            /**
             * Format: uuid
             * @description **[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.
             * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
             */
            user_uuid: string;
            /**
             * @description **[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
             * @example -1.2921
             */
            latitude?: number;
            /**
             * @description **[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
             * @example 36.8219
             */
            longitude?: number;
            /**
             * Format: uri
             * @description **[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.
             * @example https://drjanesmith.com
             */
            website?: string;
            /**
             * @description **[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.
             * @example Experienced educator with 10+ years in software development training and mentorship. Specializes in full-stack development, cloud architecture, and agile methodologies.
             */
            bio?: string;
            /**
             * @description **[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.
             * @example Senior Software Development Instructor & Tech Consultant
             */
            professional_headline?: string;
            /**
             * @description **[OPTIONAL]** List of professional bodies and associations the instructor is affiliated with. Used to verify professional standing and credibility.
             * @example [
             *       {
             *         "uuid": "pb-uuid-1",
             *         "name": "Institute of Electrical and Electronics Engineers (IEEE)",
             *         "membership_number": "12345678",
             *         "membership_type": "Professional Member",
             *         "status": "Active"
             *       }
             *     ]
             */
            professional_bodies?: components["schemas"]["ProfessionalBodyDTO"][];
            /**
             * @description **[OPTIONAL]** Detailed training and teaching experience history. Documents instructor's practical experience in delivering educational content.
             * @example [
             *       {
             *         "uuid": "te-uuid-1",
             *         "title": "Full Stack Development Bootcamp",
             *         "organization": "Tech Academy Kenya",
             *         "duration_months": 6,
             *         "participants_trained": 150,
             *         "start_date": "2022-01-01",
             *         "end_date": "2023-12-31"
             *       }
             *     ]
             */
            training_experiences?: components["schemas"]["TrainingExperienceDTO"][];
            /**
             * @description **[OPTIONAL]** Professional certifications and qualifications held by the instructor. Used to verify expertise and authorize teaching specific subjects.
             * @example [
             *       {
             *         "uuid": "cert-uuid-1",
             *         "name": "AWS Certified Solutions Architect - Professional",
             *         "issuing_organization": "Amazon Web Services",
             *         "issue_date": "2023-01-15",
             *         "expiry_date": "2026-01-15",
             *         "credential_id": "AWS-SAP-12345"
             *       }
             *     ]
             */
            certifications?: components["schemas"]["UserCertificationDTO"][];
            /** Format: int32 */
            totalProfessionalCredentials?: number;
            formattedLocation?: string;
            profileComplete?: boolean;
            /**
             * @description **[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.
             * @example Dr. Jane Smith
             */
            readonly full_name?: string;
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.
             * @example 2024-04-01T12:00:00
             */
            readonly created_date?: string;
            /**
             * @description **[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.
             * @example admin@sarafrika.com
             */
            readonly created_by?: string;
            /**
             * Format: date-time
             * @description **[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.
             * @example 2024-04-15T15:30:00
             */
            readonly updated_date?: string;
            /**
             * @description **[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.
             * @example admin@sarafrika.com
             */
            readonly updated_by?: string;
        };
        ProfessionalBodyDTO: {
            /**
             * @description Name of the professional body
             * @example Kenya Medical Association
             */
            body_name: string;
            /**
             * @description Membership number assigned by the body
             * @example KM123456
             */
            membership_no: string;
            /**
             * Format: date
             * @description Date when the user became a member (ISO 8601 format)
             * @example 2020-06-15
             */
            member_since: string;
            /**
             * Format: uuid
             * @description UUID of the user associated with this membership
             * @example f4b4e0c2-8c7b-4d2b-b2a1-198c7a7f3df0
             */
            user_uuid: string;
        };
        TrainingExperienceDTO: {
            /**
             * @description Name of the organisation where the experience was gained
             * @example World Health Organization
             */
            organisation_name: string;
            /**
             * @description Job title held during the training or experience
             * @example Health Program Analyst
             */
            job_title: string;
            /**
             * @description Description of responsibilities and tasks performed
             * @example Managed regional health analytics dashboard and provided training to local analysts.
             */
            work_description: string;
            /**
             * Format: date
             * @description Start date of the training/experience (ISO 8601 format)
             * @example 2021-01-10
             */
            start_date: string;
            /**
             * Format: date
             * @description End date of the training/experience (ISO 8601 format)
             * @example 2022-12-20
             */
            end_date: string;
            /**
             * Format: uuid
             * @description UUID of the user associated with this training/experience
             * @example ca4f98b1-11d1-4a74-b4fa-120b5cbeed2b
             */
            user_uuid: string;
        };
        UserCertificationDTO: {
            /**
             * Format: date
             * @description Date the certificate was issued (ISO 8601 format)
             * @example 2024-03-10
             */
            issued_date: string;
            /**
             * @description Name of the issuing organization
             * @example Coursera
             */
            issued_by: string;
            /**
             * @description URL pointing to the certificate resource
             * @example https://example.com/certificate/12345
             */
            certificate_url: string;
            /**
             * Format: uuid
             * @description UUID of the user who owns this certificate
             * @example d2e6f6c4-3d44-11ee-be56-0242ac120002
             */
            user_uuid: string;
        };
        PricingRequestDTO: {
            isFree?: boolean;
            originalPrice?: number;
            salePrice?: number;
        };
        UpdateCourseCategoryRequestDTO: {
            /** Format: int64 */
            id?: number;
            name: string;
            description?: string;
        };
        UpdateCourseLearningObjectiveRequestDTO: {
            /** Format: int64 */
            id?: number;
            objective?: string;
        };
        UpdateCourseRequestDTO: {
            name?: string;
            description?: string;
            thumbnailUrl?: string;
            durationHours?: number;
            /** @enum {string} */
            difficultyLevel?: "beginner" | "intermediate" | "advanced";
            /** Format: int32 */
            minAge?: number;
            /** Format: int32 */
            maxAge?: number;
            pricing?: components["schemas"]["PricingRequestDTO"];
            learningObjectives?: components["schemas"]["UpdateCourseLearningObjectiveRequestDTO"][];
            categories?: components["schemas"]["UpdateCourseCategoryRequestDTO"][];
        };
        CategoryResponseDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
        };
        CourseLearningObjectiveResponseDTO: {
            /** Format: int64 */
            id?: number;
            objective?: string;
        };
        CourseResponseDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            code?: string;
            description?: string;
            durationHours?: number;
            /** @enum {string} */
            difficultyLevel?: "beginner" | "intermediate" | "advanced";
            /** Format: int32 */
            minAge?: number;
            /** Format: int32 */
            maxAge?: number;
            /** Format: int32 */
            classLimit?: number;
            pricing?: components["schemas"]["PricingResponseDTO"];
            learningObjectives?: components["schemas"]["CourseLearningObjectiveResponseDTO"][];
            categories?: components["schemas"]["CategoryResponseDTO"][];
        };
        PricingResponseDTO: {
            isFree?: boolean;
            originalPrice?: number;
            salePrice?: number;
        };
        ResponseDTOCourseResponseDTO: {
            data?: components["schemas"]["CourseResponseDTO"];
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        UpdateLessonRequestDTO: {
            title?: string;
            description?: string;
            content?: string;
            /** Format: int32 */
            lessonOrder?: number;
            isPublished?: boolean;
        };
        UpdateCategoryRequestDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
        };
        ResponseDTOCategoryResponseDTO: {
            data?: components["schemas"]["CategoryResponseDTO"];
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        UpdateAssessmentRequestDTO: {
            title?: string;
            type?: string;
            description?: string;
            /** Format: int32 */
            maximumScore?: number;
            /** Format: int32 */
            passingScore?: number;
            /** Format: date-time */
            dueDate?: string;
            /** Format: int32 */
            timeLimit?: number;
            /** Format: int64 */
            courseId?: number;
            /** Format: int64 */
            lessonId?: number;
        };
        UpdateAnswerOptionRequestDTO: {
            optionText?: string;
            correct?: boolean;
            /** Format: int32 */
            orderInQuestion?: number;
        };
        UpdateQuestionRequestDTO: {
            description?: string;
            questionType?: string;
            /** Format: int32 */
            pointValue?: number;
            /** Format: int32 */
            orderInAssessment?: number;
            answerOptions?: components["schemas"]["UpdateAnswerOptionRequestDTO"][];
        };
        ApiResponseVoid: {
            success?: boolean;
            data?: Record<string, never>;
            message?: string;
            error?: Record<string, never>;
        };
        ApiResponseTrainingSessionDTO: {
            success?: boolean;
            data?: components["schemas"]["TrainingSessionDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        ApiResponseStudent: {
            success?: boolean;
            data?: components["schemas"]["Student"];
            message?: string;
            error?: Record<string, never>;
        };
        CreatePrerequisiteRequestDTO: {
            /** Format: int64 */
            prerequisiteTypeId?: number;
            /** Format: int64 */
            courseId?: number;
            /** Format: int64 */
            requiredForCourseId?: number;
            /** Format: double */
            minimumScore?: number;
        };
        CreatePrerequisiteGroupRequestDTO: {
            /** Format: int64 */
            courseId?: number;
            /** @enum {string} */
            groupType?: "AND" | "OR";
            prerequisiteIds?: number[];
        };
        CreatePrerequisiteTypeRequestDTO: {
            name?: string;
        };
        ApiResponseInstructor: {
            success?: boolean;
            data?: components["schemas"]["Instructor"];
            message?: string;
            error?: Record<string, never>;
        };
        CreateCourseLearningObjectiveRequestDTO: {
            objective?: string;
        };
        CreateCourseRequestDTO: {
            name?: string;
            description?: string;
            thumbnailUrl?: string;
            /** @enum {string} */
            difficultyLevel?: "beginner" | "intermediate" | "advanced";
            durationHours?: number;
            /** Format: int32 */
            minAge?: number;
            /** Format: int32 */
            maxAge?: number;
            /** Format: int32 */
            classLimit?: number;
            pricing?: components["schemas"]["PricingRequestDTO"];
            learningObjectives?: components["schemas"]["CreateCourseLearningObjectiveRequestDTO"][];
            categories?: components["schemas"]["UpdateCourseCategoryRequestDTO"][];
            instructorIds?: number[];
        };
        CreateLessonContentDTO: {
            title?: string;
            /** Format: int32 */
            displayOrder?: number;
            /** Format: int32 */
            duration?: number;
            contentType?: string;
            contentText?: string;
        };
        CreateLessonRequestDTO: {
            title?: string;
            description?: string;
            /** Format: int32 */
            lessonOrder?: number;
            isPublished?: boolean;
            content?: components["schemas"]["CreateLessonContentDTO"][];
            resources?: components["schemas"]["CreateLessonResourceRequestDTO"][];
        };
        CreateLessonResourceRequestDTO: {
            title?: string;
            resourceUrl?: string;
            /** Format: int32 */
            displayOrder?: number;
        };
        LessonContentResponseDTO: {
            /** Format: int64 */
            id?: number;
            title?: string;
            /** Format: int32 */
            displayOrder?: number;
            /** Format: int32 */
            duration?: number;
            contentType?: string;
        };
        LessonResourceResponseDTO: {
            /** Format: int64 */
            id?: number;
            title?: string;
            resourceUrl?: string;
            /** Format: int32 */
            displayOrder?: number;
        };
        LessonResponseDTO: {
            /** Format: int64 */
            id?: number;
            title?: string;
            description?: string;
            /** Format: int32 */
            lessonOrder?: number;
            isPublished?: boolean;
            content?: components["schemas"]["LessonContentResponseDTO"][];
            resources?: components["schemas"]["LessonResourceResponseDTO"][];
        };
        ResponseDTOLessonResponseDTO: {
            data?: components["schemas"]["LessonResponseDTO"];
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        CreateCategoryRequestDTO: {
            name: string;
            description?: string;
        };
        CreateAssessmentRequestDTO: {
            title?: string;
            type?: string;
            description?: string;
            /** Format: int32 */
            maximumScore?: number;
            /** Format: int32 */
            passingScore?: number;
            /** Format: date-time */
            dueDate?: string;
            /** Format: int32 */
            timeLimit?: number;
            /** Format: int64 */
            courseId?: number;
            /** Format: int64 */
            lessonId?: number;
        };
        CreateAnswerOptionRequestDTO: {
            optionText?: string;
            correct?: boolean;
            /** Format: int32 */
            orderInQuestion?: number;
        };
        CreateQuestionRequestDTO: {
            description?: string;
            questionType?: string;
            /** Format: int32 */
            pointValue?: number;
            /** Format: int32 */
            orderInAssessment?: number;
            answerOptions?: components["schemas"]["CreateAnswerOptionRequestDTO"][];
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        ApiResponsePagedDTOUser: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOUser"];
            message?: string;
            error?: Record<string, never>;
        };
        PageLinks: {
            first?: string;
            previous?: string;
            self?: string;
            next?: string;
            last?: string;
        };
        PageMetadata: {
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            hasNext?: boolean;
            hasPrevious?: boolean;
            first?: boolean;
            last?: boolean;
        };
        PagedDTOUser: {
            content?: components["schemas"]["User"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        ApiResponsePagedDTORoleDTO: {
            success?: boolean;
            data?: components["schemas"]["PagedDTORoleDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTORoleDTO: {
            content?: components["schemas"]["RoleDTO"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        ApiResponsePagedDTOUserGroupDTO: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOUserGroupDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTOUserGroupDTO: {
            content?: components["schemas"]["UserGroupDTO"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        ApiResponsePagedDTOTrainingSessionDTO: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOTrainingSessionDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTOTrainingSessionDTO: {
            content?: components["schemas"]["TrainingSessionDTO"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        Page: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            size?: number;
            content?: Record<string, never>[];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            unpaged?: boolean;
        };
        SortObject: {
            sorted?: boolean;
            empty?: boolean;
            unsorted?: boolean;
        };
        ApiResponsePagedDTOStudent: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOStudent"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTOStudent: {
            content?: components["schemas"]["Student"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        ApiResponseListRoleDTO: {
            success?: boolean;
            data?: components["schemas"]["RoleDTO"][];
            message?: string;
            error?: Record<string, never>;
        };
        ApiResponseListPermissionDTO: {
            success?: boolean;
            data?: components["schemas"]["PermissionDTO"][];
            message?: string;
            error?: Record<string, never>;
        };
        PrerequisiteRequestDTO: {
            /** Format: int64 */
            courseId?: number;
            /** Format: int64 */
            lessonId?: number;
        };
        PrerequisiteResponseDTO: {
            /** Format: int64 */
            id?: number;
            prerequisiteType?: components["schemas"]["PrerequisiteTypeResponseDTO"];
            course?: components["schemas"]["CourseResponseDTO"];
            requiredForCourse?: components["schemas"]["CourseResponseDTO"];
            /** Format: double */
            minimumScore?: number;
        };
        PrerequisiteTypeResponseDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        ResponsePageableDTOPrerequisiteResponseDTO: {
            data?: components["schemas"]["PrerequisiteResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        ResponsePageableDTOPrerequisiteTypeResponseDTO: {
            data?: components["schemas"]["PrerequisiteTypeResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        ApiResponsePagedDTOOrganisationDTO: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOOrganisationDTO"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTOOrganisationDTO: {
            content?: components["schemas"]["OrganisationDTO"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        ApiResponsePagedDTOInstructor: {
            success?: boolean;
            data?: components["schemas"]["PagedDTOInstructor"];
            message?: string;
            error?: Record<string, never>;
        };
        PagedDTOInstructor: {
            content?: components["schemas"]["Instructor"][];
            metadata?: components["schemas"]["PageMetadata"];
            links?: components["schemas"]["PageLinks"];
        };
        CourseRequestDTO: {
            name?: string;
        };
        ResponsePageableDTOCourseResponseDTO: {
            data?: components["schemas"]["CourseResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        ResponsePageableDTOLessonResponseDTO: {
            data?: components["schemas"]["LessonResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        CategoryRequestDTO: {
            name?: string;
        };
        ResponsePageableDTOCategoryResponseDTO: {
            data?: components["schemas"]["CategoryResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        AssessmentResponseDTO: {
            /** Format: int64 */
            id?: number;
            title?: string;
            type?: string;
            description?: string;
            /** Format: int32 */
            maximumScore?: number;
            /** Format: int32 */
            passingScore?: number;
            /** Format: date-time */
            dueDate?: string;
            /** Format: int32 */
            timeLimit?: number;
        };
        ResponseDTOAssessmentResponseDTO: {
            data?: components["schemas"]["AssessmentResponseDTO"];
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        AnswerOptionResponseDTO: {
            /** Format: int64 */
            id?: number;
            optionText?: string;
            correct?: boolean;
            /** Format: int32 */
            orderInQuestion?: number;
        };
        QuestionResponseDTO: {
            /** Format: int64 */
            id?: number;
            description?: string;
            questionType?: string;
            /** Format: int32 */
            pointValue?: number;
            /** Format: int32 */
            orderInAssessment?: number;
            answerOptions?: components["schemas"]["AnswerOptionResponseDTO"][];
        };
        ResponsePageableDTOQuestionResponseDTO: {
            data?: components["schemas"]["QuestionResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
        ResponseDTOQuestionResponseDTO: {
            data?: components["schemas"]["QuestionResponseDTO"];
            /** Format: int32 */
            status?: number;
            message?: string;
            errors?: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp?: string;
        };
        ResponsePageableDTOAssessmentResponseDTO: {
            data?: components["schemas"]["AssessmentResponseDTO"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            status?: number;
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type ResponseDtoVoid = components['schemas']['ResponseDTOVoid'];
export type PermissionDto = components['schemas']['PermissionDTO'];
export type RoleDto = components['schemas']['RoleDTO'];
export type User = components['schemas']['User'];
export type ApiResponseUser = components['schemas']['ApiResponseUser'];
export type UserGroupDto = components['schemas']['UserGroupDTO'];
export type ApiResponseUserGroupDto = components['schemas']['ApiResponseUserGroupDTO'];
export type TrainingSessionDto = components['schemas']['TrainingSessionDTO'];
export type Student = components['schemas']['Student'];
export type ApiResponseRoleDto = components['schemas']['ApiResponseRoleDTO'];
export type UpdatePrerequisiteRequestDto = components['schemas']['UpdatePrerequisiteRequestDTO'];
export type UpdatePrerequisiteGroupRequestDto = components['schemas']['UpdatePrerequisiteGroupRequestDTO'];
export type OrganisationDto = components['schemas']['OrganisationDTO'];
export type ApiResponseOrganisationDto = components['schemas']['ApiResponseOrganisationDTO'];
export type Instructor = components['schemas']['Instructor'];
export type ProfessionalBodyDto = components['schemas']['ProfessionalBodyDTO'];
export type TrainingExperienceDto = components['schemas']['TrainingExperienceDTO'];
export type UserCertificationDto = components['schemas']['UserCertificationDTO'];
export type PricingRequestDto = components['schemas']['PricingRequestDTO'];
export type UpdateCourseCategoryRequestDto = components['schemas']['UpdateCourseCategoryRequestDTO'];
export type UpdateCourseLearningObjectiveRequestDto = components['schemas']['UpdateCourseLearningObjectiveRequestDTO'];
export type UpdateCourseRequestDto = components['schemas']['UpdateCourseRequestDTO'];
export type CategoryResponseDto = components['schemas']['CategoryResponseDTO'];
export type CourseLearningObjectiveResponseDto = components['schemas']['CourseLearningObjectiveResponseDTO'];
export type CourseResponseDto = components['schemas']['CourseResponseDTO'];
export type PricingResponseDto = components['schemas']['PricingResponseDTO'];
export type ResponseDtoCourseResponseDto = components['schemas']['ResponseDTOCourseResponseDTO'];
export type UpdateLessonRequestDto = components['schemas']['UpdateLessonRequestDTO'];
export type UpdateCategoryRequestDto = components['schemas']['UpdateCategoryRequestDTO'];
export type ResponseDtoCategoryResponseDto = components['schemas']['ResponseDTOCategoryResponseDTO'];
export type UpdateAssessmentRequestDto = components['schemas']['UpdateAssessmentRequestDTO'];
export type UpdateAnswerOptionRequestDto = components['schemas']['UpdateAnswerOptionRequestDTO'];
export type UpdateQuestionRequestDto = components['schemas']['UpdateQuestionRequestDTO'];
export type ApiResponseVoid = components['schemas']['ApiResponseVoid'];
export type ApiResponseTrainingSessionDto = components['schemas']['ApiResponseTrainingSessionDTO'];
export type ApiResponseStudent = components['schemas']['ApiResponseStudent'];
export type CreatePrerequisiteRequestDto = components['schemas']['CreatePrerequisiteRequestDTO'];
export type CreatePrerequisiteGroupRequestDto = components['schemas']['CreatePrerequisiteGroupRequestDTO'];
export type CreatePrerequisiteTypeRequestDto = components['schemas']['CreatePrerequisiteTypeRequestDTO'];
export type ApiResponseInstructor = components['schemas']['ApiResponseInstructor'];
export type CreateCourseLearningObjectiveRequestDto = components['schemas']['CreateCourseLearningObjectiveRequestDTO'];
export type CreateCourseRequestDto = components['schemas']['CreateCourseRequestDTO'];
export type CreateLessonContentDto = components['schemas']['CreateLessonContentDTO'];
export type CreateLessonRequestDto = components['schemas']['CreateLessonRequestDTO'];
export type CreateLessonResourceRequestDto = components['schemas']['CreateLessonResourceRequestDTO'];
export type LessonContentResponseDto = components['schemas']['LessonContentResponseDTO'];
export type LessonResourceResponseDto = components['schemas']['LessonResourceResponseDTO'];
export type LessonResponseDto = components['schemas']['LessonResponseDTO'];
export type ResponseDtoLessonResponseDto = components['schemas']['ResponseDTOLessonResponseDTO'];
export type CreateCategoryRequestDto = components['schemas']['CreateCategoryRequestDTO'];
export type CreateAssessmentRequestDto = components['schemas']['CreateAssessmentRequestDTO'];
export type CreateAnswerOptionRequestDto = components['schemas']['CreateAnswerOptionRequestDTO'];
export type CreateQuestionRequestDto = components['schemas']['CreateQuestionRequestDTO'];
export type Pageable = components['schemas']['Pageable'];
export type ApiResponsePagedDtoUser = components['schemas']['ApiResponsePagedDTOUser'];
export type PageLinks = components['schemas']['PageLinks'];
export type PageMetadata = components['schemas']['PageMetadata'];
export type PagedDtoUser = components['schemas']['PagedDTOUser'];
export type ApiResponsePagedDtoRoleDto = components['schemas']['ApiResponsePagedDTORoleDTO'];
export type PagedDtoRoleDto = components['schemas']['PagedDTORoleDTO'];
export type ApiResponsePagedDtoUserGroupDto = components['schemas']['ApiResponsePagedDTOUserGroupDTO'];
export type PagedDtoUserGroupDto = components['schemas']['PagedDTOUserGroupDTO'];
export type ApiResponsePagedDtoTrainingSessionDto = components['schemas']['ApiResponsePagedDTOTrainingSessionDTO'];
export type PagedDtoTrainingSessionDto = components['schemas']['PagedDTOTrainingSessionDTO'];
export type Page = components['schemas']['Page'];
export type PageableObject = components['schemas']['PageableObject'];
export type SortObject = components['schemas']['SortObject'];
export type ApiResponsePagedDtoStudent = components['schemas']['ApiResponsePagedDTOStudent'];
export type PagedDtoStudent = components['schemas']['PagedDTOStudent'];
export type ApiResponseListRoleDto = components['schemas']['ApiResponseListRoleDTO'];
export type ApiResponseListPermissionDto = components['schemas']['ApiResponseListPermissionDTO'];
export type PrerequisiteRequestDto = components['schemas']['PrerequisiteRequestDTO'];
export type PrerequisiteResponseDto = components['schemas']['PrerequisiteResponseDTO'];
export type PrerequisiteTypeResponseDto = components['schemas']['PrerequisiteTypeResponseDTO'];
export type ResponsePageableDtoPrerequisiteResponseDto = components['schemas']['ResponsePageableDTOPrerequisiteResponseDTO'];
export type ResponsePageableDtoPrerequisiteTypeResponseDto = components['schemas']['ResponsePageableDTOPrerequisiteTypeResponseDTO'];
export type ApiResponsePagedDtoOrganisationDto = components['schemas']['ApiResponsePagedDTOOrganisationDTO'];
export type PagedDtoOrganisationDto = components['schemas']['PagedDTOOrganisationDTO'];
export type ApiResponsePagedDtoInstructor = components['schemas']['ApiResponsePagedDTOInstructor'];
export type PagedDtoInstructor = components['schemas']['PagedDTOInstructor'];
export type CourseRequestDto = components['schemas']['CourseRequestDTO'];
export type ResponsePageableDtoCourseResponseDto = components['schemas']['ResponsePageableDTOCourseResponseDTO'];
export type ResponsePageableDtoLessonResponseDto = components['schemas']['ResponsePageableDTOLessonResponseDTO'];
export type CategoryRequestDto = components['schemas']['CategoryRequestDTO'];
export type ResponsePageableDtoCategoryResponseDto = components['schemas']['ResponsePageableDTOCategoryResponseDTO'];
export type AssessmentResponseDto = components['schemas']['AssessmentResponseDTO'];
export type ResponseDtoAssessmentResponseDto = components['schemas']['ResponseDTOAssessmentResponseDTO'];
export type AnswerOptionResponseDto = components['schemas']['AnswerOptionResponseDTO'];
export type QuestionResponseDto = components['schemas']['QuestionResponseDTO'];
export type ResponsePageableDtoQuestionResponseDto = components['schemas']['ResponsePageableDTOQuestionResponseDTO'];
export type ResponseDtoQuestionResponseDto = components['schemas']['ResponseDTOQuestionResponseDTO'];
export type ResponsePageableDtoAssessmentResponseDto = components['schemas']['ResponsePageableDTOAssessmentResponseDTO'];
export type $defs = Record<string, never>;
export interface operations {
    getUserByUuid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUser"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    user: components["schemas"]["User"];
                    /** Format: binary */
                    profile_image?: string;
                };
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUser"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUser"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getUserGroupByUuid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUserGroupDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserGroupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUserGroupDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getTrainingSessionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Training session found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TrainingSessionDTO"];
                };
            };
            /** @description Training session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateTrainingSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrainingSessionDTO"];
            };
        };
        responses: {
            /** @description Training session updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TrainingSessionDTO"];
                };
            };
            /** @description Training session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteTrainingSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Training session deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Training session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getStudentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Student"];
                };
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Student"];
            };
        };
        responses: {
            /** @description Student updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Student"];
                };
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteStudent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getRoleByUuid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Role retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRoleDTO"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDTO"];
            };
        };
        responses: {
            /** @description Role updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRoleDTO"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRoleDTO"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Role deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Role not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updatePrerequisite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePrerequisiteRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deletePrerequisite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updatePrerequisiteGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteGroupId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePrerequisiteGroupRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deletePrerequisiteGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prerequisiteGroupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getOrganisationByUuid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organisation retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseOrganisationDTO"];
                };
            };
            /** @description Organisation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganisationDTO"];
            };
        };
        responses: {
            /** @description Organisation updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseOrganisationDTO"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseOrganisationDTO"];
                };
            };
            /** @description Organisation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organisation deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Organisation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getInstructorByUuid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Instructor found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Instructor"];
                };
            };
            /** @description Instructor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Instructor"];
            };
        };
        responses: {
            /** @description Instructor updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Instructor"];
                };
            };
            /** @description Instructor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Instructor deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Instructor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCourseResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourseRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCourseResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteCourse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOLessonResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLessonRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getCategory: {
        parameters: {
            query: {
                categoryId: number;
            };
            header?: never;
            path: {
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCategoryResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCategoryResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOAssessmentResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAssessmentRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOQuestionResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    updateQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuestionRequestDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    deleteQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createUserGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserGroupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseUserGroupDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getUsersForUserGroup: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOUser"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    addUsersToGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    removeUsersFromGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getRolesForUserGroup: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTORoleDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    assignRolesToGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    removeRolesFromGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllTrainingSessions: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOTrainingSessionDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createTrainingSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TrainingSessionDTO"];
            };
        };
        responses: {
            /** @description Training session created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TrainingSessionDTO"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTrainingSessionDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllStudents: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOStudent"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createStudent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Student"];
            };
        };
        responses: {
            /** @description Student created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Student"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseStudent"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createRole: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDTO"];
            };
        };
        responses: {
            /** @description Role created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRoleDTO"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseRoleDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    findPrerequisites: {
        parameters: {
            query: {
                prerequisiteRequestDTO: components["schemas"]["PrerequisiteRequestDTO"];
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOPrerequisiteResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createPrerequisite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePrerequisiteRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createPrerequisiteGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePrerequisiteGroupRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getPrerequisiteTypes: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOPrerequisiteTypeResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createPrerequisiteType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePrerequisiteTypeRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllOrganisations: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organisations retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOOrganisationDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganisationDTO"];
            };
        };
        responses: {
            /** @description Organisation created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseOrganisationDTO"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseOrganisationDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllInstructors: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOInstructor"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createInstructor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Instructor"];
            };
        };
        responses: {
            /** @description Instructor created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Instructor"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseInstructor"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getCourses: {
        parameters: {
            query: {
                courseRequestDTO: components["schemas"]["CourseRequestDTO"];
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOCourseResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createCourse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    course: components["schemas"]["CreateCourseRequestDTO"];
                    /** Format: binary */
                    thumbnail: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCourseResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getLessons: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOLessonResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createLesson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    lesson: components["schemas"]["CreateLessonRequestDTO"];
                    files?: string[];
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOLessonResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllCategories: {
        parameters: {
            query: {
                categoryRequestDTO: components["schemas"]["CategoryRequestDTO"];
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOCategoryResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOCategoryResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createAssessment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAssessmentRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getQuestions: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                assessmentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOQuestionResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    createQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                assessmentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuestionRequestDTO"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    search: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of users matching the search criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOUser"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile image retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Profile image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getUsersByOrganisation: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOUser"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    search_1: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of user groups matching the search criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOUserGroupDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getUserGroupsByOrganisation: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                organisationUuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOUserGroupDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    searchTrainingSessions: {
        parameters: {
            query: {
                searchParams: {
                    [key: string]: string;
                };
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Page"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    searchStudents: {
        parameters: {
            query: {
                searchParams: {
                    [key: string]: string;
                };
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Page"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getEffectiveRolesForUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userUuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListRoleDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    searchRoles: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of roles matching the search criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTORoleDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAllPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Permissions retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseListPermissionDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getRolesByOrganisation: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                organisationUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Roles retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTORoleDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    search_2: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of organisations matching the search criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponsePagedDTOOrganisationDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    searchInstructors: {
        parameters: {
            query: {
                searchParams: {
                    [key: string]: string;
                };
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Page"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getCourseThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAssessmentsByLesson: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                lessonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOAssessmentResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
    getAssessmentsByCourse: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                courseId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponsePageableDTOAssessmentResponseDTO"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseDTOVoid"];
                };
            };
        };
    };
}
