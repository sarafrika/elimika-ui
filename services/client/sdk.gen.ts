// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from './client';
import type {
  DeleteUserData,
  DeleteUserResponses,
  DeleteUserErrors,
  GetUserByUuidData,
  GetUserByUuidResponses,
  GetUserByUuidErrors,
  UpdateUserData,
  UpdateUserResponses,
  UpdateUserErrors,
  DeleteTrainingBranchData,
  DeleteTrainingBranchResponses,
  DeleteTrainingBranchErrors,
  GetTrainingBranchByUuidData,
  GetTrainingBranchByUuidResponses,
  GetTrainingBranchByUuidErrors,
  UpdateTrainingBranchData,
  UpdateTrainingBranchResponses,
  UpdateTrainingBranchErrors,
  DeleteStudentData,
  DeleteStudentResponses,
  DeleteStudentErrors,
  GetStudentByIdData,
  GetStudentByIdResponses,
  GetStudentByIdErrors,
  UpdateStudentData,
  UpdateStudentResponses,
  UpdateStudentErrors,
  DeleteAssessmentRubricData,
  DeleteAssessmentRubricResponses,
  DeleteAssessmentRubricErrors,
  GetAssessmentRubricByUuidData,
  GetAssessmentRubricByUuidResponses,
  GetAssessmentRubricByUuidErrors,
  UpdateAssessmentRubricData,
  UpdateAssessmentRubricResponses,
  UpdateAssessmentRubricErrors,
  DeleteScoringLevelData,
  DeleteScoringLevelResponses,
  DeleteScoringLevelErrors,
  GetScoringLevelData,
  GetScoringLevelResponses,
  GetScoringLevelErrors,
  UpdateScoringLevelData,
  UpdateScoringLevelResponses,
  UpdateScoringLevelErrors,
  UpdateMatrixCellData,
  UpdateMatrixCellResponses,
  UpdateMatrixCellErrors,
  DeleteRubricCriterionData,
  DeleteRubricCriterionResponses,
  DeleteRubricCriterionErrors,
  UpdateRubricCriterionData,
  UpdateRubricCriterionResponses,
  UpdateRubricCriterionErrors,
  DeleteRubricScoringData,
  DeleteRubricScoringResponses,
  DeleteRubricScoringErrors,
  UpdateRubricScoringData,
  UpdateRubricScoringResponses,
  UpdateRubricScoringErrors,
  DeleteQuizData,
  DeleteQuizResponses,
  DeleteQuizErrors,
  GetQuizByUuidData,
  GetQuizByUuidResponses,
  GetQuizByUuidErrors,
  UpdateQuizData,
  UpdateQuizResponses,
  UpdateQuizErrors,
  DeleteQuizQuestionData,
  DeleteQuizQuestionResponses,
  DeleteQuizQuestionErrors,
  UpdateQuizQuestionData,
  UpdateQuizQuestionResponses,
  UpdateQuizQuestionErrors,
  DeleteQuestionOptionData,
  DeleteQuestionOptionResponses,
  DeleteQuestionOptionErrors,
  UpdateQuestionOptionData,
  UpdateQuestionOptionResponses,
  UpdateQuestionOptionErrors,
  DeleteTrainingProgramData,
  DeleteTrainingProgramResponses,
  DeleteTrainingProgramErrors,
  GetTrainingProgramByUuidData,
  GetTrainingProgramByUuidResponses,
  GetTrainingProgramByUuidErrors,
  UpdateTrainingProgramData,
  UpdateTrainingProgramResponses,
  UpdateTrainingProgramErrors,
  DeleteProgramRequirementData,
  DeleteProgramRequirementResponses,
  DeleteProgramRequirementErrors,
  UpdateProgramRequirementData,
  UpdateProgramRequirementResponses,
  UpdateProgramRequirementErrors,
  RemoveProgramCourseData,
  RemoveProgramCourseResponses,
  RemoveProgramCourseErrors,
  UpdateProgramCourseData,
  UpdateProgramCourseResponses,
  UpdateProgramCourseErrors,
  DeleteOrganisationData,
  DeleteOrganisationResponses,
  DeleteOrganisationErrors,
  GetOrganisationByUuidData,
  GetOrganisationByUuidResponses,
  GetOrganisationByUuidErrors,
  UpdateOrganisationData,
  UpdateOrganisationResponses,
  UpdateOrganisationErrors,
  DeleteTrainingBranch1Data,
  DeleteTrainingBranch1Responses,
  DeleteTrainingBranch1Errors,
  GetTrainingBranchByUuid1Data,
  GetTrainingBranchByUuid1Responses,
  GetTrainingBranchByUuid1Errors,
  UpdateTrainingBranch1Data,
  UpdateTrainingBranch1Responses,
  UpdateTrainingBranch1Errors,
  DeleteInstructorData,
  DeleteInstructorResponses,
  DeleteInstructorErrors,
  GetInstructorByUuidData,
  GetInstructorByUuidResponses,
  GetInstructorByUuidErrors,
  UpdateInstructorData,
  UpdateInstructorResponses,
  UpdateInstructorErrors,
  DeleteInstructorSkillData,
  DeleteInstructorSkillResponses,
  DeleteInstructorSkillErrors,
  UpdateInstructorSkillData,
  UpdateInstructorSkillResponses,
  UpdateInstructorSkillErrors,
  DeleteInstructorMembershipData,
  DeleteInstructorMembershipResponses,
  DeleteInstructorMembershipErrors,
  UpdateInstructorMembershipData,
  UpdateInstructorMembershipResponses,
  UpdateInstructorMembershipErrors,
  DeleteInstructorExperienceData,
  DeleteInstructorExperienceResponses,
  DeleteInstructorExperienceErrors,
  UpdateInstructorExperienceData,
  UpdateInstructorExperienceResponses,
  UpdateInstructorExperienceErrors,
  DeleteInstructorEducationData,
  DeleteInstructorEducationResponses,
  DeleteInstructorEducationErrors,
  UpdateInstructorEducationData,
  UpdateInstructorEducationResponses,
  UpdateInstructorEducationErrors,
  DeleteInstructorDocumentData,
  DeleteInstructorDocumentResponses,
  DeleteInstructorDocumentErrors,
  UpdateInstructorDocumentData,
  UpdateInstructorDocumentResponses,
  UpdateInstructorDocumentErrors,
  DeleteAvailabilitySlotData,
  DeleteAvailabilitySlotResponses,
  DeleteAvailabilitySlotErrors,
  GetAvailabilitySlotData,
  GetAvailabilitySlotResponses,
  GetAvailabilitySlotErrors,
  UpdateAvailabilitySlotData,
  UpdateAvailabilitySlotResponses,
  UpdateAvailabilitySlotErrors,
  DeleteCourseData,
  DeleteCourseResponses,
  DeleteCourseErrors,
  GetCourseByUuidData,
  GetCourseByUuidResponses,
  GetCourseByUuidErrors,
  UpdateCourseData,
  UpdateCourseResponses,
  UpdateCourseErrors,
  SetPrimaryRubricData,
  SetPrimaryRubricResponses,
  SetPrimaryRubricErrors,
  UpdateAssociationData,
  UpdateAssociationResponses,
  UpdateAssociationErrors,
  DeleteCourseRequirementData,
  DeleteCourseRequirementResponses,
  DeleteCourseRequirementErrors,
  UpdateCourseRequirementData,
  UpdateCourseRequirementResponses,
  UpdateCourseRequirementErrors,
  DeleteCourseLessonData,
  DeleteCourseLessonResponses,
  DeleteCourseLessonErrors,
  GetCourseLessonData,
  GetCourseLessonResponses,
  GetCourseLessonErrors,
  UpdateCourseLessonData,
  UpdateCourseLessonResponses,
  UpdateCourseLessonErrors,
  DeleteLessonContentData,
  DeleteLessonContentResponses,
  DeleteLessonContentErrors,
  UpdateLessonContentData,
  UpdateLessonContentResponses,
  UpdateLessonContentErrors,
  DeleteCourseAssessmentData,
  DeleteCourseAssessmentResponses,
  DeleteCourseAssessmentErrors,
  UpdateCourseAssessmentData,
  UpdateCourseAssessmentResponses,
  UpdateCourseAssessmentErrors,
  DeleteCourseCreatorData,
  DeleteCourseCreatorResponses,
  DeleteCourseCreatorErrors,
  GetCourseCreatorByUuidData,
  GetCourseCreatorByUuidResponses,
  GetCourseCreatorByUuidErrors,
  UpdateCourseCreatorData,
  UpdateCourseCreatorResponses,
  UpdateCourseCreatorErrors,
  DeleteGradingLevelData,
  DeleteGradingLevelResponses,
  DeleteGradingLevelErrors,
  UpdateGradingLevelData,
  UpdateGradingLevelResponses,
  UpdateGradingLevelErrors,
  DeleteDifficultyLevelData,
  DeleteDifficultyLevelResponses,
  DeleteDifficultyLevelErrors,
  UpdateDifficultyLevelData,
  UpdateDifficultyLevelResponses,
  UpdateDifficultyLevelErrors,
  DeleteContentTypeData,
  DeleteContentTypeResponses,
  DeleteContentTypeErrors,
  UpdateContentTypeData,
  UpdateContentTypeResponses,
  UpdateContentTypeErrors,
  DeleteCategoryData,
  DeleteCategoryResponses,
  DeleteCategoryErrors,
  GetCategoryByUuidData,
  GetCategoryByUuidResponses,
  GetCategoryByUuidErrors,
  UpdateCategoryData,
  UpdateCategoryResponses,
  UpdateCategoryErrors,
  DeactivateClassDefinitionData,
  DeactivateClassDefinitionResponses,
  DeactivateClassDefinitionErrors,
  GetClassDefinitionData,
  GetClassDefinitionResponses,
  GetClassDefinitionErrors,
  UpdateClassDefinitionData,
  UpdateClassDefinitionResponses,
  UpdateClassDefinitionErrors,
  CancelRecurringClassScheduleData,
  CancelRecurringClassScheduleResponses,
  CancelRecurringClassScheduleErrors,
  ScheduleRecurringClassFromDefinitionData,
  ScheduleRecurringClassFromDefinitionResponses,
  ScheduleRecurringClassFromDefinitionErrors,
  UpdateRecurringClassScheduleData,
  UpdateRecurringClassScheduleResponses,
  UpdateRecurringClassScheduleErrors,
  DeleteClassRecurrencePatternData,
  DeleteClassRecurrencePatternResponses,
  DeleteClassRecurrencePatternErrors,
  GetClassRecurrencePatternData,
  GetClassRecurrencePatternResponses,
  GetClassRecurrencePatternErrors,
  UpdateClassRecurrencePatternData,
  UpdateClassRecurrencePatternResponses,
  UpdateClassRecurrencePatternErrors,
  DeleteCertificateData,
  DeleteCertificateResponses,
  DeleteCertificateErrors,
  GetCertificateByUuidData,
  GetCertificateByUuidResponses,
  GetCertificateByUuidErrors,
  UpdateCertificateData,
  UpdateCertificateResponses,
  UpdateCertificateErrors,
  DeleteCertificateTemplateData,
  DeleteCertificateTemplateResponses,
  DeleteCertificateTemplateErrors,
  UpdateCertificateTemplateData,
  UpdateCertificateTemplateResponses,
  UpdateCertificateTemplateErrors,
  DeleteAssignmentData,
  DeleteAssignmentResponses,
  DeleteAssignmentErrors,
  GetAssignmentByUuidData,
  GetAssignmentByUuidResponses,
  GetAssignmentByUuidErrors,
  UpdateAssignmentData,
  UpdateAssignmentResponses,
  UpdateAssignmentErrors,
  DeclineInvitationData,
  DeclineInvitationResponses,
  DeclineInvitationErrors,
  AcceptInvitationData,
  AcceptInvitationResponses,
  AcceptInvitationErrors,
  UploadProfileImageData,
  UploadProfileImageResponses,
  UploadProfileImageErrors,
  GetAllTrainingBranchesData,
  GetAllTrainingBranchesResponses,
  GetAllTrainingBranchesErrors,
  CreateTrainingBranchData,
  CreateTrainingBranchResponses,
  CreateTrainingBranchErrors,
  CheckStudentConflictData,
  CheckStudentConflictResponses,
  CheckStudentConflictErrors,
  ScheduleClassData,
  ScheduleClassResponses,
  ScheduleClassErrors,
  CheckInstructorConflictData,
  CheckInstructorConflictResponses,
  CheckInstructorConflictErrors,
  GetAllStudentsData,
  GetAllStudentsResponses,
  GetAllStudentsErrors,
  CreateStudentData,
  CreateStudentResponses,
  CreateStudentErrors,
  GetAllAssessmentRubricsData,
  GetAllAssessmentRubricsResponses,
  GetAllAssessmentRubricsErrors,
  CreateAssessmentRubricData,
  CreateAssessmentRubricResponses,
  CreateAssessmentRubricErrors,
  GetScoringLevelsByRubricData,
  GetScoringLevelsByRubricResponses,
  GetScoringLevelsByRubricErrors,
  CreateRubricScoringLevelData,
  CreateRubricScoringLevelResponses,
  CreateRubricScoringLevelErrors,
  CreateRubricScoringLevelsBatchData,
  CreateRubricScoringLevelsBatchResponses,
  CreateRubricScoringLevelsBatchErrors,
  RecalculateScoresData,
  RecalculateScoresResponses,
  RecalculateScoresErrors,
  GetRubricCriteriaData,
  GetRubricCriteriaResponses,
  GetRubricCriteriaErrors,
  AddRubricCriterionData,
  AddRubricCriterionResponses,
  AddRubricCriterionErrors,
  GetRubricScoringData,
  GetRubricScoringResponses,
  GetRubricScoringErrors,
  AddRubricScoringData,
  AddRubricScoringResponses,
  AddRubricScoringErrors,
  GetAllQuizzesData,
  GetAllQuizzesResponses,
  GetAllQuizzesErrors,
  CreateQuizData,
  CreateQuizResponses,
  CreateQuizErrors,
  GetQuizQuestionsData,
  GetQuizQuestionsResponses,
  GetQuizQuestionsErrors,
  AddQuizQuestionData,
  AddQuizQuestionResponses,
  AddQuizQuestionErrors,
  GetQuestionOptionsData,
  GetQuestionOptionsResponses,
  GetQuestionOptionsErrors,
  AddQuestionOptionData,
  AddQuestionOptionResponses,
  AddQuestionOptionErrors,
  ReorderQuizQuestionsData,
  ReorderQuizQuestionsResponses,
  ReorderQuizQuestionsErrors,
  GetAllTrainingProgramsData,
  GetAllTrainingProgramsResponses,
  GetAllTrainingProgramsErrors,
  CreateTrainingProgramData,
  CreateTrainingProgramResponses,
  CreateTrainingProgramErrors,
  PublishProgramData,
  PublishProgramResponses,
  PublishProgramErrors,
  GetProgramRequirementsData,
  GetProgramRequirementsResponses,
  GetProgramRequirementsErrors,
  AddProgramRequirementData,
  AddProgramRequirementResponses,
  AddProgramRequirementErrors,
  GetProgramCoursesData,
  GetProgramCoursesResponses,
  GetProgramCoursesErrors,
  AddProgramCourseData,
  AddProgramCourseResponses,
  AddProgramCourseErrors,
  GetAllOrganisationsData,
  GetAllOrganisationsResponses,
  GetAllOrganisationsErrors,
  CreateOrganisationData,
  CreateOrganisationResponses,
  CreateOrganisationErrors,
  GetTrainingBranchesByOrganisationData,
  GetTrainingBranchesByOrganisationResponses,
  GetTrainingBranchesByOrganisationErrors,
  CreateTrainingBranch1Data,
  CreateTrainingBranch1Responses,
  CreateTrainingBranch1Errors,
  RemoveUserFromBranchData,
  RemoveUserFromBranchResponses,
  RemoveUserFromBranchErrors,
  AssignUserToBranchData,
  AssignUserToBranchResponses,
  AssignUserToBranchErrors,
  GetBranchInvitationsData,
  GetBranchInvitationsResponses,
  GetBranchInvitationsErrors,
  CreateBranchInvitationData,
  CreateBranchInvitationResponses,
  CreateBranchInvitationErrors,
  GetOrganizationInvitationsData,
  GetOrganizationInvitationsResponses,
  GetOrganizationInvitationsErrors,
  CreateOrganizationInvitationData,
  CreateOrganizationInvitationResponses,
  CreateOrganizationInvitationErrors,
  ResendInvitationData,
  ResendInvitationResponses,
  ResendInvitationErrors,
  ProcessPendingInvitationsData,
  ProcessPendingInvitationsResponses,
  ProcessPendingInvitationsErrors,
  SendExpiryRemindersData,
  SendExpiryRemindersResponses,
  SendExpiryRemindersErrors,
  MarkExpiredInvitationsData,
  MarkExpiredInvitationsResponses,
  MarkExpiredInvitationsErrors,
  DeclineInvitation1Data,
  DeclineInvitation1Responses,
  DeclineInvitation1Errors,
  AcceptInvitation1Data,
  AcceptInvitation1Responses,
  AcceptInvitation1Errors,
  GetAllInstructorsData,
  GetAllInstructorsResponses,
  GetAllInstructorsErrors,
  CreateInstructorData,
  CreateInstructorResponses,
  CreateInstructorErrors,
  GetInstructorSkillsData,
  GetInstructorSkillsResponses,
  GetInstructorSkillsErrors,
  AddInstructorSkillData,
  AddInstructorSkillResponses,
  AddInstructorSkillErrors,
  GetInstructorMembershipsData,
  GetInstructorMembershipsResponses,
  GetInstructorMembershipsErrors,
  AddInstructorMembershipData,
  AddInstructorMembershipResponses,
  AddInstructorMembershipErrors,
  GetInstructorExperienceData,
  GetInstructorExperienceResponses,
  GetInstructorExperienceErrors,
  AddInstructorExperienceData,
  AddInstructorExperienceResponses,
  AddInstructorExperienceErrors,
  GetInstructorEducationData,
  GetInstructorEducationResponses,
  GetInstructorEducationErrors,
  AddInstructorEducationData,
  AddInstructorEducationResponses,
  AddInstructorEducationErrors,
  GetInstructorDocumentsData,
  GetInstructorDocumentsResponses,
  GetInstructorDocumentsErrors,
  AddInstructorDocumentData,
  AddInstructorDocumentResponses,
  AddInstructorDocumentErrors,
  VerifyDocumentData,
  VerifyDocumentResponses,
  VerifyDocumentErrors,
  CreateAvailabilitySlotData,
  CreateAvailabilitySlotResponses,
  CreateAvailabilitySlotErrors,
  SetAvailabilityPatternsData,
  SetAvailabilityPatternsResponses,
  SetAvailabilityPatternsErrors,
  BlockTimeData,
  BlockTimeResponses,
  BlockTimeErrors,
  EnrollStudentData,
  EnrollStudentResponses,
  EnrollStudentErrors,
  GetAllCoursesData,
  GetAllCoursesResponses,
  GetAllCoursesErrors,
  CreateCourseData,
  CreateCourseResponses,
  CreateCourseErrors,
  UnpublishCourseData,
  UnpublishCourseResponses,
  UnpublishCourseErrors,
  UploadCourseThumbnailData,
  UploadCourseThumbnailResponses,
  UploadCourseThumbnailErrors,
  PublishCourseData,
  PublishCourseResponses,
  PublishCourseErrors,
  UploadCourseIntroVideoData,
  UploadCourseIntroVideoResponses,
  UploadCourseIntroVideoErrors,
  UploadCourseBannerData,
  UploadCourseBannerResponses,
  UploadCourseBannerErrors,
  ArchiveCourseData,
  ArchiveCourseResponses,
  ArchiveCourseErrors,
  GetCourseRubricsData,
  GetCourseRubricsResponses,
  GetCourseRubricsErrors,
  AssociateRubricData,
  AssociateRubricResponses,
  AssociateRubricErrors,
  GetCourseRequirementsData,
  GetCourseRequirementsResponses,
  GetCourseRequirementsErrors,
  AddCourseRequirementData,
  AddCourseRequirementResponses,
  AddCourseRequirementErrors,
  GetCourseLessonsData,
  GetCourseLessonsResponses,
  GetCourseLessonsErrors,
  AddCourseLessonData,
  AddCourseLessonResponses,
  AddCourseLessonErrors,
  GetLessonContentData,
  GetLessonContentResponses,
  GetLessonContentErrors,
  AddLessonContentData,
  AddLessonContentResponses,
  AddLessonContentErrors,
  ReorderLessonContentData,
  ReorderLessonContentResponses,
  ReorderLessonContentErrors,
  GetCourseAssessmentsData,
  GetCourseAssessmentsResponses,
  GetCourseAssessmentsErrors,
  AddCourseAssessmentData,
  AddCourseAssessmentResponses,
  AddCourseAssessmentErrors,
  GetAllCourseCreatorsData,
  GetAllCourseCreatorsResponses,
  GetAllCourseCreatorsErrors,
  CreateCourseCreatorData,
  CreateCourseCreatorResponses,
  CreateCourseCreatorErrors,
  VerifyCourseCreatorData,
  VerifyCourseCreatorResponses,
  VerifyCourseCreatorErrors,
  UnverifyCourseCreatorData,
  UnverifyCourseCreatorResponses,
  UnverifyCourseCreatorErrors,
  GetAllGradingLevelsData,
  GetAllGradingLevelsResponses,
  GetAllGradingLevelsErrors,
  CreateGradingLevelData,
  CreateGradingLevelResponses,
  CreateGradingLevelErrors,
  GetAllDifficultyLevelsData,
  GetAllDifficultyLevelsResponses,
  GetAllDifficultyLevelsErrors,
  CreateDifficultyLevelData,
  CreateDifficultyLevelResponses,
  CreateDifficultyLevelErrors,
  ReorderDifficultyLevelsData,
  ReorderDifficultyLevelsResponses,
  ReorderDifficultyLevelsErrors,
  GetAllContentTypesData,
  GetAllContentTypesResponses,
  GetAllContentTypesErrors,
  CreateContentTypeData,
  CreateContentTypeResponses,
  CreateContentTypeErrors,
  GetAllCategoriesData,
  GetAllCategoriesResponses,
  GetAllCategoriesErrors,
  CreateCategoryData,
  CreateCategoryResponses,
  CreateCategoryErrors,
  CreateClassDefinitionData,
  CreateClassDefinitionResponses,
  CreateClassDefinitionErrors,
  CreateClassRecurrencePatternData,
  CreateClassRecurrencePatternResponses,
  CreateClassRecurrencePatternErrors,
  GetAllCertificatesData,
  GetAllCertificatesResponses,
  GetAllCertificatesErrors,
  CreateCertificateData,
  CreateCertificateResponses,
  CreateCertificateErrors,
  RevokeCertificateData,
  RevokeCertificateResponses,
  RevokeCertificateErrors,
  GenerateCertificateUrlData,
  GenerateCertificateUrlResponses,
  GenerateCertificateUrlErrors,
  GetCertificateTemplatesData,
  GetCertificateTemplatesResponses,
  GetCertificateTemplatesErrors,
  CreateCertificateTemplateData,
  CreateCertificateTemplateResponses,
  CreateCertificateTemplateErrors,
  GenerateProgramCertificateData,
  GenerateProgramCertificateResponses,
  GenerateProgramCertificateErrors,
  GenerateCourseCertificateData,
  GenerateCourseCertificateResponses,
  GenerateCourseCertificateErrors,
  GetAllAssignmentsData,
  GetAllAssignmentsResponses,
  GetAllAssignmentsErrors,
  CreateAssignmentData,
  CreateAssignmentResponses,
  CreateAssignmentErrors,
  SubmitAssignmentData,
  SubmitAssignmentResponses,
  SubmitAssignmentErrors,
  ReturnSubmissionData,
  ReturnSubmissionResponses,
  ReturnSubmissionErrors,
  GradeSubmissionData,
  GradeSubmissionResponses,
  GradeSubmissionErrors,
  AssignAdminDomainData,
  AssignAdminDomainResponses,
  AssignAdminDomainErrors,
  VerifyOrganisationData,
  VerifyOrganisationResponses,
  VerifyOrganisationErrors,
  UnverifyOrganisationData,
  UnverifyOrganisationResponses,
  UnverifyOrganisationErrors,
  VerifyInstructorData,
  VerifyInstructorResponses,
  VerifyInstructorErrors,
  UnverifyInstructorData,
  UnverifyInstructorResponses,
  UnverifyInstructorErrors,
  UpdateScheduledInstanceStatusData,
  UpdateScheduledInstanceStatusResponses,
  UpdateScheduledInstanceStatusErrors,
  ReorderScoringLevelsData,
  ReorderScoringLevelsResponses,
  ReorderScoringLevelsErrors,
  MarkAttendanceData,
  MarkAttendanceResponses,
  MarkAttendanceErrors,
  GetAllUsersData,
  GetAllUsersResponses,
  GetAllUsersErrors,
  GetInvitationsSentByUserData,
  GetInvitationsSentByUserResponses,
  GetInvitationsSentByUserErrors,
  GetPendingInvitationsForUserData,
  GetPendingInvitationsForUserResponses,
  GetPendingInvitationsForUserErrors,
  SearchData,
  SearchResponses,
  SearchErrors,
  GetProfileImageData,
  GetProfileImageResponses,
  GetProfileImageErrors,
  Search1Data,
  Search1Responses,
  Search1Errors,
  GetTrainingBranchesByOrganisation1Data,
  GetTrainingBranchesByOrganisation1Responses,
  GetTrainingBranchesByOrganisation1Errors,
  CancelScheduledClassData,
  CancelScheduledClassResponses,
  CancelScheduledClassErrors,
  GetScheduledInstanceData,
  GetScheduledInstanceResponses,
  GetScheduledInstanceErrors,
  GetInstructorScheduleData,
  GetInstructorScheduleResponses,
  GetInstructorScheduleErrors,
  SearchStudentsData,
  SearchStudentsResponses,
  SearchStudentsErrors,
  ValidateMatrixData,
  ValidateMatrixResponses,
  ValidateMatrixErrors,
  GetPassingScoringLevelsData,
  GetPassingScoringLevelsResponses,
  GetPassingScoringLevelsErrors,
  GetHighestScoringLevelData,
  GetHighestScoringLevelResponses,
  GetHighestScoringLevelErrors,
  GetRubricMatrixData,
  GetRubricMatrixResponses,
  GetRubricMatrixErrors,
  ValidateMatrix1Data,
  ValidateMatrix1Responses,
  ValidateMatrix1Errors,
  GetMatrixStatisticsData,
  GetMatrixStatisticsResponses,
  GetMatrixStatisticsErrors,
  CheckMatrixReadinessData,
  CheckMatrixReadinessResponses,
  CheckMatrixReadinessErrors,
  GetRubricMatrixViewData,
  GetRubricMatrixViewResponses,
  GetRubricMatrixViewErrors,
  SearchAssessmentRubricsData,
  SearchAssessmentRubricsResponses,
  SearchAssessmentRubricsErrors,
  GetRubricsByTypeData,
  GetRubricsByTypeResponses,
  GetRubricsByTypeErrors,
  GetRubricsByStatusData,
  GetRubricsByStatusResponses,
  GetRubricsByStatusErrors,
  GetRubricStatisticsData,
  GetRubricStatisticsResponses,
  GetRubricStatisticsErrors,
  GetInstructorRubricStatisticsData,
  GetInstructorRubricStatisticsResponses,
  GetInstructorRubricStatisticsErrors,
  SearchPublicRubricsData,
  SearchPublicRubricsResponses,
  SearchPublicRubricsErrors,
  GetPublicRubricsData,
  GetPublicRubricsResponses,
  GetPublicRubricsErrors,
  GetPopularRubricsData,
  GetPopularRubricsResponses,
  GetPopularRubricsErrors,
  GetInstructorRubricsData,
  GetInstructorRubricsResponses,
  GetInstructorRubricsErrors,
  GetGeneralRubricsData,
  GetGeneralRubricsResponses,
  GetGeneralRubricsErrors,
  GetQuizTotalPointsData,
  GetQuizTotalPointsResponses,
  GetQuizTotalPointsErrors,
  GetQuestionDistributionData,
  GetQuestionDistributionResponses,
  GetQuestionDistributionErrors,
  GetQuizAttemptsData,
  GetQuizAttemptsResponses,
  GetQuizAttemptsErrors,
  SearchQuizzesData,
  SearchQuizzesResponses,
  SearchQuizzesErrors,
  SearchQuestionsData,
  SearchQuestionsResponses,
  SearchQuestionsErrors,
  SearchAttemptsData,
  SearchAttemptsResponses,
  SearchAttemptsErrors,
  GetProgramEnrollmentsData,
  GetProgramEnrollmentsResponses,
  GetProgramEnrollmentsErrors,
  GetRequiredCoursesData,
  GetRequiredCoursesResponses,
  GetRequiredCoursesErrors,
  GetOptionalCoursesData,
  GetOptionalCoursesResponses,
  GetOptionalCoursesErrors,
  GetProgramCompletionRateData,
  GetProgramCompletionRateResponses,
  GetProgramCompletionRateErrors,
  GetProgramCertificatesData,
  GetProgramCertificatesResponses,
  GetProgramCertificatesErrors,
  SearchTrainingProgramsData,
  SearchTrainingProgramsResponses,
  SearchTrainingProgramsErrors,
  SearchProgramRequirementsData,
  SearchProgramRequirementsResponses,
  SearchProgramRequirementsErrors,
  GetPublishedProgramsData,
  GetPublishedProgramsResponses,
  GetPublishedProgramsErrors,
  GetProgramsByInstructorData,
  GetProgramsByInstructorResponses,
  GetProgramsByInstructorErrors,
  GetFreeProgramsData,
  GetFreeProgramsResponses,
  GetFreeProgramsErrors,
  SearchProgramEnrollmentsData,
  SearchProgramEnrollmentsResponses,
  SearchProgramEnrollmentsErrors,
  SearchProgramCoursesData,
  SearchProgramCoursesResponses,
  SearchProgramCoursesErrors,
  GetProgramsByCategoryData,
  GetProgramsByCategoryResponses,
  GetProgramsByCategoryErrors,
  GetActiveProgramsData,
  GetActiveProgramsResponses,
  GetActiveProgramsErrors,
  GetUsersByOrganisationData,
  GetUsersByOrganisationResponses,
  GetUsersByOrganisationErrors,
  GetUsersByOrganisationAndDomainData,
  GetUsersByOrganisationAndDomainResponses,
  GetUsersByOrganisationAndDomainErrors,
  GetBranchUsersData,
  GetBranchUsersResponses,
  GetBranchUsersErrors,
  GetBranchUsersByDomainData,
  GetBranchUsersByDomainResponses,
  GetBranchUsersByDomainErrors,
  Search2Data,
  Search2Responses,
  Search2Errors,
  ValidateInvitationData,
  ValidateInvitationResponses,
  ValidateInvitationErrors,
  GetInvitationByTokenData,
  GetInvitationByTokenResponses,
  GetInvitationByTokenErrors,
  PreviewInvitationData,
  PreviewInvitationResponses,
  PreviewInvitationErrors,
  GetPendingInvitationsForEmailData,
  GetPendingInvitationsForEmailResponses,
  GetPendingInvitationsForEmailErrors,
  ClearInstructorAvailabilityData,
  ClearInstructorAvailabilityResponses,
  ClearInstructorAvailabilityErrors,
  GetInstructorAvailabilityData,
  GetInstructorAvailabilityResponses,
  GetInstructorAvailabilityErrors,
  SearchAvailabilityData,
  SearchAvailabilityResponses,
  SearchAvailabilityErrors,
  GetAvailabilityForDateData,
  GetAvailabilityForDateResponses,
  GetAvailabilityForDateErrors,
  CheckAvailabilityData,
  CheckAvailabilityResponses,
  CheckAvailabilityErrors,
  FindAvailableSlotsData,
  FindAvailableSlotsResponses,
  FindAvailableSlotsErrors,
  SearchSkillsData,
  SearchSkillsResponses,
  SearchSkillsErrors,
  SearchInstructorsData,
  SearchInstructorsResponses,
  SearchInstructorsErrors,
  SearchMembershipsData,
  SearchMembershipsResponses,
  SearchMembershipsErrors,
  SearchExperienceData,
  SearchExperienceResponses,
  SearchExperienceErrors,
  SearchEducationData,
  SearchEducationResponses,
  SearchEducationErrors,
  SearchDocumentsData,
  SearchDocumentsResponses,
  SearchDocumentsErrors,
  CancelEnrollmentData,
  CancelEnrollmentResponses,
  CancelEnrollmentErrors,
  GetEnrollmentData,
  GetEnrollmentResponses,
  GetEnrollmentErrors,
  GetStudentScheduleData,
  GetStudentScheduleResponses,
  GetStudentScheduleErrors,
  GetEnrollmentsForInstanceData,
  GetEnrollmentsForInstanceResponses,
  GetEnrollmentsForInstanceErrors,
  GetEnrollmentCountData,
  GetEnrollmentCountResponses,
  GetEnrollmentCountErrors,
  HasCapacityForEnrollmentData,
  HasCapacityForEnrollmentResponses,
  HasCapacityForEnrollmentErrors,
  GetStatusTransitionsData,
  GetStatusTransitionsResponses,
  GetStatusTransitionsErrors,
  CheckRubricAssociationData,
  CheckRubricAssociationResponses,
  CheckRubricAssociationErrors,
  GetPrimaryRubricData,
  GetPrimaryRubricResponses,
  GetPrimaryRubricErrors,
  GetRubricsByContextData,
  GetRubricsByContextResponses,
  GetRubricsByContextErrors,
  GetCourseEnrollmentsData,
  GetCourseEnrollmentsResponses,
  GetCourseEnrollmentsErrors,
  GetCourseCompletionRateData,
  GetCourseCompletionRateResponses,
  GetCourseCompletionRateErrors,
  RemoveAllCategoriesFromCourseData,
  RemoveAllCategoriesFromCourseResponses,
  RemoveAllCategoriesFromCourseErrors,
  GetCourseCategoriesData,
  GetCourseCategoriesResponses,
  GetCourseCategoriesErrors,
  SearchCoursesData,
  SearchCoursesResponses,
  SearchCoursesErrors,
  SearchRequirementsData,
  SearchRequirementsResponses,
  SearchRequirementsErrors,
  GetPublishedCoursesData,
  GetPublishedCoursesResponses,
  GetPublishedCoursesErrors,
  GetCourseMediaData,
  GetCourseMediaResponses,
  GetCourseMediaErrors,
  SearchLessonsData,
  SearchLessonsResponses,
  SearchLessonsErrors,
  GetCoursesByInstructorData,
  GetCoursesByInstructorResponses,
  GetCoursesByInstructorErrors,
  SearchEnrollmentsData,
  SearchEnrollmentsResponses,
  SearchEnrollmentsErrors,
  SearchLessonContentData,
  SearchLessonContentResponses,
  SearchLessonContentErrors,
  GetCoursesByCategoryData,
  GetCoursesByCategoryResponses,
  GetCoursesByCategoryErrors,
  SearchCategoryMappingsData,
  SearchCategoryMappingsResponses,
  SearchCategoryMappingsErrors,
  SearchAssessmentsData,
  SearchAssessmentsResponses,
  SearchAssessmentsErrors,
  GetActiveCoursesData,
  GetActiveCoursesResponses,
  GetActiveCoursesErrors,
  IsCourseCreatorVerifiedData,
  IsCourseCreatorVerifiedResponses,
  IsCourseCreatorVerifiedErrors,
  GetVerifiedCourseCreatorsData,
  GetVerifiedCourseCreatorsResponses,
  GetVerifiedCourseCreatorsErrors,
  GetUnverifiedCourseCreatorsData,
  GetUnverifiedCourseCreatorsResponses,
  GetUnverifiedCourseCreatorsErrors,
  SearchCourseCreatorsData,
  SearchCourseCreatorsResponses,
  SearchCourseCreatorsErrors,
  CountCourseCreatorsByVerificationStatusData,
  CountCourseCreatorsByVerificationStatusResponses,
  CountCourseCreatorsByVerificationStatusErrors,
  SearchContentTypesData,
  SearchContentTypesResponses,
  SearchContentTypesErrors,
  CheckMimeTypeSupportData,
  CheckMimeTypeSupportResponses,
  CheckMimeTypeSupportErrors,
  GetMediaContentTypesData,
  GetMediaContentTypesResponses,
  GetMediaContentTypesErrors,
  GetSubCategoriesData,
  GetSubCategoriesResponses,
  GetSubCategoriesErrors,
  SearchCategoriesData,
  SearchCategoriesResponses,
  SearchCategoriesErrors,
  GetRootCategoriesData,
  GetRootCategoriesResponses,
  GetRootCategoriesErrors,
  PreviewRecurringClassScheduleData,
  PreviewRecurringClassScheduleResponses,
  PreviewRecurringClassScheduleErrors,
  CheckClassSchedulingConflictsData,
  CheckClassSchedulingConflictsResponses,
  CheckClassSchedulingConflictsErrors,
  GetClassDefinitionsForOrganisationData,
  GetClassDefinitionsForOrganisationResponses,
  GetClassDefinitionsForOrganisationErrors,
  GetClassDefinitionsForInstructorData,
  GetClassDefinitionsForInstructorResponses,
  GetClassDefinitionsForInstructorErrors,
  GetClassDefinitionsForCourseData,
  GetClassDefinitionsForCourseResponses,
  GetClassDefinitionsForCourseErrors,
  GetAllActiveClassDefinitionsData,
  GetAllActiveClassDefinitionsResponses,
  GetAllActiveClassDefinitionsErrors,
  VerifyCertificateData,
  VerifyCertificateResponses,
  VerifyCertificateErrors,
  SearchCertificateTemplatesData,
  SearchCertificateTemplatesResponses,
  SearchCertificateTemplatesErrors,
  GetStudentCertificatesData,
  GetStudentCertificatesResponses,
  GetStudentCertificatesErrors,
  GetDownloadableCertificatesData,
  GetDownloadableCertificatesResponses,
  GetDownloadableCertificatesErrors,
  SearchCertificatesData,
  SearchCertificatesResponses,
  SearchCertificatesErrors,
  GetRevokedCertificatesData,
  GetRevokedCertificatesResponses,
  GetRevokedCertificatesErrors,
  GetProgramCertificates1Data,
  GetProgramCertificates1Responses,
  GetProgramCertificates1Errors,
  GetCertificateByNumberData,
  GetCertificateByNumberResponses,
  GetCertificateByNumberErrors,
  GetCourseCertificatesData,
  GetCourseCertificatesResponses,
  GetCourseCertificatesErrors,
  GetAssignmentSubmissionsData,
  GetAssignmentSubmissionsResponses,
  GetAssignmentSubmissionsErrors,
  GetHighPerformanceSubmissionsData,
  GetHighPerformanceSubmissionsResponses,
  GetHighPerformanceSubmissionsErrors,
  GetAverageScoreData,
  GetAverageScoreResponses,
  GetAverageScoreErrors,
  GetSubmissionAnalyticsData,
  GetSubmissionAnalyticsResponses,
  GetSubmissionAnalyticsErrors,
  SearchSubmissionsData,
  SearchSubmissionsResponses,
  SearchSubmissionsErrors,
  SearchAssignmentsData,
  SearchAssignmentsResponses,
  SearchAssignmentsErrors,
  GetPendingGradingData,
  GetPendingGradingResponses,
  GetPendingGradingErrors,
  IsUserSystemAdminData,
  IsUserSystemAdminResponses,
  IsUserSystemAdminErrors,
  IsUserAdminData,
  IsUserAdminResponses,
  IsUserAdminErrors,
  GetSystemAdminUsersData,
  GetSystemAdminUsersResponses,
  GetSystemAdminUsersErrors,
  GetOrganizationAdminUsersData,
  GetOrganizationAdminUsersResponses,
  GetOrganizationAdminUsersErrors,
  GetAdminEligibleUsersData,
  GetAdminEligibleUsersResponses,
  GetAdminEligibleUsersErrors,
  GetAdminUsersData,
  GetAdminUsersResponses,
  GetAdminUsersErrors,
  IsOrganisationVerifiedData,
  IsOrganisationVerifiedResponses,
  IsOrganisationVerifiedErrors,
  IsInstructorVerifiedData,
  IsInstructorVerifiedResponses,
  IsInstructorVerifiedErrors,
  GetDashboardStatisticsData,
  GetDashboardStatisticsResponses,
  GetDashboardStatisticsErrors,
  CancelInvitationData,
  CancelInvitationResponses,
  CancelInvitationErrors,
  CleanupOldInvitationsData,
  CleanupOldInvitationsResponses,
  CleanupOldInvitationsErrors,
  DissociateRubricData,
  DissociateRubricResponses,
  DissociateRubricErrors,
  DissociateRubricByContextData,
  DissociateRubricByContextResponses,
  DissociateRubricByContextErrors,
  RemoveCategoryFromCourseData,
  RemoveCategoryFromCourseResponses,
  RemoveCategoryFromCourseErrors,
  RemoveAdminDomainData,
  RemoveAdminDomainResponses,
  RemoveAdminDomainErrors,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';
import {
  getUserByUuidResponseTransformer,
  updateUserResponseTransformer,
  getTrainingBranchByUuidResponseTransformer,
  updateTrainingBranchResponseTransformer,
  getStudentByIdResponseTransformer,
  updateStudentResponseTransformer,
  getAssessmentRubricByUuidResponseTransformer,
  updateAssessmentRubricResponseTransformer,
  getScoringLevelResponseTransformer,
  updateScoringLevelResponseTransformer,
  updateMatrixCellResponseTransformer,
  updateRubricCriterionResponseTransformer,
  updateRubricScoringResponseTransformer,
  getQuizByUuidResponseTransformer,
  updateQuizResponseTransformer,
  updateQuizQuestionResponseTransformer,
  updateQuestionOptionResponseTransformer,
  getTrainingProgramByUuidResponseTransformer,
  updateTrainingProgramResponseTransformer,
  updateProgramRequirementResponseTransformer,
  updateProgramCourseResponseTransformer,
  getOrganisationByUuidResponseTransformer,
  updateOrganisationResponseTransformer,
  getTrainingBranchByUuid1ResponseTransformer,
  updateTrainingBranch1ResponseTransformer,
  getInstructorByUuidResponseTransformer,
  updateInstructorResponseTransformer,
  updateInstructorSkillResponseTransformer,
  updateInstructorMembershipResponseTransformer,
  updateInstructorExperienceResponseTransformer,
  updateInstructorEducationResponseTransformer,
  updateInstructorDocumentResponseTransformer,
  getAvailabilitySlotResponseTransformer,
  updateAvailabilitySlotResponseTransformer,
  getCourseByUuidResponseTransformer,
  updateCourseResponseTransformer,
  setPrimaryRubricResponseTransformer,
  updateAssociationResponseTransformer,
  updateCourseRequirementResponseTransformer,
  getCourseLessonResponseTransformer,
  updateCourseLessonResponseTransformer,
  updateLessonContentResponseTransformer,
  updateCourseAssessmentResponseTransformer,
  getCourseCreatorByUuidResponseTransformer,
  updateCourseCreatorResponseTransformer,
  updateGradingLevelResponseTransformer,
  updateDifficultyLevelResponseTransformer,
  updateContentTypeResponseTransformer,
  getCategoryByUuidResponseTransformer,
  updateCategoryResponseTransformer,
  getClassDefinitionResponseTransformer,
  updateClassDefinitionResponseTransformer,
  scheduleRecurringClassFromDefinitionResponseTransformer,
  updateRecurringClassScheduleResponseTransformer,
  getClassRecurrencePatternResponseTransformer,
  updateClassRecurrencePatternResponseTransformer,
  getCertificateByUuidResponseTransformer,
  updateCertificateResponseTransformer,
  updateCertificateTemplateResponseTransformer,
  getAssignmentByUuidResponseTransformer,
  updateAssignmentResponseTransformer,
  acceptInvitationResponseTransformer,
  uploadProfileImageResponseTransformer,
  getAllTrainingBranchesResponseTransformer,
  createTrainingBranchResponseTransformer,
  scheduleClassResponseTransformer,
  getAllStudentsResponseTransformer,
  createStudentResponseTransformer,
  getAllAssessmentRubricsResponseTransformer,
  createAssessmentRubricResponseTransformer,
  getScoringLevelsByRubricResponseTransformer,
  createRubricScoringLevelResponseTransformer,
  createRubricScoringLevelsBatchResponseTransformer,
  recalculateScoresResponseTransformer,
  getRubricCriteriaResponseTransformer,
  getRubricScoringResponseTransformer,
  addRubricScoringResponseTransformer,
  getAllQuizzesResponseTransformer,
  createQuizResponseTransformer,
  getQuizQuestionsResponseTransformer,
  addQuizQuestionResponseTransformer,
  getQuestionOptionsResponseTransformer,
  addQuestionOptionResponseTransformer,
  getAllTrainingProgramsResponseTransformer,
  createTrainingProgramResponseTransformer,
  publishProgramResponseTransformer,
  getProgramRequirementsResponseTransformer,
  addProgramRequirementResponseTransformer,
  getProgramCoursesResponseTransformer,
  addProgramCourseResponseTransformer,
  getAllOrganisationsResponseTransformer,
  createOrganisationResponseTransformer,
  getTrainingBranchesByOrganisationResponseTransformer,
  createTrainingBranch1ResponseTransformer,
  getBranchInvitationsResponseTransformer,
  createBranchInvitationResponseTransformer,
  getOrganizationInvitationsResponseTransformer,
  createOrganizationInvitationResponseTransformer,
  processPendingInvitationsResponseTransformer,
  acceptInvitation1ResponseTransformer,
  getAllInstructorsResponseTransformer,
  createInstructorResponseTransformer,
  getInstructorSkillsResponseTransformer,
  addInstructorSkillResponseTransformer,
  getInstructorMembershipsResponseTransformer,
  addInstructorMembershipResponseTransformer,
  getInstructorExperienceResponseTransformer,
  addInstructorExperienceResponseTransformer,
  getInstructorEducationResponseTransformer,
  addInstructorEducationResponseTransformer,
  getInstructorDocumentsResponseTransformer,
  addInstructorDocumentResponseTransformer,
  verifyDocumentResponseTransformer,
  createAvailabilitySlotResponseTransformer,
  enrollStudentResponseTransformer,
  getAllCoursesResponseTransformer,
  createCourseResponseTransformer,
  unpublishCourseResponseTransformer,
  uploadCourseThumbnailResponseTransformer,
  publishCourseResponseTransformer,
  uploadCourseIntroVideoResponseTransformer,
  uploadCourseBannerResponseTransformer,
  archiveCourseResponseTransformer,
  getCourseRubricsResponseTransformer,
  associateRubricResponseTransformer,
  getCourseRequirementsResponseTransformer,
  addCourseRequirementResponseTransformer,
  getCourseLessonsResponseTransformer,
  addCourseLessonResponseTransformer,
  getLessonContentResponseTransformer,
  addLessonContentResponseTransformer,
  getCourseAssessmentsResponseTransformer,
  addCourseAssessmentResponseTransformer,
  getAllCourseCreatorsResponseTransformer,
  createCourseCreatorResponseTransformer,
  verifyCourseCreatorResponseTransformer,
  unverifyCourseCreatorResponseTransformer,
  getAllGradingLevelsResponseTransformer,
  createGradingLevelResponseTransformer,
  getAllDifficultyLevelsResponseTransformer,
  createDifficultyLevelResponseTransformer,
  getAllContentTypesResponseTransformer,
  createContentTypeResponseTransformer,
  getAllCategoriesResponseTransformer,
  createCategoryResponseTransformer,
  createClassDefinitionResponseTransformer,
  createClassRecurrencePatternResponseTransformer,
  getAllCertificatesResponseTransformer,
  createCertificateResponseTransformer,
  generateCertificateUrlResponseTransformer,
  getCertificateTemplatesResponseTransformer,
  createCertificateTemplateResponseTransformer,
  generateProgramCertificateResponseTransformer,
  generateCourseCertificateResponseTransformer,
  getAllAssignmentsResponseTransformer,
  createAssignmentResponseTransformer,
  submitAssignmentResponseTransformer,
  returnSubmissionResponseTransformer,
  gradeSubmissionResponseTransformer,
  assignAdminDomainResponseTransformer,
  verifyOrganisationResponseTransformer,
  unverifyOrganisationResponseTransformer,
  verifyInstructorResponseTransformer,
  unverifyInstructorResponseTransformer,
  getAllUsersResponseTransformer,
  getInvitationsSentByUserResponseTransformer,
  getPendingInvitationsForUserResponseTransformer,
  searchResponseTransformer,
  search1ResponseTransformer,
  getTrainingBranchesByOrganisation1ResponseTransformer,
  getScheduledInstanceResponseTransformer,
  getInstructorScheduleResponseTransformer,
  searchStudentsResponseTransformer,
  getPassingScoringLevelsResponseTransformer,
  getHighestScoringLevelResponseTransformer,
  getRubricMatrixResponseTransformer,
  getRubricMatrixViewResponseTransformer,
  searchAssessmentRubricsResponseTransformer,
  getRubricsByTypeResponseTransformer,
  getRubricsByStatusResponseTransformer,
  searchPublicRubricsResponseTransformer,
  getPublicRubricsResponseTransformer,
  getPopularRubricsResponseTransformer,
  getInstructorRubricsResponseTransformer,
  getGeneralRubricsResponseTransformer,
  getQuizAttemptsResponseTransformer,
  searchQuizzesResponseTransformer,
  searchQuestionsResponseTransformer,
  searchAttemptsResponseTransformer,
  getProgramEnrollmentsResponseTransformer,
  getRequiredCoursesResponseTransformer,
  getOptionalCoursesResponseTransformer,
  getProgramCertificatesResponseTransformer,
  searchTrainingProgramsResponseTransformer,
  searchProgramRequirementsResponseTransformer,
  getPublishedProgramsResponseTransformer,
  getProgramsByInstructorResponseTransformer,
  getFreeProgramsResponseTransformer,
  searchProgramEnrollmentsResponseTransformer,
  searchProgramCoursesResponseTransformer,
  getProgramsByCategoryResponseTransformer,
  getActiveProgramsResponseTransformer,
  getUsersByOrganisationResponseTransformer,
  getUsersByOrganisationAndDomainResponseTransformer,
  getBranchUsersResponseTransformer,
  getBranchUsersByDomainResponseTransformer,
  search2ResponseTransformer,
  getInvitationByTokenResponseTransformer,
  previewInvitationResponseTransformer,
  getPendingInvitationsForEmailResponseTransformer,
  getInstructorAvailabilityResponseTransformer,
  searchAvailabilityResponseTransformer,
  getAvailabilityForDateResponseTransformer,
  findAvailableSlotsResponseTransformer,
  searchSkillsResponseTransformer,
  searchInstructorsResponseTransformer,
  searchMembershipsResponseTransformer,
  searchExperienceResponseTransformer,
  searchEducationResponseTransformer,
  searchDocumentsResponseTransformer,
  getEnrollmentResponseTransformer,
  getStudentScheduleResponseTransformer,
  getEnrollmentsForInstanceResponseTransformer,
  getEnrollmentCountResponseTransformer,
  getPrimaryRubricResponseTransformer,
  getRubricsByContextResponseTransformer,
  getCourseEnrollmentsResponseTransformer,
  getCourseCategoriesResponseTransformer,
  searchCoursesResponseTransformer,
  searchRequirementsResponseTransformer,
  getPublishedCoursesResponseTransformer,
  searchLessonsResponseTransformer,
  getCoursesByInstructorResponseTransformer,
  searchEnrollmentsResponseTransformer,
  searchLessonContentResponseTransformer,
  getCoursesByCategoryResponseTransformer,
  searchCategoryMappingsResponseTransformer,
  searchAssessmentsResponseTransformer,
  getActiveCoursesResponseTransformer,
  getVerifiedCourseCreatorsResponseTransformer,
  getUnverifiedCourseCreatorsResponseTransformer,
  searchCourseCreatorsResponseTransformer,
  countCourseCreatorsByVerificationStatusResponseTransformer,
  searchContentTypesResponseTransformer,
  getMediaContentTypesResponseTransformer,
  getSubCategoriesResponseTransformer,
  searchCategoriesResponseTransformer,
  getRootCategoriesResponseTransformer,
  previewRecurringClassScheduleResponseTransformer,
  checkClassSchedulingConflictsResponseTransformer,
  getClassDefinitionsForOrganisationResponseTransformer,
  getClassDefinitionsForInstructorResponseTransformer,
  getClassDefinitionsForCourseResponseTransformer,
  getAllActiveClassDefinitionsResponseTransformer,
  searchCertificateTemplatesResponseTransformer,
  getStudentCertificatesResponseTransformer,
  getDownloadableCertificatesResponseTransformer,
  searchCertificatesResponseTransformer,
  getRevokedCertificatesResponseTransformer,
  getProgramCertificates1ResponseTransformer,
  getCertificateByNumberResponseTransformer,
  getCourseCertificatesResponseTransformer,
  getAssignmentSubmissionsResponseTransformer,
  getHighPerformanceSubmissionsResponseTransformer,
  searchSubmissionsResponseTransformer,
  searchAssignmentsResponseTransformer,
  getPendingGradingResponseTransformer,
  getSystemAdminUsersResponseTransformer,
  getOrganizationAdminUsersResponseTransformer,
  getAdminEligibleUsersResponseTransformer,
  getAdminUsersResponseTransformer,
  getDashboardStatisticsResponseTransformer,
  removeAdminDomainResponseTransformer,
} from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Delete a user by UUID
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponses,
    DeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}',
    ...options,
  });
};

/**
 * Get a user by UUID
 */
export const getUserByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserByUuidResponses,
    GetUserByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getUserByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}',
    ...options,
  });
};

/**
 * Update a user by UUID
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>(
    {
      responseTransformer: updateUserResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/users/{uuid}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    }
  );
};

/**
 * Delete a training branch by UUID
 */
export const deleteTrainingBranch = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTrainingBranchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTrainingBranchResponses,
    DeleteTrainingBranchErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches/{uuid}',
    ...options,
  });
};

/**
 * Get a training branch by UUID
 */
export const getTrainingBranchByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingBranchByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingBranchByUuidResponses,
    GetTrainingBranchByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getTrainingBranchByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches/{uuid}',
    ...options,
  });
};

/**
 * Update a training branch by UUID
 */
export const updateTrainingBranch = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTrainingBranchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTrainingBranchResponses,
    UpdateTrainingBranchErrors,
    ThrowOnError
  >({
    responseTransformer: updateTrainingBranchResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a student
 * Removes a student record from the system.
 */
export const deleteStudent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStudentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteStudentResponses,
    DeleteStudentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students/{uuid}',
    ...options,
  });
};

/**
 * Get student by ID
 * Fetches a student by their UUID.
 */
export const getStudentById = <ThrowOnError extends boolean = false>(
  options: Options<GetStudentByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStudentByIdResponses,
    GetStudentByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getStudentByIdResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students/{uuid}',
    ...options,
  });
};

/**
 * Update a student
 * Updates an existing student record.
 */
export const updateStudent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStudentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateStudentResponses,
    UpdateStudentErrors,
    ThrowOnError
  >({
    responseTransformer: updateStudentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete an assessment rubric
 * Deletes an assessment rubric and all its associated criteria and scoring levels.
 */
export const deleteAssessmentRubric = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAssessmentRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAssessmentRubricResponses,
    DeleteAssessmentRubricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{uuid}',
    ...options,
  });
};

/**
 * Get an assessment rubric by UUID
 * Retrieves a single assessment rubric by its unique identifier.
 */
export const getAssessmentRubricByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetAssessmentRubricByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssessmentRubricByUuidResponses,
    GetAssessmentRubricByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getAssessmentRubricByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{uuid}',
    ...options,
  });
};

/**
 * Update an assessment rubric
 * Updates an existing assessment rubric.
 */
export const updateAssessmentRubric = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAssessmentRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAssessmentRubricResponses,
    UpdateAssessmentRubricErrors,
    ThrowOnError
  >({
    responseTransformer: updateAssessmentRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a scoring level
 * Removes a scoring level from the specified rubric. This will also remove any associated matrix cells.
 */
export const deleteScoringLevel = <ThrowOnError extends boolean = false>(
  options: Options<DeleteScoringLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteScoringLevelResponses,
    DeleteScoringLevelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/{levelUuid}',
    ...options,
  });
};

/**
 * Get a specific scoring level
 * Retrieves a specific scoring level by its UUID within the context of the rubric.
 */
export const getScoringLevel = <ThrowOnError extends boolean = false>(
  options: Options<GetScoringLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetScoringLevelResponses,
    GetScoringLevelErrors,
    ThrowOnError
  >({
    responseTransformer: getScoringLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/{levelUuid}',
    ...options,
  });
};

/**
 * Update a scoring level
 * Updates an existing scoring level within the specified rubric.
 */
export const updateScoringLevel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateScoringLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateScoringLevelResponses,
    UpdateScoringLevelErrors,
    ThrowOnError
  >({
    responseTransformer: updateScoringLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/{levelUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update matrix cell
 * Updates the description for a specific matrix cell (criteria-scoring level intersection).
 */
export const updateMatrixCell = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMatrixCellData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateMatrixCellResponses,
    UpdateMatrixCellErrors,
    ThrowOnError
  >({
    responseTransformer: updateMatrixCellResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix/cells',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a rubric criterion
 * Deletes a criterion from a rubric.
 */
export const deleteRubricCriterion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRubricCriterionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRubricCriterionResponses,
    DeleteRubricCriterionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}',
    ...options,
  });
};

/**
 * Update a rubric criterion
 * Updates an existing criterion within a rubric.
 */
export const updateRubricCriterion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRubricCriterionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRubricCriterionResponses,
    UpdateRubricCriterionErrors,
    ThrowOnError
  >({
    responseTransformer: updateRubricCriterionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a scoring level
 * Deletes a scoring level from a criterion.
 */
export const deleteRubricScoring = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRubricScoringData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRubricScoringResponses,
    DeleteRubricScoringErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}/scoring/{scoringUuid}',
    ...options,
  });
};

/**
 * Update a scoring level
 * Updates an existing scoring level for a criterion.
 */
export const updateRubricScoring = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRubricScoringData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRubricScoringResponses,
    UpdateRubricScoringErrors,
    ThrowOnError
  >({
    responseTransformer: updateRubricScoringResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}/scoring/{scoringUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete quiz
 * Permanently removes a quiz and all associated data.
 */
export const deleteQuiz = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuizData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQuizResponses,
    DeleteQuizErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{uuid}',
    ...options,
  });
};

/**
 * Get quiz by UUID
 * Retrieves a complete quiz including questions and computed properties.
 */
export const getQuizByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetQuizByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuizByUuidResponses,
    GetQuizByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getQuizByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{uuid}',
    ...options,
  });
};

/**
 * Update quiz
 * Updates an existing quiz with selective field updates.
 */
export const updateQuiz = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQuizData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<UpdateQuizResponses, UpdateQuizErrors, ThrowOnError>(
    {
      responseTransformer: updateQuizResponseTransformer,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/quizzes/{uuid}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    }
  );
};

/**
 * Delete quiz question
 * Removes a question from a quiz including all options and responses.
 */
export const deleteQuizQuestion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuizQuestionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQuizQuestionResponses,
    DeleteQuizQuestionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}',
    ...options,
  });
};

/**
 * Update quiz question
 * Updates a specific question within a quiz.
 */
export const updateQuizQuestion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQuizQuestionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateQuizQuestionResponses,
    UpdateQuizQuestionErrors,
    ThrowOnError
  >({
    responseTransformer: updateQuizQuestionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete question option
 * Removes an option from a question.
 */
export const deleteQuestionOption = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuestionOptionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQuestionOptionResponses,
    DeleteQuestionOptionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options/{optionUuid}',
    ...options,
  });
};

/**
 * Update question option
 * Updates a specific option for a question.
 */
export const updateQuestionOption = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQuestionOptionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateQuestionOptionResponses,
    UpdateQuestionOptionErrors,
    ThrowOnError
  >({
    responseTransformer: updateQuestionOptionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options/{optionUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete training program
 * Permanently removes a training program and its associated data.
 */
export const deleteTrainingProgram = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTrainingProgramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTrainingProgramResponses,
    DeleteTrainingProgramErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{uuid}',
    ...options,
  });
};

/**
 * Get program by UUID
 * Retrieves a complete program profile including computed properties and analytics.
 */
export const getTrainingProgramByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingProgramByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingProgramByUuidResponses,
    GetTrainingProgramByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getTrainingProgramByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{uuid}',
    ...options,
  });
};

/**
 * Update training program
 * Updates an existing training program with selective field updates.
 */
export const updateTrainingProgram = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTrainingProgramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTrainingProgramResponses,
    UpdateTrainingProgramErrors,
    ThrowOnError
  >({
    responseTransformer: updateTrainingProgramResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete program requirement
 * Removes a requirement from a program.
 */
export const deleteProgramRequirement = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProgramRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProgramRequirementResponses,
    DeleteProgramRequirementErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/requirements/{requirementUuid}',
    ...options,
  });
};

/**
 * Update program requirement
 * Updates a specific requirement for a program.
 */
export const updateProgramRequirement = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProgramRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProgramRequirementResponses,
    UpdateProgramRequirementErrors,
    ThrowOnError
  >({
    responseTransformer: updateProgramRequirementResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/requirements/{requirementUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove course from program
 * Removes the association between a course and program.
 */
export const removeProgramCourse = <ThrowOnError extends boolean = false>(
  options: Options<RemoveProgramCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveProgramCourseResponses,
    RemoveProgramCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses/{courseUuid}',
    ...options,
  });
};

/**
 * Update program course
 * Updates course association settings within a program.
 */
export const updateProgramCourse = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProgramCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProgramCourseResponses,
    UpdateProgramCourseErrors,
    ThrowOnError
  >({
    responseTransformer: updateProgramCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses/{courseUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete an organisation by UUID
 */
export const deleteOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteOrganisationResponses,
    DeleteOrganisationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}',
    ...options,
  });
};

/**
 * Get an organisation by UUID
 */
export const getOrganisationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetOrganisationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganisationByUuidResponses,
    GetOrganisationByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getOrganisationByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}',
    ...options,
  });
};

/**
 * Update an organisation by UUID
 */
export const updateOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateOrganisationResponses,
    UpdateOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: updateOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a training branch by UUID within organization
 */
export const deleteTrainingBranch1 = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTrainingBranch1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTrainingBranch1Responses,
    DeleteTrainingBranch1Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}',
    ...options,
  });
};

/**
 * Get a training branch by UUID within organization
 */
export const getTrainingBranchByUuid1 = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingBranchByUuid1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingBranchByUuid1Responses,
    GetTrainingBranchByUuid1Errors,
    ThrowOnError
  >({
    responseTransformer: getTrainingBranchByUuid1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}',
    ...options,
  });
};

/**
 * Update a training branch by UUID within organization
 */
export const updateTrainingBranch1 = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTrainingBranch1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTrainingBranch1Responses,
    UpdateTrainingBranch1Errors,
    ThrowOnError
  >({
    responseTransformer: updateTrainingBranch1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete an instructor
 * Removes an instructor record from the system.
 */
export const deleteInstructor = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorResponses,
    DeleteInstructorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{uuid}',
    ...options,
  });
};

/**
 * Get instructor by UUID
 * Fetches an instructor by their UUID.
 */
export const getInstructorByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorByUuidResponses,
    GetInstructorByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{uuid}',
    ...options,
  });
};

/**
 * Update an instructor
 * Updates an existing instructor record.
 */
export const updateInstructor = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorResponses,
    UpdateInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete instructor skill
 * Removes a skill from an instructor
 */
export const deleteInstructorSkill = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorSkillData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorSkillResponses,
    DeleteInstructorSkillErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/skills/{skillUuid}',
    ...options,
  });
};

/**
 * Update instructor skill
 * Updates a specific skill record
 */
export const updateInstructorSkill = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorSkillData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorSkillResponses,
    UpdateInstructorSkillErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorSkillResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/skills/{skillUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete instructor membership
 * Removes a membership record from an instructor
 */
export const deleteInstructorMembership = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorMembershipResponses,
    DeleteInstructorMembershipErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/memberships/{membershipUuid}',
    ...options,
  });
};

/**
 * Update instructor membership
 * Updates a specific membership record
 */
export const updateInstructorMembership = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorMembershipResponses,
    UpdateInstructorMembershipErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorMembershipResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/memberships/{membershipUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete instructor experience
 * Removes an experience record from an instructor
 */
export const deleteInstructorExperience = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorExperienceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorExperienceResponses,
    DeleteInstructorExperienceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/experience/{experienceUuid}',
    ...options,
  });
};

/**
 * Update instructor experience
 * Updates a specific experience record
 */
export const updateInstructorExperience = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorExperienceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorExperienceResponses,
    UpdateInstructorExperienceErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorExperienceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/experience/{experienceUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete instructor education
 * Removes an education record from an instructor
 */
export const deleteInstructorEducation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorEducationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorEducationResponses,
    DeleteInstructorEducationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/education/{educationUuid}',
    ...options,
  });
};

/**
 * Update instructor education
 * Updates a specific education record
 */
export const updateInstructorEducation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorEducationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorEducationResponses,
    UpdateInstructorEducationErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorEducationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/education/{educationUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete instructor document
 * Removes a document from an instructor
 */
export const deleteInstructorDocument = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInstructorDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteInstructorDocumentResponses,
    DeleteInstructorDocumentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}',
    ...options,
  });
};

/**
 * Update instructor document
 * Updates a specific document
 */
export const updateInstructorDocument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInstructorDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateInstructorDocumentResponses,
    UpdateInstructorDocumentErrors,
    ThrowOnError
  >({
    responseTransformer: updateInstructorDocumentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete an availability slot
 * Removes a specific availability slot
 */
export const deleteAvailabilitySlot = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAvailabilitySlotData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAvailabilitySlotResponses,
    DeleteAvailabilitySlotErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/slots/{slotUuid}',
    ...options,
  });
};

/**
 * Get a specific availability slot
 * Retrieves a single availability slot by its UUID
 */
export const getAvailabilitySlot = <ThrowOnError extends boolean = false>(
  options: Options<GetAvailabilitySlotData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAvailabilitySlotResponses,
    GetAvailabilitySlotErrors,
    ThrowOnError
  >({
    responseTransformer: getAvailabilitySlotResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/slots/{slotUuid}',
    ...options,
  });
};

/**
 * Update an availability slot
 * Updates an existing availability slot
 */
export const updateAvailabilitySlot = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAvailabilitySlotData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAvailabilitySlotResponses,
    UpdateAvailabilitySlotErrors,
    ThrowOnError
  >({
    responseTransformer: updateAvailabilitySlotResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/slots/{slotUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete course
 * Permanently removes a course, its category associations, and all associated data.
 */
export const deleteCourse = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseResponses,
    DeleteCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}',
    ...options,
  });
};

/**
 * Get course by UUID
 * Retrieves a complete course profile including computed properties and category information.
 *
 * **Response includes:**
 * - All course details and metadata
 * - `category_uuids`: List of category UUIDs the course belongs to
 * - `category_names`: List of category names for display (read-only)
 * - `category_count`: Number of categories assigned to the course
 * - `has_multiple_categories`: Boolean indicating if course has multiple categories
 *
 */
export const getCourseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseByUuidResponses,
    GetCourseByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}',
    ...options,
  });
};

/**
 * Update course
 * Updates an existing course with selective field updates including category management.
 *
 * **Category Updates:**
 * - Provide `category_uuids` to completely replace existing categories
 * - To add categories, include existing + new category UUIDs
 * - To remove all categories, provide an empty array
 * - Changes to categories are applied atomically
 *
 * **Authorization:** Only the course owner can update the course.
 *
 */
export const updateCourse = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseResponses,
    UpdateCourseErrors,
    ThrowOnError
  >({
    responseTransformer: updateCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Set primary rubric for a course
 * Designates a specific rubric as the primary rubric for the course.
 */
export const setPrimaryRubric = <ThrowOnError extends boolean = false>(
  options: Options<SetPrimaryRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    SetPrimaryRubricResponses,
    SetPrimaryRubricErrors,
    ThrowOnError
  >({
    responseTransformer: setPrimaryRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/{rubricUuid}/primary',
    ...options,
  });
};

/**
 * Update rubric association
 * Updates an existing rubric association, allowing changes to context, primary status, etc.
 */
export const updateAssociation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAssociationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAssociationResponses,
    UpdateAssociationErrors,
    ThrowOnError
  >({
    responseTransformer: updateAssociationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/associations/{associationUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete course requirement
 * Removes a requirement from a course.
 */
export const deleteCourseRequirement = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseRequirementResponses,
    DeleteCourseRequirementErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/requirements/{requirementUuid}',
    ...options,
  });
};

/**
 * Update course requirement
 * Updates a specific requirement for a course.
 */
export const updateCourseRequirement = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseRequirementResponses,
    UpdateCourseRequirementErrors,
    ThrowOnError
  >({
    responseTransformer: updateCourseRequirementResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/requirements/{requirementUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete course lesson
 * Removes a lesson from a course including all associated content.
 */
export const deleteCourseLesson = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseLessonData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseLessonResponses,
    DeleteCourseLessonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}',
    ...options,
  });
};

/**
 * Get lesson by UUID
 * Retrieves a specific lesson by its UUID within a course context.
 *
 * **Lesson Retrieval Details:**
 * - Returns complete lesson profile including computed properties
 * - Validates that the lesson belongs to the specified course
 * - Includes lesson content count and duration calculations
 * - Provides lesson status and completion tracking information
 *
 * **Response includes:**
 * - Basic lesson information (title, description, objectives)
 * - Lesson metadata (duration, sequence number, status)
 * - Associated course UUID validation
 * - Content summary statistics
 * - Computed properties (isCompleted, progressPercentage for authenticated users)
 *
 * **Use Cases:**
 * - Direct lesson navigation from course content
 * - Lesson detail page rendering
 * - Progress tracking and analytics
 * - Content validation and prerequisites checking
 *
 * **Security Considerations:**
 * - Validates lesson belongs to specified course
 * - Respects course enrollment status for detailed information
 * - May return limited data for unenrolled users depending on course visibility settings
 *
 */
export const getCourseLesson = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseLessonData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseLessonResponses,
    GetCourseLessonErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseLessonResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}',
    ...options,
  });
};

/**
 * Update course lesson
 * Updates a specific lesson within a course.
 */
export const updateCourseLesson = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseLessonData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseLessonResponses,
    UpdateCourseLessonErrors,
    ThrowOnError
  >({
    responseTransformer: updateCourseLessonResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete lesson content
 * Removes content from a lesson.
 */
export const deleteLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLessonContentResponses,
    DeleteLessonContentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/{contentUuid}',
    ...options,
  });
};

/**
 * Update lesson content
 * Updates a specific content item within a lesson.
 */
export const updateLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLessonContentResponses,
    UpdateLessonContentErrors,
    ThrowOnError
  >({
    responseTransformer: updateLessonContentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/{contentUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete course assessment
 * Removes an assessment from a course.
 */
export const deleteCourseAssessment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseAssessmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseAssessmentResponses,
    DeleteCourseAssessmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/assessments/{assessmentUuid}',
    ...options,
  });
};

/**
 * Update course assessment
 * Updates a specific assessment within a course.
 */
export const updateCourseAssessment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseAssessmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseAssessmentResponses,
    UpdateCourseAssessmentErrors,
    ThrowOnError
  >({
    responseTransformer: updateCourseAssessmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/assessments/{assessmentUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a course creator
 * Removes a course creator profile from the system. This will cascade delete associated data.
 */
export const deleteCourseCreator = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCourseCreatorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCourseCreatorResponses,
    DeleteCourseCreatorErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}',
    ...options,
  });
};

/**
 * Get course creator by UUID
 * Fetches a course creator profile by their unique identifier.
 */
export const getCourseCreatorByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseCreatorByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseCreatorByUuidResponses,
    GetCourseCreatorByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseCreatorByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}',
    ...options,
  });
};

/**
 * Update a course creator
 * Updates an existing course creator profile. Only allows updating mutable fields like bio, professional headline, and website.
 */
export const updateCourseCreator = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCourseCreatorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCourseCreatorResponses,
    UpdateCourseCreatorErrors,
    ThrowOnError
  >({
    responseTransformer: updateCourseCreatorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete grading level
 * Removes a grading level.
 */
export const deleteGradingLevel = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGradingLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGradingLevelResponses,
    DeleteGradingLevelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/grading-levels/{uuid}',
    ...options,
  });
};

/**
 * Update grading level
 * Updates an existing grading level.
 */
export const updateGradingLevel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGradingLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGradingLevelResponses,
    UpdateGradingLevelErrors,
    ThrowOnError
  >({
    responseTransformer: updateGradingLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/grading-levels/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete difficulty level
 * Removes a difficulty level if no courses are using it.
 */
export const deleteDifficultyLevel = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDifficultyLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDifficultyLevelResponses,
    DeleteDifficultyLevelErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/difficulty-levels/{uuid}',
    ...options,
  });
};

/**
 * Update difficulty level
 * Updates an existing difficulty level.
 */
export const updateDifficultyLevel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDifficultyLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateDifficultyLevelResponses,
    UpdateDifficultyLevelErrors,
    ThrowOnError
  >({
    responseTransformer: updateDifficultyLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/difficulty-levels/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete content type
 * Removes a content type if no lesson content is using it.
 */
export const deleteContentType = <ThrowOnError extends boolean = false>(
  options: Options<DeleteContentTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteContentTypeResponses,
    DeleteContentTypeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types/{uuid}',
    ...options,
  });
};

/**
 * Update content type
 * Updates an existing content type.
 */
export const updateContentType = <ThrowOnError extends boolean = false>(
  options: Options<UpdateContentTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateContentTypeResponses,
    UpdateContentTypeErrors,
    ThrowOnError
  >({
    responseTransformer: updateContentTypeResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete category
 * Removes a category if it has no subcategories or associated courses.
 */
export const deleteCategory = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCategoryResponses,
    DeleteCategoryErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/{uuid}',
    ...options,
  });
};

/**
 * Get category by UUID
 * Retrieves a specific category by its UUID.
 */
export const getCategoryByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetCategoryByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCategoryByUuidResponses,
    GetCategoryByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getCategoryByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/{uuid}',
    ...options,
  });
};

/**
 * Update category
 * Updates an existing category.
 */
export const updateCategory = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCategoryResponses,
    UpdateCategoryErrors,
    ThrowOnError
  >({
    responseTransformer: updateCategoryResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Deactivate a class definition by UUID
 */
export const deactivateClassDefinition = <ThrowOnError extends boolean = false>(
  options: Options<DeactivateClassDefinitionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeactivateClassDefinitionResponses,
    DeactivateClassDefinitionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}',
    ...options,
  });
};

/**
 * Get a class definition by UUID
 */
export const getClassDefinition = <ThrowOnError extends boolean = false>(
  options: Options<GetClassDefinitionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetClassDefinitionResponses,
    GetClassDefinitionErrors,
    ThrowOnError
  >({
    responseTransformer: getClassDefinitionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}',
    ...options,
  });
};

/**
 * Update a class definition by UUID
 */
export const updateClassDefinition = <ThrowOnError extends boolean = false>(
  options: Options<UpdateClassDefinitionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateClassDefinitionResponses,
    UpdateClassDefinitionErrors,
    ThrowOnError
  >({
    responseTransformer: updateClassDefinitionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancel recurring schedule for a class definition
 */
export const cancelRecurringClassSchedule = <ThrowOnError extends boolean = false>(
  options: Options<CancelRecurringClassScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CancelRecurringClassScheduleResponses,
    CancelRecurringClassScheduleErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}/schedule',
    ...options,
  });
};

/**
 * Schedule recurring classes from a class definition
 */
export const scheduleRecurringClassFromDefinition = <ThrowOnError extends boolean = false>(
  options: Options<ScheduleRecurringClassFromDefinitionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ScheduleRecurringClassFromDefinitionResponses,
    ScheduleRecurringClassFromDefinitionErrors,
    ThrowOnError
  >({
    responseTransformer: scheduleRecurringClassFromDefinitionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}/schedule',
    ...options,
  });
};

/**
 * Update recurring schedule for a class definition
 */
export const updateRecurringClassSchedule = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecurringClassScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRecurringClassScheduleResponses,
    UpdateRecurringClassScheduleErrors,
    ThrowOnError
  >({
    responseTransformer: updateRecurringClassScheduleResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}/schedule',
    ...options,
  });
};

/**
 * Delete a recurrence pattern by UUID
 */
export const deleteClassRecurrencePattern = <ThrowOnError extends boolean = false>(
  options: Options<DeleteClassRecurrencePatternData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteClassRecurrencePatternResponses,
    DeleteClassRecurrencePatternErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/recurrence-patterns/{uuid}',
    ...options,
  });
};

/**
 * Get a recurrence pattern by UUID
 */
export const getClassRecurrencePattern = <ThrowOnError extends boolean = false>(
  options: Options<GetClassRecurrencePatternData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetClassRecurrencePatternResponses,
    GetClassRecurrencePatternErrors,
    ThrowOnError
  >({
    responseTransformer: getClassRecurrencePatternResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/recurrence-patterns/{uuid}',
    ...options,
  });
};

/**
 * Update a recurrence pattern by UUID
 */
export const updateClassRecurrencePattern = <ThrowOnError extends boolean = false>(
  options: Options<UpdateClassRecurrencePatternData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateClassRecurrencePatternResponses,
    UpdateClassRecurrencePatternErrors,
    ThrowOnError
  >({
    responseTransformer: updateClassRecurrencePatternResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/recurrence-patterns/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete certificate
 * Permanently removes a certificate record.
 */
export const deleteCertificate = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCertificateResponses,
    DeleteCertificateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/{uuid}',
    ...options,
  });
};

/**
 * Get certificate by UUID
 * Retrieves a complete certificate including computed properties and verification status.
 */
export const getCertificateByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetCertificateByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCertificateByUuidResponses,
    GetCertificateByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getCertificateByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/{uuid}',
    ...options,
  });
};

/**
 * Update certificate
 * Updates an existing certificate with selective field updates.
 */
export const updateCertificate = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCertificateResponses,
    UpdateCertificateErrors,
    ThrowOnError
  >({
    responseTransformer: updateCertificateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete certificate template
 * Removes a certificate template.
 */
export const deleteCertificateTemplate = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCertificateTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCertificateTemplateResponses,
    DeleteCertificateTemplateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/templates/{templateUuid}',
    ...options,
  });
};

/**
 * Update certificate template
 * Updates an existing certificate template.
 */
export const updateCertificateTemplate = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCertificateTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCertificateTemplateResponses,
    UpdateCertificateTemplateErrors,
    ThrowOnError
  >({
    responseTransformer: updateCertificateTemplateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/templates/{templateUuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete assignment
 * Permanently removes an assignment and all associated submissions.
 */
export const deleteAssignment = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAssignmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAssignmentResponses,
    DeleteAssignmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{uuid}',
    ...options,
  });
};

/**
 * Get assignment by UUID
 * Retrieves a complete assignment including submission statistics.
 */
export const getAssignmentByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetAssignmentByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssignmentByUuidResponses,
    GetAssignmentByUuidErrors,
    ThrowOnError
  >({
    responseTransformer: getAssignmentByUuidResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{uuid}',
    ...options,
  });
};

/**
 * Update assignment
 * Updates an existing assignment with selective field updates.
 */
export const updateAssignment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAssignmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAssignmentResponses,
    UpdateAssignmentErrors,
    ThrowOnError
  >({
    responseTransformer: updateAssignmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Decline invitation by token
 * Declines a pending invitation for the specified user using the unique token from the invitation email. This marks the invitation as declined and sends notification emails to the inviter. The invitation must be valid (not expired, not already accepted/declined) and the user email must match the invitation recipient.
 */
export const declineInvitation = <ThrowOnError extends boolean = false>(
  options: Options<DeclineInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DeclineInvitationResponses,
    DeclineInvitationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}/invitations/decline',
    ...options,
  });
};

/**
 * Accept invitation by token
 * Accepts a pending invitation for the specified user using the unique token from the invitation email. This creates the user-organization relationship with the specified role and sends confirmation emails. The invitation must be valid (not expired, not already accepted/declined) and the user email must match the invitation recipient.
 */
export const acceptInvitation = <ThrowOnError extends boolean = false>(
  options: Options<AcceptInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AcceptInvitationResponses,
    AcceptInvitationErrors,
    ThrowOnError
  >({
    responseTransformer: acceptInvitationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}/invitations/accept',
    ...options,
  });
};

/**
 * Upload User's Profile Image
 */
export const uploadProfileImage = <ThrowOnError extends boolean = false>(
  options: Options<UploadProfileImageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadProfileImageResponses,
    UploadProfileImageErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseTransformer: uploadProfileImageResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{userUuid}/profile-image',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Get all training branches
 */
export const getAllTrainingBranches = <ThrowOnError extends boolean = false>(
  options: Options<GetAllTrainingBranchesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllTrainingBranchesResponses,
    GetAllTrainingBranchesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllTrainingBranchesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches',
    ...options,
  });
};

/**
 * Create a new training branch
 */
export const createTrainingBranch = <ThrowOnError extends boolean = false>(
  options: Options<CreateTrainingBranchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTrainingBranchResponses,
    CreateTrainingBranchErrors,
    ThrowOnError
  >({
    responseTransformer: createTrainingBranchResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check if a student has enrollment conflicts
 */
export const checkStudentConflict = <ThrowOnError extends boolean = false>(
  options: Options<CheckStudentConflictData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CheckStudentConflictResponses,
    CheckStudentConflictErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/student/{studentUuid}/check-conflict',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Schedule a new class instance
 */
export const scheduleClass = <ThrowOnError extends boolean = false>(
  options: Options<ScheduleClassData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ScheduleClassResponses,
    ScheduleClassErrors,
    ThrowOnError
  >({
    responseTransformer: scheduleClassResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/schedule',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check if an instructor has scheduling conflicts
 */
export const checkInstructorConflict = <ThrowOnError extends boolean = false>(
  options: Options<CheckInstructorConflictData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CheckInstructorConflictResponses,
    CheckInstructorConflictErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/instructor/{instructorUuid}/check-conflict',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all students
 * Fetches a paginated list of students.
 */
export const getAllStudents = <ThrowOnError extends boolean = false>(
  options: Options<GetAllStudentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllStudentsResponses,
    GetAllStudentsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllStudentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students',
    ...options,
  });
};

/**
 * Create a new student
 * Saves a new student record in the system.
 */
export const createStudent = <ThrowOnError extends boolean = false>(
  options: Options<CreateStudentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateStudentResponses,
    CreateStudentErrors,
    ThrowOnError
  >({
    responseTransformer: createStudentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all assessment rubrics
 * Retrieves a paginated list of all assessment rubrics.
 */
export const getAllAssessmentRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetAllAssessmentRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllAssessmentRubricsResponses,
    GetAllAssessmentRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllAssessmentRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics',
    ...options,
  });
};

/**
 * Create a new assessment rubric
 * Creates a new assessment rubric. The rubric can be associated with a specific course or be a general-purpose rubric.
 */
export const createAssessmentRubric = <ThrowOnError extends boolean = false>(
  options: Options<CreateAssessmentRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAssessmentRubricResponses,
    CreateAssessmentRubricErrors,
    ThrowOnError
  >({
    responseTransformer: createAssessmentRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all scoring levels for a rubric
 * Retrieves all custom scoring levels for the specified rubric, ordered by level order.
 */
export const getScoringLevelsByRubric = <ThrowOnError extends boolean = false>(
  options: Options<GetScoringLevelsByRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetScoringLevelsByRubricResponses,
    GetScoringLevelsByRubricErrors,
    ThrowOnError
  >({
    responseTransformer: getScoringLevelsByRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels',
    ...options,
  });
};

/**
 * Create a new scoring level for a rubric
 * Creates a new custom scoring level (e.g., Excellent, Good, Fair) within the specified rubric for matrix-based assessment.
 */
export const createRubricScoringLevel = <ThrowOnError extends boolean = false>(
  options: Options<CreateRubricScoringLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRubricScoringLevelResponses,
    CreateRubricScoringLevelErrors,
    ThrowOnError
  >({
    responseTransformer: createRubricScoringLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create multiple scoring levels for a rubric (batch)
 * Creates multiple custom scoring levels at once for efficient rubric setup.
 */
export const createRubricScoringLevelsBatch = <ThrowOnError extends boolean = false>(
  options: Options<CreateRubricScoringLevelsBatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRubricScoringLevelsBatchResponses,
    CreateRubricScoringLevelsBatchErrors,
    ThrowOnError
  >({
    responseTransformer: createRubricScoringLevelsBatchResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/batch',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Recalculate rubric scores
 * Recalculates maximum and minimum passing scores based on current matrix configuration and weights.
 */
export const recalculateScores = <ThrowOnError extends boolean = false>(
  options: Options<RecalculateScoresData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RecalculateScoresResponses,
    RecalculateScoresErrors,
    ThrowOnError
  >({
    responseTransformer: recalculateScoresResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix/recalculate',
    ...options,
  });
};

/**
 * Get all criteria for a rubric
 * Retrieves a paginated list of all criteria for a specific assessment rubric.
 */
export const getRubricCriteria = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricCriteriaData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricCriteriaResponses,
    GetRubricCriteriaErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricCriteriaResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria',
    ...options,
  });
};

/**
 * Add a criterion to a rubric
 * Adds a new criterion to an existing assessment rubric. If scoring levels exist, the matrix will be auto-generated.
 */
export const addRubricCriterion = <ThrowOnError extends boolean = false>(
  options: Options<AddRubricCriterionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddRubricCriterionResponses,
    AddRubricCriterionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all scoring levels for a criterion
 * Retrieves a paginated list of all scoring levels for a specific rubric criterion.
 */
export const getRubricScoring = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricScoringData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricScoringResponses,
    GetRubricScoringErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricScoringResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}/scoring',
    ...options,
  });
};

/**
 * Add a scoring level to a criterion
 * Adds a new scoring level to an existing rubric criterion.
 */
export const addRubricScoring = <ThrowOnError extends boolean = false>(
  options: Options<AddRubricScoringData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddRubricScoringResponses,
    AddRubricScoringErrors,
    ThrowOnError
  >({
    responseTransformer: addRubricScoringResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/criteria/{criteriaUuid}/scoring',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all quizzes
 * Retrieves paginated list of all quizzes with filtering support.
 */
export const getAllQuizzes = <ThrowOnError extends boolean = false>(
  options: Options<GetAllQuizzesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllQuizzesResponses,
    GetAllQuizzesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllQuizzesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes',
    ...options,
  });
};

/**
 * Create a new quiz
 * Creates a new quiz with default DRAFT status and inactive state.
 */
export const createQuiz = <ThrowOnError extends boolean = false>(
  options: Options<CreateQuizData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateQuizResponses,
    CreateQuizErrors,
    ThrowOnError
  >({
    responseTransformer: createQuizResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get quiz questions
 * Retrieves all questions for a quiz in display order with computed properties.
 */
export const getQuizQuestions = <ThrowOnError extends boolean = false>(
  options: Options<GetQuizQuestionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuizQuestionsResponses,
    GetQuizQuestionsErrors,
    ThrowOnError
  >({
    responseTransformer: getQuizQuestionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions',
    ...options,
  });
};

/**
 * Add question to quiz
 * Creates a new question for the specified quiz with automatic ordering.
 */
export const addQuizQuestion = <ThrowOnError extends boolean = false>(
  options: Options<AddQuizQuestionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddQuizQuestionResponses,
    AddQuizQuestionErrors,
    ThrowOnError
  >({
    responseTransformer: addQuizQuestionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get question options
 * Retrieves all options for a specific question.
 */
export const getQuestionOptions = <ThrowOnError extends boolean = false>(
  options: Options<GetQuestionOptionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuestionOptionsResponses,
    GetQuestionOptionsErrors,
    ThrowOnError
  >({
    responseTransformer: getQuestionOptionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options',
    ...options,
  });
};

/**
 * Add option to question
 * Creates a new option for a multiple choice or true/false question.
 */
export const addQuestionOption = <ThrowOnError extends boolean = false>(
  options: Options<AddQuestionOptionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddQuestionOptionResponses,
    AddQuestionOptionErrors,
    ThrowOnError
  >({
    responseTransformer: addQuestionOptionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reorder quiz questions
 * Updates the display order of questions within a quiz.
 */
export const reorderQuizQuestions = <ThrowOnError extends boolean = false>(
  options: Options<ReorderQuizQuestionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReorderQuizQuestionsResponses,
    ReorderQuizQuestionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/questions/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all programs
 * Retrieves paginated list of all training programs with filtering support.
 */
export const getAllTrainingPrograms = <ThrowOnError extends boolean = false>(
  options: Options<GetAllTrainingProgramsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllTrainingProgramsResponses,
    GetAllTrainingProgramsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllTrainingProgramsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs',
    ...options,
  });
};

/**
 * Create a new training program
 * Creates a new training program with default DRAFT status and inactive state.
 */
export const createTrainingProgram = <ThrowOnError extends boolean = false>(
  options: Options<CreateTrainingProgramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTrainingProgramResponses,
    CreateTrainingProgramErrors,
    ThrowOnError
  >({
    responseTransformer: createTrainingProgramResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Publish training program
 * Publishes a program making it available for enrollment.
 */
export const publishProgram = <ThrowOnError extends boolean = false>(
  options: Options<PublishProgramData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PublishProgramResponses,
    PublishProgramErrors,
    ThrowOnError
  >({
    responseTransformer: publishProgramResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{uuid}/publish',
    ...options,
  });
};

/**
 * Get program requirements
 * Retrieves all requirements for a specific program.
 */
export const getProgramRequirements = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramRequirementsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramRequirementsResponses,
    GetProgramRequirementsErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramRequirementsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/requirements',
    ...options,
  });
};

/**
 * Add requirement to program
 * Adds a new requirement or prerequisite to a program.
 */
export const addProgramRequirement = <ThrowOnError extends boolean = false>(
  options: Options<AddProgramRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddProgramRequirementResponses,
    AddProgramRequirementErrors,
    ThrowOnError
  >({
    responseTransformer: addProgramRequirementResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/requirements',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get program courses
 * Retrieves all courses in a program in sequence order with requirement status.
 */
export const getProgramCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramCoursesResponses,
    GetProgramCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses',
    ...options,
  });
};

/**
 * Add course to program
 * Associates a course with a program, setting sequence and requirement status.
 */
export const addProgramCourse = <ThrowOnError extends boolean = false>(
  options: Options<AddProgramCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddProgramCourseResponses,
    AddProgramCourseErrors,
    ThrowOnError
  >({
    responseTransformer: addProgramCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all organisations
 */
export const getAllOrganisations = <ThrowOnError extends boolean = false>(
  options: Options<GetAllOrganisationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllOrganisationsResponses,
    GetAllOrganisationsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllOrganisationsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations',
    ...options,
  });
};

/**
 * Create a new organisation
 */
export const createOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<CreateOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOrganisationResponses,
    CreateOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: createOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get training branches by organisation UUID
 */
export const getTrainingBranchesByOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingBranchesByOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingBranchesByOrganisationResponses,
    GetTrainingBranchesByOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: getTrainingBranchesByOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches',
    ...options,
  });
};

/**
 * Create a new training branch within organization
 */
export const createTrainingBranch1 = <ThrowOnError extends boolean = false>(
  options: Options<CreateTrainingBranch1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTrainingBranch1Responses,
    CreateTrainingBranch1Errors,
    ThrowOnError
  >({
    responseTransformer: createTrainingBranch1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove user from training branch
 * Removes a user from a training branch. The user remains in the parent organization but loses branch-specific assignment.
 */
export const removeUserFromBranch = <ThrowOnError extends boolean = false>(
  options: Options<RemoveUserFromBranchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveUserFromBranchResponses,
    RemoveUserFromBranchErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/{userUuid}',
    ...options,
  });
};

/**
 * Assign user to training branch
 * Assigns a user to a specific training branch with a defined role. If the user is not already in the parent organization, creates organization membership first. If the user is already in the organization, updates their branch assignment.
 */
export const assignUserToBranch = <ThrowOnError extends boolean = false>(
  options: Options<AssignUserToBranchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AssignUserToBranchResponses,
    AssignUserToBranchErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/{userUuid}',
    ...options,
  });
};

/**
 * Get all invitations for training branch
 * Retrieves all invitations (regardless of status) that have been sent specifically for this training branch. This only includes branch-specific invitations, not general organization invitations. Results are ordered by creation date (most recent first) and include all invitation statuses.
 */
export const getBranchInvitations = <ThrowOnError extends boolean = false>(
  options: Options<GetBranchInvitationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBranchInvitationsResponses,
    GetBranchInvitationsErrors,
    ThrowOnError
  >({
    responseTransformer: getBranchInvitationsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/invitations',
    ...options,
  });
};

/**
 * Create an invitation to a specific training branch
 * Creates and sends an email invitation for a user to join a specific training branch with a defined role. This is the sole endpoint for creating branch-specific invitations. The parent organization is inferred from the branch.
 */
export const createBranchInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CreateBranchInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBranchInvitationResponses,
    CreateBranchInvitationErrors,
    ThrowOnError
  >({
    responseTransformer: createBranchInvitationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/invitations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all invitations for organization
 * Retrieves all invitations (regardless of status) that have been sent for this specific organization. This includes organization-level invitations and branch-specific invitations within the organization. Results are ordered by creation date (most recent first) and include all invitation statuses.
 */
export const getOrganizationInvitations = <ThrowOnError extends boolean = false>(
  options: Options<GetOrganizationInvitationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganizationInvitationsResponses,
    GetOrganizationInvitationsErrors,
    ThrowOnError
  >({
    responseTransformer: getOrganizationInvitationsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/invitations',
    ...options,
  });
};

/**
 * Create an invitation to the top-level organization
 * Creates and sends an email invitation for a user to join the organization itself, without assignment to a specific branch. The user will have the specified role at the organization level. Use the '/{uuid}/training-branches/{branchUuid}/invitations' endpoint to invite a user directly to a branch.
 */
export const createOrganizationInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CreateOrganizationInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOrganizationInvitationResponses,
    CreateOrganizationInvitationErrors,
    ThrowOnError
  >({
    responseTransformer: createOrganizationInvitationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/invitations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Resend invitation email
 * Resends the invitation email to the recipient with a fresh expiration date. Only pending invitations can be resent. The invitation expiry date will be extended from the current time. Only the original inviter or an organization administrator can resend invitations.
 */
export const resendInvitation = <ThrowOnError extends boolean = false>(
  options: Options<ResendInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ResendInvitationResponses,
    ResendInvitationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/invitations/{invitationUuid}/resend',
    ...options,
  });
};

/**
 * Process pending invitations for authenticated user
 * Automatically processes all pending invitations for a newly authenticated user.
 * Typically called after successful Keycloak registration/login to handle any outstanding invitations.
 *
 * **Use Cases:**
 * - New user registers and has pending invitations
 * - Existing user logs in and has new invitations waiting
 * - Bulk processing of invitations after authentication
 *
 * **Behavior:**
 * - Only processes valid, non-expired invitations
 * - Automatically accepts all matching invitations for user's email
 * - Sends confirmation emails for each accepted invitation
 * - Returns list of successfully processed invitations
 *
 * **Authentication:** JWT token from Keycloak required in Authorization header.
 *
 */
export const processPendingInvitations = <ThrowOnError extends boolean = false>(
  options?: Options<ProcessPendingInvitationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    ProcessPendingInvitationsResponses,
    ProcessPendingInvitationsErrors,
    ThrowOnError
  >({
    responseTransformer: processPendingInvitationsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/process-pending',
    ...options,
  });
};

/**
 * Send expiry reminders
 * System maintenance endpoint to send reminder emails for invitations expiring soon. This is typically called by scheduled jobs to notify recipients about expiring invitations.
 */
export const sendExpiryReminders = <ThrowOnError extends boolean = false>(
  options?: Options<SendExpiryRemindersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    SendExpiryRemindersResponses,
    SendExpiryRemindersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/maintenance/send-reminders',
    ...options,
  });
};

/**
 * Mark expired invitations
 * System maintenance endpoint to mark all expired pending invitations as expired. This is typically called by scheduled jobs to clean up expired invitations.
 */
export const markExpiredInvitations = <ThrowOnError extends boolean = false>(
  options?: Options<MarkExpiredInvitationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    MarkExpiredInvitationsResponses,
    MarkExpiredInvitationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/maintenance/mark-expired',
    ...options,
  });
};

/**
 * Decline invitation (AUTHENTICATED)
 * Declines an invitation for a Keycloak-authenticated user.
 * Used by React frontend after user authentication to process invitation decline.
 *
 * **Flow:**
 * 1. User authenticates via Keycloak
 * 2. React frontend calls this endpoint with invitation token
 * 3. System validates token and user email match
 * 4. Marks invitation as declined with timestamp
 * 5. Sends decline notification email to inviter
 *
 * **Authentication:** JWT token from Keycloak required in Authorization header.
 * **Email Validation:** User's email from JWT must match invitation recipient.
 * **Note:** Declined invitations cannot be reactivated.
 *
 */
export const declineInvitation1 = <ThrowOnError extends boolean = false>(
  options: Options<DeclineInvitation1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DeclineInvitation1Responses,
    DeclineInvitation1Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/decline',
    ...options,
  });
};

/**
 * Accept invitation (AUTHENTICATED)
 * Accepts an invitation for a Keycloak-authenticated user.
 * Used by React frontend after user authentication to process invitation acceptance.
 *
 * **Flow:**
 * 1. User authenticates via Keycloak (login or registration)
 * 2. React frontend calls this endpoint with invitation token
 * 3. System validates token and user email match
 * 4. Creates user-organization relationship and assigns role
 * 5. Sends confirmation email to user
 *
 * **Authentication:** JWT token from Keycloak required in Authorization header.
 * **Email Validation:** User's email from JWT must match invitation recipient.
 *
 */
export const acceptInvitation1 = <ThrowOnError extends boolean = false>(
  options: Options<AcceptInvitation1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AcceptInvitation1Responses,
    AcceptInvitation1Errors,
    ThrowOnError
  >({
    responseTransformer: acceptInvitation1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/accept',
    ...options,
  });
};

/**
 * Get all instructors
 * Fetches a paginated list of instructors.
 */
export const getAllInstructors = <ThrowOnError extends boolean = false>(
  options: Options<GetAllInstructorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllInstructorsResponses,
    GetAllInstructorsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllInstructorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors',
    ...options,
  });
};

/**
 * Create a new instructor
 * Saves a new instructor record in the system.
 */
export const createInstructor = <ThrowOnError extends boolean = false>(
  options: Options<CreateInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateInstructorResponses,
    CreateInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: createInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get instructor skills
 * Retrieves all skills for a specific instructor
 */
export const getInstructorSkills = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorSkillsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorSkillsResponses,
    GetInstructorSkillsErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorSkillsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/skills',
    ...options,
  });
};

/**
 * Add skill to instructor
 * Adds a skill to an instructor
 */
export const addInstructorSkill = <ThrowOnError extends boolean = false>(
  options: Options<AddInstructorSkillData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddInstructorSkillResponses,
    AddInstructorSkillErrors,
    ThrowOnError
  >({
    responseTransformer: addInstructorSkillResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/skills',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get instructor memberships
 * Retrieves all membership records for a specific instructor
 */
export const getInstructorMemberships = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorMembershipsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorMembershipsResponses,
    GetInstructorMembershipsErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorMembershipsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/memberships',
    ...options,
  });
};

/**
 * Add membership to instructor
 * Adds professional membership to an instructor
 */
export const addInstructorMembership = <ThrowOnError extends boolean = false>(
  options: Options<AddInstructorMembershipData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddInstructorMembershipResponses,
    AddInstructorMembershipErrors,
    ThrowOnError
  >({
    responseTransformer: addInstructorMembershipResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/memberships',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get instructor experience
 * Retrieves all experience records for a specific instructor
 */
export const getInstructorExperience = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorExperienceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorExperienceResponses,
    GetInstructorExperienceErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorExperienceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/experience',
    ...options,
  });
};

/**
 * Add experience to instructor
 * Adds work experience to an instructor
 */
export const addInstructorExperience = <ThrowOnError extends boolean = false>(
  options: Options<AddInstructorExperienceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddInstructorExperienceResponses,
    AddInstructorExperienceErrors,
    ThrowOnError
  >({
    responseTransformer: addInstructorExperienceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/experience',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get instructor education
 * Retrieves all education records for a specific instructor
 */
export const getInstructorEducation = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorEducationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorEducationResponses,
    GetInstructorEducationErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorEducationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/education',
    ...options,
  });
};

/**
 * Add education to instructor
 * Adds educational qualification to an instructor
 */
export const addInstructorEducation = <ThrowOnError extends boolean = false>(
  options: Options<AddInstructorEducationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddInstructorEducationResponses,
    AddInstructorEducationErrors,
    ThrowOnError
  >({
    responseTransformer: addInstructorEducationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/education',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get instructor documents
 * Retrieves all documents for a specific instructor
 */
export const getInstructorDocuments = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorDocumentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorDocumentsResponses,
    GetInstructorDocumentsErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorDocumentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/documents',
    ...options,
  });
};

/**
 * Add document to instructor
 * Uploads and associates a document with an instructor
 */
export const addInstructorDocument = <ThrowOnError extends boolean = false>(
  options: Options<AddInstructorDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddInstructorDocumentResponses,
    AddInstructorDocumentErrors,
    ThrowOnError
  >({
    responseTransformer: addInstructorDocumentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/documents',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Verify instructor document
 * Marks a document as verified
 */
export const verifyDocument = <ThrowOnError extends boolean = false>(
  options: Options<VerifyDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    VerifyDocumentResponses,
    VerifyDocumentErrors,
    ThrowOnError
  >({
    responseTransformer: verifyDocumentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}/verify',
    ...options,
  });
};

/**
 * Create a new availability slot
 * Creates a single availability slot for an instructor
 */
export const createAvailabilitySlot = <ThrowOnError extends boolean = false>(
  options: Options<CreateAvailabilitySlotData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAvailabilitySlotResponses,
    CreateAvailabilitySlotErrors,
    ThrowOnError
  >({
    responseTransformer: createAvailabilitySlotResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/slots',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Set availability patterns
 * Sets recurring availability patterns for an instructor.
 *
 * Supports multiple pattern types:
 * - **weekly**: Patterns based on day of week (Monday-Sunday)
 * - **daily**: Patterns that repeat daily
 * - **monthly**: Patterns based on day of month (1-31)
 * - **custom**: Custom recurring patterns with specific rules
 *
 * The pattern type is determined by the request body structure.
 * Use the appropriate DTO for the pattern type you want to set.
 *
 * Examples:
 * - Weekly: Set availability every Monday and Wednesday 9am-5pm
 * - Daily: Set availability every day 2pm-4pm
 * - Monthly: Set availability on the 1st and 15th of every month
 * - Custom: Set availability with custom recurrence rules
 *
 */
export const setAvailabilityPatterns = <ThrowOnError extends boolean = false>(
  options: Options<SetAvailabilityPatternsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SetAvailabilityPatternsResponses,
    SetAvailabilityPatternsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/patterns',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Block time for an instructor
 * Blocks a specific time period for an instructor, making them unavailable.
 *
 * This creates availability slots with isAvailable = false, which override
 * any existing availability patterns for that time period.
 *
 * You can optionally provide a color code (hex format) to categorize and
 * visually distinguish different types of blocked times on the frontend.
 *
 * Common use cases:
 * - Marking vacation time (e.g., color_code: "#FF6B6B" - red)
 * - Blocking time for meetings (e.g., color_code: "#FFD93D" - yellow)
 * - Indicating sick leave (e.g., color_code: "#FFA07A" - orange)
 * - Personal time off (e.g., color_code: "#95E1D3" - teal)
 *
 */
export const blockTime = <ThrowOnError extends boolean = false>(
  options: Options<BlockTimeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<BlockTimeResponses, BlockTimeErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/block',
    ...options,
  });
};

/**
 * Enroll a student in a scheduled class instance
 */
export const enrollStudent = <ThrowOnError extends boolean = false>(
  options: Options<EnrollStudentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    EnrollStudentResponses,
    EnrollStudentErrors,
    ThrowOnError
  >({
    responseTransformer: enrollStudentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all courses
 * Retrieves paginated list of all courses with category information and filtering support.
 */
export const getAllCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCoursesResponses,
    GetAllCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses',
    ...options,
  });
};

/**
 * Create a new course
 * Creates a new course with default DRAFT status and inactive state. Supports multiple categories.
 *
 * **Category Assignment:**
 * - Use `category_uuids` field to assign multiple categories to the course
 * - Categories are validated to ensure they exist before assignment
 * - A course can belong to multiple categories for better organization and discoverability
 *
 * **Example Request Body:**
 * ```json
 * {
 * "name": "Advanced Java Programming",
 * "instructor_uuid": "instructor-uuid-here",
 * "category_uuids": ["java-uuid", "programming-uuid"],
 * "description": "Comprehensive Java course",
 * "duration_hours": 40,
 * "duration_minutes": 0
 * }
 * ```
 *
 */
export const createCourse = <ThrowOnError extends boolean = false>(
  options: Options<CreateCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCourseResponses,
    CreateCourseErrors,
    ThrowOnError
  >({
    responseTransformer: createCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Unpublish course
 * Unpublishes a course, changing it from PUBLISHED to DRAFT status.
 *
 * **Smart Active Status Logic:**
 * - If NO active enrollments: Course becomes DRAFT and ACTIVE (available for new enrollments)
 * - If HAS active enrollments: Course becomes DRAFT and INACTIVE (existing students continue, no new enrollments)
 *
 * **Business Rules:**
 * - Course status always changes from PUBLISHED to DRAFT
 * - Active status depends on current enrollment situation
 * - Existing enrollments are never affected
 * - Course can be published again later
 *
 * **Use Cases:**
 * - Temporarily remove course from catalog while keeping it available
 * - Stop new enrollments while allowing current students to continue
 * - Prepare course for updates before republishing
 *
 */
export const unpublishCourse = <ThrowOnError extends boolean = false>(
  options: Options<UnpublishCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UnpublishCourseResponses,
    UnpublishCourseErrors,
    ThrowOnError
  >({
    responseTransformer: unpublishCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/unpublish',
    ...options,
  });
};

/**
 * Upload course thumbnail
 * Uploads a thumbnail image for the specified course. The thumbnail is typically used in course
 * listings, search results, and course cards throughout the application.
 *
 * **File Requirements:**
 * - Supported formats: JPG, PNG, GIF, WebP
 * - Maximum file size: 5MB
 * - Recommended dimensions: 400x300 pixels or 4:3 aspect ratio
 * - Files will be automatically optimized for web delivery
 *
 * **Usage Guidelines:**
 * - Thumbnails should clearly represent the course content
 * - Use high-quality, professional images
 * - Avoid images with too much text or small details
 * - Consider accessibility and contrast for text overlays
 *
 * **Storage Details:**
 * - Files are stored in the course_thumbnails folder
 * - Previous thumbnail will be replaced if a new one is uploaded
 * - Generated URL will be automatically set in the course record
 *
 */
export const uploadCourseThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<UploadCourseThumbnailData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadCourseThumbnailResponses,
    UploadCourseThumbnailErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseTransformer: uploadCourseThumbnailResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/thumbnail',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Publish course
 * Publishes a course making it available for enrollment.
 */
export const publishCourse = <ThrowOnError extends boolean = false>(
  options: Options<PublishCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PublishCourseResponses,
    PublishCourseErrors,
    ThrowOnError
  >({
    responseTransformer: publishCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/publish',
    ...options,
  });
};

/**
 * Upload course introduction video
 * Uploads an introduction video for the specified course. The intro video is used for course
 * previews, marketing, and helping students understand what they'll learn.
 *
 * **File Requirements:**
 * - Supported formats: MP4, WebM, MOV, AVI
 * - Maximum file size: 100MB
 * - Recommended duration: 1-3 minutes
 * - Recommended resolution: 720p or 1080p
 *
 * **Content Guidelines:**
 * - Keep intro videos concise and engaging
 * - Clearly explain what students will learn
 * - Include instructor introduction if appropriate
 * - Ensure good audio quality
 * - Consider adding captions for accessibility
 *
 * **Storage Details:**
 * - Files are stored in the course_intro_videos folder
 * - Previous intro video will be replaced if a new one is uploaded
 * - Generated URL will be automatically set in the course record
 * - Consider video compression for optimal streaming performance
 *
 */
export const uploadCourseIntroVideo = <ThrowOnError extends boolean = false>(
  options: Options<UploadCourseIntroVideoData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadCourseIntroVideoResponses,
    UploadCourseIntroVideoErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseTransformer: uploadCourseIntroVideoResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/intro-video',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Upload course banner
 * Uploads a banner image for the specified course. The banner is typically used on the course
 * detail page as a hero image and in promotional materials.
 *
 * **File Requirements:**
 * - Supported formats: JPG, PNG, GIF, WebP
 * - Maximum file size: 10MB
 * - Recommended dimensions: 1200x400 pixels or 3:1 aspect ratio
 * - Files will be automatically optimized for web delivery
 *
 * **Usage Guidelines:**
 * - Banners should be visually striking and professional
 * - Consider responsive design - banner should work on mobile and desktop
 * - Use images that complement your course branding
 * - Ensure good contrast if overlaying text
 *
 * **Storage Details:**
 * - Files are stored in the course_banners folder
 * - Previous banner will be replaced if a new one is uploaded
 * - Generated URL will be automatically set in the course record
 *
 */
export const uploadCourseBanner = <ThrowOnError extends boolean = false>(
  options: Options<UploadCourseBannerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadCourseBannerResponses,
    UploadCourseBannerErrors,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseTransformer: uploadCourseBannerResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/banner',
    ...options,
    headers: {
      'Content-Type': null,
      ...options.headers,
    },
  });
};

/**
 * Archive course
 * Archives a course, making it completely unavailable.
 *
 * **Important:**
 * - This is typically a permanent action
 * - Course becomes completely inaccessible to new students
 * - Existing enrollments may be handled differently based on business rules
 * - Course data is preserved for historical/audit purposes
 *
 */
export const archiveCourse = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ArchiveCourseResponses,
    ArchiveCourseErrors,
    ThrowOnError
  >({
    responseTransformer: archiveCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/archive',
    ...options,
  });
};

/**
 * Get all rubrics associated with a course
 * Retrieves all rubrics that are associated with the specified course, including usage context.
 */
export const getCourseRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseRubricsResponses,
    GetCourseRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics',
    ...options,
  });
};

/**
 * Associate a rubric with a course
 * Creates an association between a rubric and a course, allowing the rubric to be used for assessments in that course.
 */
export const associateRubric = <ThrowOnError extends boolean = false>(
  options: Options<AssociateRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AssociateRubricResponses,
    AssociateRubricErrors,
    ThrowOnError
  >({
    responseTransformer: associateRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get course requirements
 * Retrieves all requirements for a specific course.
 */
export const getCourseRequirements = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseRequirementsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseRequirementsResponses,
    GetCourseRequirementsErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseRequirementsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/requirements',
    ...options,
  });
};

/**
 * Add requirement to course
 * Adds a new requirement or prerequisite to a course.
 */
export const addCourseRequirement = <ThrowOnError extends boolean = false>(
  options: Options<AddCourseRequirementData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddCourseRequirementResponses,
    AddCourseRequirementErrors,
    ThrowOnError
  >({
    responseTransformer: addCourseRequirementResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/requirements',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get course lessons
 * Retrieves all lessons for a specific course in sequence order.
 */
export const getCourseLessons = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseLessonsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseLessonsResponses,
    GetCourseLessonsErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseLessonsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons',
    ...options,
  });
};

/**
 * Add lesson to course
 * Creates a new lesson associated with the specified course.
 */
export const addCourseLesson = <ThrowOnError extends boolean = false>(
  options: Options<AddCourseLessonData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddCourseLessonResponses,
    AddCourseLessonErrors,
    ThrowOnError
  >({
    responseTransformer: addCourseLessonResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get lesson content
 * Retrieves all content for a lesson in display order with computed properties.
 */
export const getLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<GetLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLessonContentResponses,
    GetLessonContentErrors,
    ThrowOnError
  >({
    responseTransformer: getLessonContentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content',
    ...options,
  });
};

/**
 * Add content to lesson
 * Adds new content item to a specific lesson with automatic ordering.
 */
export const addLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<AddLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddLessonContentResponses,
    AddLessonContentErrors,
    ThrowOnError
  >({
    responseTransformer: addLessonContentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reorder lesson content
 * Updates the display order of content items within a lesson.
 */
export const reorderLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<ReorderLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReorderLessonContentResponses,
    ReorderLessonContentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get course assessments
 * Retrieves all assessments for a specific course.
 */
export const getCourseAssessments = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseAssessmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseAssessmentsResponses,
    GetCourseAssessmentsErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseAssessmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/assessments',
    ...options,
  });
};

/**
 * Add assessment to course
 * Creates a new assessment for the course with optional rubric association.
 */
export const addCourseAssessment = <ThrowOnError extends boolean = false>(
  options: Options<AddCourseAssessmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddCourseAssessmentResponses,
    AddCourseAssessmentErrors,
    ThrowOnError
  >({
    responseTransformer: addCourseAssessmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/assessments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all course creators
 * Fetches a paginated list of all course creator profiles in the system.
 */
export const getAllCourseCreators = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCourseCreatorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCourseCreatorsResponses,
    GetAllCourseCreatorsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllCourseCreatorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators',
    ...options,
  });
};

/**
 * Create a new course creator
 * Saves a new course creator profile in the system. The course creator will be unverified by default and require admin verification.
 */
export const createCourseCreator = <ThrowOnError extends boolean = false>(
  options: Options<CreateCourseCreatorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCourseCreatorResponses,
    CreateCourseCreatorErrors,
    ThrowOnError
  >({
    responseTransformer: createCourseCreatorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Verify a course creator
 * Marks a course creator as verified by an administrator. Only system admins can perform this operation.
 */
export const verifyCourseCreator = <ThrowOnError extends boolean = false>(
  options: Options<VerifyCourseCreatorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    VerifyCourseCreatorResponses,
    VerifyCourseCreatorErrors,
    ThrowOnError
  >({
    responseTransformer: verifyCourseCreatorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}/verify',
    ...options,
  });
};

/**
 * Unverify a course creator
 * Removes verification status from a course creator. Only system admins can perform this operation.
 */
export const unverifyCourseCreator = <ThrowOnError extends boolean = false>(
  options: Options<UnverifyCourseCreatorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UnverifyCourseCreatorResponses,
    UnverifyCourseCreatorErrors,
    ThrowOnError
  >({
    responseTransformer: unverifyCourseCreatorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}/unverify',
    ...options,
  });
};

/**
 * Get all grading levels
 * Retrieves paginated list of all grading levels.
 */
export const getAllGradingLevels = <ThrowOnError extends boolean = false>(
  options: Options<GetAllGradingLevelsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllGradingLevelsResponses,
    GetAllGradingLevelsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllGradingLevelsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/grading-levels',
    ...options,
  });
};

/**
 * Create grading level
 * Creates a new grading level for assessment scoring.
 */
export const createGradingLevel = <ThrowOnError extends boolean = false>(
  options: Options<CreateGradingLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGradingLevelResponses,
    CreateGradingLevelErrors,
    ThrowOnError
  >({
    responseTransformer: createGradingLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/grading-levels',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all difficulty levels
 * Retrieves all difficulty levels in order.
 */
export const getAllDifficultyLevels = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllDifficultyLevelsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllDifficultyLevelsResponses,
    GetAllDifficultyLevelsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllDifficultyLevelsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/difficulty-levels',
    ...options,
  });
};

/**
 * Create difficulty level
 * Creates a new difficulty level for course classification.
 */
export const createDifficultyLevel = <ThrowOnError extends boolean = false>(
  options: Options<CreateDifficultyLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDifficultyLevelResponses,
    CreateDifficultyLevelErrors,
    ThrowOnError
  >({
    responseTransformer: createDifficultyLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/difficulty-levels',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reorder difficulty levels
 * Updates the order of difficulty levels.
 */
export const reorderDifficultyLevels = <ThrowOnError extends boolean = false>(
  options: Options<ReorderDifficultyLevelsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReorderDifficultyLevelsResponses,
    ReorderDifficultyLevelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/difficulty-levels/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all content types
 * Retrieves paginated list of all content types.
 */
export const getAllContentTypes = <ThrowOnError extends boolean = false>(
  options: Options<GetAllContentTypesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllContentTypesResponses,
    GetAllContentTypesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllContentTypesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types',
    ...options,
  });
};

/**
 * Create content type
 * Creates a new content type for lesson content classification.
 */
export const createContentType = <ThrowOnError extends boolean = false>(
  options: Options<CreateContentTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateContentTypeResponses,
    CreateContentTypeErrors,
    ThrowOnError
  >({
    responseTransformer: createContentTypeResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all categories
 * Retrieves paginated list of all categories.
 */
export const getAllCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCategoriesResponses,
    GetAllCategoriesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllCategoriesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories',
    ...options,
  });
};

/**
 * Create category
 * Creates a new category for organizing courses and programs.
 */
export const createCategory = <ThrowOnError extends boolean = false>(
  options: Options<CreateCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCategoryResponses,
    CreateCategoryErrors,
    ThrowOnError
  >({
    responseTransformer: createCategoryResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create a new class definition
 */
export const createClassDefinition = <ThrowOnError extends boolean = false>(
  options: Options<CreateClassDefinitionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateClassDefinitionResponses,
    CreateClassDefinitionErrors,
    ThrowOnError
  >({
    responseTransformer: createClassDefinitionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create a new recurrence pattern
 */
export const createClassRecurrencePattern = <ThrowOnError extends boolean = false>(
  options: Options<CreateClassRecurrencePatternData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateClassRecurrencePatternResponses,
    CreateClassRecurrencePatternErrors,
    ThrowOnError
  >({
    responseTransformer: createClassRecurrencePatternResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/recurrence-patterns',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all certificates
 * Retrieves paginated list of all certificates with filtering support.
 */
export const getAllCertificates = <ThrowOnError extends boolean = false>(
  options: Options<GetAllCertificatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllCertificatesResponses,
    GetAllCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getAllCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates',
    ...options,
  });
};

/**
 * Create a new certificate
 * Manually creates a certificate record with automatic number generation.
 */
export const createCertificate = <ThrowOnError extends boolean = false>(
  options: Options<CreateCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCertificateResponses,
    CreateCertificateErrors,
    ThrowOnError
  >({
    responseTransformer: createCertificateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revoke certificate
 * Revokes a certificate with reason, making it invalid.
 */
export const revokeCertificate = <ThrowOnError extends boolean = false>(
  options: Options<RevokeCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RevokeCertificateResponses,
    RevokeCertificateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/{uuid}/revoke',
    ...options,
  });
};

/**
 * Generate certificate URL
 * Generates and updates the downloadable URL for a certificate.
 */
export const generateCertificateUrl = <ThrowOnError extends boolean = false>(
  options: Options<GenerateCertificateUrlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GenerateCertificateUrlResponses,
    GenerateCertificateUrlErrors,
    ThrowOnError
  >({
    responseTransformer: generateCertificateUrlResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/{uuid}/generate-url',
    ...options,
  });
};

/**
 * Get certificate templates
 * Retrieves all available certificate templates.
 */
export const getCertificateTemplates = <ThrowOnError extends boolean = false>(
  options: Options<GetCertificateTemplatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCertificateTemplatesResponses,
    GetCertificateTemplatesErrors,
    ThrowOnError
  >({
    responseTransformer: getCertificateTemplatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/templates',
    ...options,
  });
};

/**
 * Create certificate template
 * Creates a new certificate template for generating certificates.
 */
export const createCertificateTemplate = <ThrowOnError extends boolean = false>(
  options: Options<CreateCertificateTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCertificateTemplateResponses,
    CreateCertificateTemplateErrors,
    ThrowOnError
  >({
    responseTransformer: createCertificateTemplateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/templates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate program certificate
 * Automatically generates a certificate upon program completion.
 */
export const generateProgramCertificate = <ThrowOnError extends boolean = false>(
  options: Options<GenerateProgramCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GenerateProgramCertificateResponses,
    GenerateProgramCertificateErrors,
    ThrowOnError
  >({
    responseTransformer: generateProgramCertificateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/generate/program',
    ...options,
  });
};

/**
 * Generate course certificate
 * Automatically generates a certificate upon course completion.
 */
export const generateCourseCertificate = <ThrowOnError extends boolean = false>(
  options: Options<GenerateCourseCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GenerateCourseCertificateResponses,
    GenerateCourseCertificateErrors,
    ThrowOnError
  >({
    responseTransformer: generateCourseCertificateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/generate/course',
    ...options,
  });
};

/**
 * Get all assignments
 * Retrieves paginated list of all assignments with filtering support.
 */
export const getAllAssignments = <ThrowOnError extends boolean = false>(
  options: Options<GetAllAssignmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllAssignmentsResponses,
    GetAllAssignmentsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllAssignmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments',
    ...options,
  });
};

/**
 * Create a new assignment
 * Creates a new assignment with default DRAFT status and inactive state.
 */
export const createAssignment = <ThrowOnError extends boolean = false>(
  options: Options<CreateAssignmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAssignmentResponses,
    CreateAssignmentErrors,
    ThrowOnError
  >({
    responseTransformer: createAssignmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Submit assignment
 * Creates a new submission for an assignment by a student.
 */
export const submitAssignment = <ThrowOnError extends boolean = false>(
  options: Options<SubmitAssignmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SubmitAssignmentResponses,
    SubmitAssignmentErrors,
    ThrowOnError
  >({
    responseTransformer: submitAssignmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/submit',
    ...options,
  });
};

/**
 * Return submission for revision
 * Returns a submission to student with feedback for revision.
 */
export const returnSubmission = <ThrowOnError extends boolean = false>(
  options: Options<ReturnSubmissionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReturnSubmissionResponses,
    ReturnSubmissionErrors,
    ThrowOnError
  >({
    responseTransformer: returnSubmissionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/return',
    ...options,
  });
};

/**
 * Grade submission
 * Grades a student's assignment submission with score and comments.
 */
export const gradeSubmission = <ThrowOnError extends boolean = false>(
  options: Options<GradeSubmissionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GradeSubmissionResponses,
    GradeSubmissionErrors,
    ThrowOnError
  >({
    responseTransformer: gradeSubmissionResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/grade',
    ...options,
  });
};

/**
 * Assign admin domain to user
 * Assigns admin domain privileges to a user. This grants the user administrative access either globally (system admin) or within specific organizational contexts. Only existing system administrators can perform this operation.
 */
export const assignAdminDomain = <ThrowOnError extends boolean = false>(
  options: Options<AssignAdminDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AssignAdminDomainResponses,
    AssignAdminDomainErrors,
    ThrowOnError
  >({
    responseTransformer: assignAdminDomainResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/{uuid}/domains',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Verify an organization
 * Verifies/approves an organization by setting the admin_verified flag to true. Only system administrators can perform this operation. Verified organizations gain access to additional platform features and display verification badges.
 */
export const verifyOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<VerifyOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    VerifyOrganisationResponses,
    VerifyOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: verifyOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/organizations/{uuid}/verify',
    ...options,
  });
};

/**
 * Remove verification from an organization
 * Removes verification from an organization by setting the admin_verified flag to false. Only system administrators can perform this operation. This may revoke access to certain platform features.
 */
export const unverifyOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<UnverifyOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UnverifyOrganisationResponses,
    UnverifyOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: unverifyOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/organizations/{uuid}/unverify',
    ...options,
  });
};

/**
 * Verify an instructor
 * Verifies/approves an instructor by setting the admin_verified flag to true. Only system administrators can perform this operation. Verified instructors gain access to additional platform features and display verification badges.
 */
export const verifyInstructor = <ThrowOnError extends boolean = false>(
  options: Options<VerifyInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    VerifyInstructorResponses,
    VerifyInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: verifyInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/instructors/{uuid}/verify',
    ...options,
  });
};

/**
 * Remove verification from an instructor
 * Removes verification from an instructor by setting the admin_verified flag to false. Only system administrators can perform this operation. This may revoke access to certain platform features.
 */
export const unverifyInstructor = <ThrowOnError extends boolean = false>(
  options: Options<UnverifyInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UnverifyInstructorResponses,
    UnverifyInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: unverifyInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/instructors/{uuid}/unverify',
    ...options,
  });
};

/**
 * Update the status of a scheduled instance
 */
export const updateScheduledInstanceStatus = <ThrowOnError extends boolean = false>(
  options: Options<UpdateScheduledInstanceStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateScheduledInstanceStatusResponses,
    UpdateScheduledInstanceStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/schedule/{instanceUuid}/status',
    ...options,
  });
};

/**
 * Reorder scoring levels
 * Updates the display order of scoring levels within the rubric. Provide a map of level UUIDs to their new order values.
 */
export const reorderScoringLevels = <ThrowOnError extends boolean = false>(
  options: Options<ReorderScoringLevelsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ReorderScoringLevelsResponses,
    ReorderScoringLevelsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Mark attendance for a student enrollment
 */
export const markAttendance = <ThrowOnError extends boolean = false>(
  options: Options<MarkAttendanceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    MarkAttendanceResponses,
    MarkAttendanceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/{enrollmentUuid}/attendance',
    ...options,
  });
};

/**
 * Get all users
 * Fetches a paginated list of all users in the system. Supports pagination and sorting by any user field.
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetAllUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAllUsersResponses,
    GetAllUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getAllUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users',
    ...options,
  });
};

/**
 * Get invitations sent by user
 * Retrieves all invitations that have been sent by a specific user across all organizations and branches. This endpoint helps users track invitations they have created. Results are ordered by creation date (most recent first) and include all invitation statuses.
 */
export const getInvitationsSentByUser = <ThrowOnError extends boolean = false>(
  options: Options<GetInvitationsSentByUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInvitationsSentByUserResponses,
    GetInvitationsSentByUserErrors,
    ThrowOnError
  >({
    responseTransformer: getInvitationsSentByUserResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}/invitations/sent',
    ...options,
  });
};

/**
 * Get pending invitations for user by email
 * Retrieves all pending invitations sent to a specific user's email address across all organizations and branches. This endpoint helps users see all outstanding invitations they have received. Only returns invitations with PENDING status that haven't expired.
 */
export const getPendingInvitationsForUser = <ThrowOnError extends boolean = false>(
  options: Options<GetPendingInvitationsForUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPendingInvitationsForUserResponses,
    GetPendingInvitationsForUserErrors,
    ThrowOnError
  >({
    responseTransformer: getPendingInvitationsForUserResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/{uuid}/invitations/pending',
    ...options,
  });
};

/**
 * Search users
 * Fetches a paginated list of users based on optional filters. Supports pagination and sorting.
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<SearchResponses, SearchErrors, ThrowOnError>({
    responseTransformer: searchResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/search',
    ...options,
  });
};

/**
 * Get user profile image by file name
 */
export const getProfileImage = <ThrowOnError extends boolean = false>(
  options: Options<GetProfileImageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProfileImageResponses,
    GetProfileImageErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/users/profile-image/{fileName}',
    ...options,
  });
};

/**
 * Search training branches
 * Fetches a paginated list of training branches based on optional filters. Supports pagination and sorting.
 */
export const search1 = <ThrowOnError extends boolean = false>(
  options: Options<Search1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<Search1Responses, Search1Errors, ThrowOnError>({
    responseTransformer: search1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches/search',
    ...options,
  });
};

/**
 * Get training branches by organisation UUID
 */
export const getTrainingBranchesByOrganisation1 = <ThrowOnError extends boolean = false>(
  options: Options<GetTrainingBranchesByOrganisation1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTrainingBranchesByOrganisation1Responses,
    GetTrainingBranchesByOrganisation1Errors,
    ThrowOnError
  >({
    responseTransformer: getTrainingBranchesByOrganisation1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/training-branches/organisation/{organisationUuid}',
    ...options,
  });
};

/**
 * Cancel a scheduled class instance
 */
export const cancelScheduledClass = <ThrowOnError extends boolean = false>(
  options: Options<CancelScheduledClassData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CancelScheduledClassResponses,
    CancelScheduledClassErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/schedule/{instanceUuid}',
    ...options,
  });
};

/**
 * Get a scheduled instance by UUID
 */
export const getScheduledInstance = <ThrowOnError extends boolean = false>(
  options: Options<GetScheduledInstanceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetScheduledInstanceResponses,
    GetScheduledInstanceErrors,
    ThrowOnError
  >({
    responseTransformer: getScheduledInstanceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/schedule/{instanceUuid}',
    ...options,
  });
};

/**
 * Get schedule for a specific instructor within a date range
 */
export const getInstructorSchedule = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorScheduleResponses,
    GetInstructorScheduleErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorScheduleResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/timetable/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Search students
 * Search for students based on criteria.
 */
export const searchStudents = <ThrowOnError extends boolean = false>(
  options: Options<SearchStudentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchStudentsResponses,
    SearchStudentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchStudentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/students/search',
    ...options,
  });
};

/**
 * Validate rubric matrix
 * Validates the matrix for completeness and consistency before use in assessments.
 */
export const validateMatrix = <ThrowOnError extends boolean = false>(
  options: Options<ValidateMatrixData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ValidateMatrixResponses,
    ValidateMatrixErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/validate-matrix',
    ...options,
  });
};

/**
 * Get passing scoring levels
 * Retrieves only the scoring levels that are marked as passing for the specified rubric.
 */
export const getPassingScoringLevels = <ThrowOnError extends boolean = false>(
  options: Options<GetPassingScoringLevelsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPassingScoringLevelsResponses,
    GetPassingScoringLevelsErrors,
    ThrowOnError
  >({
    responseTransformer: getPassingScoringLevelsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/passing',
    ...options,
  });
};

/**
 * Get highest scoring level
 * Retrieves the highest performance scoring level (level_order = 1) for the specified rubric.
 */
export const getHighestScoringLevel = <ThrowOnError extends boolean = false>(
  options: Options<GetHighestScoringLevelData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetHighestScoringLevelResponses,
    GetHighestScoringLevelErrors,
    ThrowOnError
  >({
    responseTransformer: getHighestScoringLevelResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/scoring-levels/highest',
    ...options,
  });
};

/**
 * Get complete rubric matrix
 * Retrieves the complete rubric matrix including all criteria, scoring levels, matrix cells, and statistics.
 */
export const getRubricMatrix = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricMatrixData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricMatrixResponses,
    GetRubricMatrixErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricMatrixResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix',
    ...options,
  });
};

/**
 * Validate rubric matrix
 * Validates the rubric matrix for completeness, weight consistency, and readiness for use.
 */
export const validateMatrix1 = <ThrowOnError extends boolean = false>(
  options: Options<ValidateMatrix1Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ValidateMatrix1Responses,
    ValidateMatrix1Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix/validate',
    ...options,
  });
};

/**
 * Get matrix statistics
 * Retrieves statistical information about the matrix including completion percentage and score calculations.
 */
export const getMatrixStatistics = <ThrowOnError extends boolean = false>(
  options: Options<GetMatrixStatisticsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMatrixStatisticsResponses,
    GetMatrixStatisticsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix/stats',
    ...options,
  });
};

/**
 * Check matrix readiness
 * Quick check to determine if the rubric matrix is ready for use in assessments.
 */
export const checkMatrixReadiness = <ThrowOnError extends boolean = false>(
  options: Options<CheckMatrixReadinessData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckMatrixReadinessResponses,
    CheckMatrixReadinessErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix/ready',
    ...options,
  });
};

/**
 * Get rubric matrix view
 * Retrieves the complete rubric matrix with all criteria, scoring levels, and cell intersections.
 */
export const getRubricMatrixView = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricMatrixViewData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricMatrixViewResponses,
    GetRubricMatrixViewErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricMatrixViewResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/{rubricUuid}/matrix-view',
    ...options,
  });
};

/**
 * Search for assessment rubrics
 * Searches for assessment rubrics based on a set of filter criteria.
 */
export const searchAssessmentRubrics = <ThrowOnError extends boolean = false>(
  options: Options<SearchAssessmentRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchAssessmentRubricsResponses,
    SearchAssessmentRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: searchAssessmentRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/search',
    ...options,
  });
};

/**
 * Browse rubrics by type
 * Retrieves public rubrics filtered by a specific rubric type.
 */
export const getRubricsByType = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricsByTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricsByTypeResponses,
    GetRubricsByTypeErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricsByTypeResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/type/{type}',
    ...options,
  });
};

/**
 * Get rubrics by status
 * Retrieves rubrics filtered by their content status (e.g., DRAFT, PUBLISHED, ARCHIVED).
 */
export const getRubricsByStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricsByStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricsByStatusResponses,
    GetRubricsByStatusErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricsByStatusResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/status/{status}',
    ...options,
  });
};

/**
 * Get rubric usage statistics
 * Retrieves overall statistics about rubric usage, including counts of public rubrics, total rubrics, etc.
 */
export const getRubricStatistics = <ThrowOnError extends boolean = false>(
  options?: Options<GetRubricStatisticsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRubricStatisticsResponses,
    GetRubricStatisticsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/statistics',
    ...options,
  });
};

/**
 * Get instructor's rubric statistics
 * Retrieves statistics about a specific instructor's rubrics, including counts by visibility and status.
 */
export const getInstructorRubricStatistics = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorRubricStatisticsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorRubricStatisticsResponses,
    GetInstructorRubricStatisticsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/statistics/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Search public rubrics
 * Searches public rubrics by title, description, and optionally by rubric type.
 */
export const searchPublicRubrics = <ThrowOnError extends boolean = false>(
  options: Options<SearchPublicRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchPublicRubricsResponses,
    SearchPublicRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: searchPublicRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/search',
    ...options,
  });
};

/**
 * Browse all public rubrics
 * Retrieves all public rubrics available for reuse across courses, ordered by creation date.
 */
export const getPublicRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetPublicRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPublicRubricsResponses,
    GetPublicRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getPublicRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/public',
    ...options,
  });
};

/**
 * Get popular rubrics
 * Retrieves the most popular public rubrics based on usage across multiple courses.
 */
export const getPopularRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetPopularRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPopularRubricsResponses,
    GetPopularRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getPopularRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/popular',
    ...options,
  });
};

/**
 * Get instructor's rubrics
 * Retrieves rubrics created by a specific instructor, with option to include private rubrics.
 */
export const getInstructorRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorRubricsResponses,
    GetInstructorRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Get general rubrics
 * Retrieves general-purpose rubrics that are not tied to any specific course.
 */
export const getGeneralRubrics = <ThrowOnError extends boolean = false>(
  options: Options<GetGeneralRubricsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGeneralRubricsResponses,
    GetGeneralRubricsErrors,
    ThrowOnError
  >({
    responseTransformer: getGeneralRubricsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/rubrics/discovery/general',
    ...options,
  });
};

/**
 * Get quiz total points
 * Returns the maximum possible points for a quiz.
 */
export const getQuizTotalPoints = <ThrowOnError extends boolean = false>(
  options: Options<GetQuizTotalPointsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuizTotalPointsResponses,
    GetQuizTotalPointsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/total-points',
    ...options,
  });
};

/**
 * Get question category distribution
 * Returns distribution of question types within a quiz.
 */
export const getQuestionDistribution = <ThrowOnError extends boolean = false>(
  options: Options<GetQuestionDistributionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuestionDistributionResponses,
    GetQuestionDistributionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/question-distribution',
    ...options,
  });
};

/**
 * Get quiz attempts
 * Retrieves all attempts for a specific quiz with scoring data.
 */
export const getQuizAttempts = <ThrowOnError extends boolean = false>(
  options: Options<GetQuizAttemptsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQuizAttemptsResponses,
    GetQuizAttemptsErrors,
    ThrowOnError
  >({
    responseTransformer: getQuizAttemptsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/{quizUuid}/attempts',
    ...options,
  });
};

/**
 * Search quizzes
 * Advanced quiz search with flexible criteria and operators.
 *
 * **Common Quiz Search Examples:**
 * - `title_like=midterm` - Quizzes with "midterm" in title
 * - `lessonUuid=uuid` - Quizzes for specific lesson
 * - `status=PUBLISHED` - Only published quizzes
 * - `active=true` - Only active quizzes
 * - `timeLimitMinutes_gte=30` - Quizzes with 30+ minute time limit
 * - `attemptsAllowed_lte=3` - Quizzes with 3 or fewer attempts allowed
 * - `passingScore_gte=70` - Quizzes with passing score 70%+
 *
 */
export const searchQuizzes = <ThrowOnError extends boolean = false>(
  options: Options<SearchQuizzesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchQuizzesResponses,
    SearchQuizzesErrors,
    ThrowOnError
  >({
    responseTransformer: searchQuizzesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/search',
    ...options,
  });
};

/**
 * Search quiz questions
 * Search questions across all quizzes.
 *
 * **Common Question Search Examples:**
 * - `quizUuid=uuid` - All questions for specific quiz
 * - `questionType=MULTIPLE_CHOICE` - Only multiple choice questions
 * - `points_gte=2` - Questions worth 2+ points
 * - `questionText_like=calculate` - Questions containing "calculate"
 *
 */
export const searchQuestions = <ThrowOnError extends boolean = false>(
  options: Options<SearchQuestionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchQuestionsResponses,
    SearchQuestionsErrors,
    ThrowOnError
  >({
    responseTransformer: searchQuestionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/questions/search',
    ...options,
  });
};

/**
 * Search quiz attempts
 * Search quiz attempts across all quizzes.
 *
 * **Common Attempt Search Examples:**
 * - `quizUuid=uuid` - All attempts for specific quiz
 * - `enrollmentUuid=uuid` - All attempts by specific student
 * - `status=COMPLETED` - Only completed attempts
 * - `isPassed=true` - Only passing attempts
 * - `percentage_gte=85` - Attempts with 85%+ score
 * - `startedAt_gte=2024-01-01T00:00:00` - Attempts from 2024
 *
 */
export const searchAttempts = <ThrowOnError extends boolean = false>(
  options: Options<SearchAttemptsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchAttemptsResponses,
    SearchAttemptsErrors,
    ThrowOnError
  >({
    responseTransformer: searchAttemptsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/quizzes/attempts/search',
    ...options,
  });
};

/**
 * Get program enrollments
 * Retrieves enrollment data for a specific program with completion analytics.
 */
export const getProgramEnrollments = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramEnrollmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramEnrollmentsResponses,
    GetProgramEnrollmentsErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramEnrollmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/enrollments',
    ...options,
  });
};

/**
 * Get required courses
 * Retrieves only the required courses for a program.
 */
export const getRequiredCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetRequiredCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRequiredCoursesResponses,
    GetRequiredCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getRequiredCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses/required',
    ...options,
  });
};

/**
 * Get optional courses
 * Retrieves only the optional courses for a program.
 */
export const getOptionalCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetOptionalCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetOptionalCoursesResponses,
    GetOptionalCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getOptionalCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/courses/optional',
    ...options,
  });
};

/**
 * Get program completion rate
 * Returns the completion rate percentage for a program.
 */
export const getProgramCompletionRate = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramCompletionRateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramCompletionRateResponses,
    GetProgramCompletionRateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/completion-rate',
    ...options,
  });
};

/**
 * Get program certificates
 * Retrieves all certificates issued for program completions.
 */
export const getProgramCertificates = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramCertificatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramCertificatesResponses,
    GetProgramCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/{programUuid}/certificates',
    ...options,
  });
};

/**
 * Search training programs
 * Advanced program search with flexible criteria and operators.
 *
 * **Common Program Search Examples:**
 * - `title_like=data science` - Programs with titles containing "data science"
 * - `status=PUBLISHED` - Only published programs
 * - `active=true` - Only active programs
 * - `status_in=PUBLISHED,ACTIVE` - Published or active programs
 * - `price_lte=500.00` - Programs priced at $500 or less
 * - `price=null` - Free programs
 * - `instructorUuid=uuid` - Programs by specific instructor
 * - `categoryUuid=uuid` - Programs in specific category
 * - `totalDurationHours_gte=40` - Programs 40+ hours long
 * - `totalDurationHours_between=20,100` - Programs between 20-100 hours
 * - `createdDate_gte=2024-01-01T00:00:00` - Programs created after Jan 1, 2024
 *
 * **Advanced Program Queries:**
 * - `status=PUBLISHED&active=true&price_lte=100` - Published, active programs under $100
 * - `title_like=certification&totalDurationHours_gte=50` - Certification programs 50+ hours
 * - `instructorUuid=uuid&status=PUBLISHED` - Published programs by specific instructor
 *
 * For complete operator documentation, see the instructor search endpoint.
 *
 */
export const searchTrainingPrograms = <ThrowOnError extends boolean = false>(
  options: Options<SearchTrainingProgramsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchTrainingProgramsResponses,
    SearchTrainingProgramsErrors,
    ThrowOnError
  >({
    responseTransformer: searchTrainingProgramsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/search',
    ...options,
  });
};

/**
 * Search program requirements
 * Search program requirements and prerequisites.
 *
 * **Common Program Requirement Search Examples:**
 * - `programUuid=uuid` - All requirements for specific program
 * - `requirementType=PREREQUISITE` - Only prerequisites
 * - `isMandatory=true` - Only mandatory requirements
 * - `requirementText_like=certification` - Requirements mentioning "certification"
 *
 */
export const searchProgramRequirements = <ThrowOnError extends boolean = false>(
  options: Options<SearchProgramRequirementsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchProgramRequirementsResponses,
    SearchProgramRequirementsErrors,
    ThrowOnError
  >({
    responseTransformer: searchProgramRequirementsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/requirements/search',
    ...options,
  });
};

/**
 * Get published programs
 * Retrieves all published programs available for enrollment.
 */
export const getPublishedPrograms = <ThrowOnError extends boolean = false>(
  options: Options<GetPublishedProgramsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPublishedProgramsResponses,
    GetPublishedProgramsErrors,
    ThrowOnError
  >({
    responseTransformer: getPublishedProgramsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/published',
    ...options,
  });
};

/**
 * Get programs by instructor
 * Retrieves all programs created by a specific instructor.
 */
export const getProgramsByInstructor = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramsByInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramsByInstructorResponses,
    GetProgramsByInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramsByInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Get free programs
 * Retrieves all programs available at no cost.
 */
export const getFreePrograms = <ThrowOnError extends boolean = false>(
  options: Options<GetFreeProgramsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFreeProgramsResponses,
    GetFreeProgramsErrors,
    ThrowOnError
  >({
    responseTransformer: getFreeProgramsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/free',
    ...options,
  });
};

/**
 * Search program enrollments
 * Search enrollment records across all programs.
 *
 * **Common Program Enrollment Search Examples:**
 * - `programUuid=uuid` - All enrollments for specific program
 * - `studentUuid=uuid` - All program enrollments for specific student
 * - `status=COMPLETED` - Only completed program enrollments
 * - `progressPercentage_gte=90` - Students with 90%+ program progress
 * - `enrollmentDate_gte=2024-01-01T00:00:00` - Program enrollments from 2024
 * - `finalGrade_gte=85` - Program completions with grade 85+
 *
 */
export const searchProgramEnrollments = <ThrowOnError extends boolean = false>(
  options: Options<SearchProgramEnrollmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchProgramEnrollmentsResponses,
    SearchProgramEnrollmentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchProgramEnrollmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/enrollments/search',
    ...options,
  });
};

/**
 * Search program courses
 * Search course associations within programs.
 *
 * **Common Program Course Search Examples:**
 * - `programUuid=uuid` - All courses for specific program
 * - `courseUuid=uuid` - All programs containing specific course
 * - `isRequired=true` - Only required course associations
 * - `sequenceOrder_gte=3` - Courses from sequence 3 onwards
 *
 */
export const searchProgramCourses = <ThrowOnError extends boolean = false>(
  options: Options<SearchProgramCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchProgramCoursesResponses,
    SearchProgramCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: searchProgramCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/courses/search',
    ...options,
  });
};

/**
 * Get programs by category
 * Retrieves all programs in a specific category.
 */
export const getProgramsByCategory = <ThrowOnError extends boolean = false>(
  options: Options<GetProgramsByCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProgramsByCategoryResponses,
    GetProgramsByCategoryErrors,
    ThrowOnError
  >({
    responseTransformer: getProgramsByCategoryResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/category/{categoryUuid}',
    ...options,
  });
};

/**
 * Get active programs
 * Retrieves all currently active and published programs.
 */
export const getActivePrograms = <ThrowOnError extends boolean = false>(
  options: Options<GetActiveProgramsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActiveProgramsResponses,
    GetActiveProgramsErrors,
    ThrowOnError
  >({
    responseTransformer: getActiveProgramsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/programs/active',
    ...options,
  });
};

/**
 * Get users by organisation ID
 */
export const getUsersByOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByOrganisationResponses,
    GetUsersByOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: getUsersByOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/users',
    ...options,
  });
};

/**
 * Get users by organisation and domain
 * Retrieves all users in the organisation filtered by their role/domain. This endpoint is useful for getting all instructors, students, or admins within an organisation.
 */
export const getUsersByOrganisationAndDomain = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByOrganisationAndDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUsersByOrganisationAndDomainResponses,
    GetUsersByOrganisationAndDomainErrors,
    ThrowOnError
  >({
    responseTransformer: getUsersByOrganisationAndDomainResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/users/domain/{domainName}',
    ...options,
  });
};

/**
 * Get users assigned to training branch
 * Retrieves all users that are assigned to a specific training branch within the organization. This includes users with any role/domain within the branch.
 */
export const getBranchUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetBranchUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBranchUsersResponses,
    GetBranchUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getBranchUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users',
    ...options,
  });
};

/**
 * Get users by training branch and domain
 * Retrieves all users in the training branch filtered by their role/domain. This endpoint is useful for getting all instructors, students, or admins within a specific branch.
 */
export const getBranchUsersByDomain = <ThrowOnError extends boolean = false>(
  options: Options<GetBranchUsersByDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBranchUsersByDomainResponses,
    GetBranchUsersByDomainErrors,
    ThrowOnError
  >({
    responseTransformer: getBranchUsersByDomainResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/domain/{domainName}',
    ...options,
  });
};

/**
 * Search organisations
 * Fetches a paginated list of organisations based on optional filters. Supports pagination and sorting. Available filters include:
 * - `name` - Filter by organisation name (partial match)
 * - `active` - Filter by active status (true/false)
 * - `admin_verified` - Filter by verification status (true/false)
 * - `country` - Filter by country
 * - `location` - Filter by location
 *
 * Examples:
 * - `/search?admin_verified=true` - Get verified organisations
 * - `/search?admin_verified=false` - Get unverified organisations
 * - `/search?active=true&admin_verified=true` - Get active verified organisations
 */
export const search2 = <ThrowOnError extends boolean = false>(
  options: Options<Search2Data, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<Search2Responses, Search2Errors, ThrowOnError>({
    responseTransformer: search2ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/search',
    ...options,
  });
};

/**
 * Validate invitation token
 * Validates whether an invitation token is currently valid and can be accepted or declined. Checks if the invitation exists, is in PENDING status, and has not expired. This endpoint is useful for pre-validation before displaying acceptance/decline forms.
 */
export const validateInvitation = <ThrowOnError extends boolean = false>(
  options: Options<ValidateInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ValidateInvitationResponses,
    ValidateInvitationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/validate/{token}',
    ...options,
  });
};

/**
 * Get invitation details by token
 * Retrieves complete invitation information using the unique token from the invitation email. This endpoint is typically used by the invitation acceptance/decline pages to display invitation details before the user makes their decision. Includes organization, branch, and role information.
 */
export const getInvitationByToken = <ThrowOnError extends boolean = false>(
  options: Options<GetInvitationByTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInvitationByTokenResponses,
    GetInvitationByTokenErrors,
    ThrowOnError
  >({
    responseTransformer: getInvitationByTokenResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/token/{token}',
    ...options,
  });
};

/**
 * Preview invitation details (PUBLIC)
 * Gets public-safe invitation details by token without requiring authentication.
 * Used by React frontend to display invitation information before user login/registration.
 *
 * **URL Structure:** https://elimika.sarafrika.com/invitations/accept?token={token}
 *
 * **Response includes:**
 * - Recipient name and organization details
 * - Role being offered with description
 * - Inviter information and personal notes
 * - Expiration status and registration requirements
 *
 * **Security:** Token-based validation ensures only valid invitations are previewed.
 *
 */
export const previewInvitation = <ThrowOnError extends boolean = false>(
  options: Options<PreviewInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PreviewInvitationResponses,
    PreviewInvitationErrors,
    ThrowOnError
  >({
    responseTransformer: previewInvitationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/preview',
    ...options,
  });
};

/**
 * Get pending invitations for email address
 * Retrieves all pending invitations sent to a specific email address across all organizations and branches. This endpoint helps users see all outstanding invitations they have received. Only returns invitations with PENDING status that haven't expired.
 */
export const getPendingInvitationsForEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetPendingInvitationsForEmailData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPendingInvitationsForEmailResponses,
    GetPendingInvitationsForEmailErrors,
    ThrowOnError
  >({
    responseTransformer: getPendingInvitationsForEmailResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/pending',
    ...options,
  });
};

/**
 * Clear all availability for an instructor
 * Removes all availability slots and patterns for an instructor. Use with caution.
 */
export const clearInstructorAvailability = <ThrowOnError extends boolean = false>(
  options: Options<ClearInstructorAvailabilityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    ClearInstructorAvailabilityResponses,
    ClearInstructorAvailabilityErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability',
    ...options,
  });
};

/**
 * Get all availability for an instructor
 * Retrieves all availability slots for a specific instructor, including all patterns and blocked times
 */
export const getInstructorAvailability = <ThrowOnError extends boolean = false>(
  options: Options<GetInstructorAvailabilityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetInstructorAvailabilityResponses,
    GetInstructorAvailabilityErrors,
    ThrowOnError
  >({
    responseTransformer: getInstructorAvailabilityResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability',
    ...options,
  });
};

/**
 * Search availability slots with flexible filtering
 *  Search and filter availability slots using dynamic query parameters.
 *
 * **Supported filter operators:**
 * - `_eq` - equals (e.g., `is_available=true`)
 * - `_ne` or `_noteq` - not equals (e.g., `availability_type_ne=DAILY`)
 * - `_like` - contains (for strings, e.g., `custom_pattern_like=BLOCK`)
 * - `_gt` - greater than (e.g., `day_of_week_gt=3`)
 * - `_gte` - greater than or equal (e.g., `start_time_gte=09:00:00`)
 * - `_lt` - less than (e.g., `day_of_month_lt=15`)
 * - `_lte` - less than or equal (e.g., `end_time_lte=17:00:00`)
 * - `_in` - in list (comma-separated, e.g., `availability_type_in=WEEKLY,MONTHLY`)
 *
 * **Example queries:**
 * - Get all available slots: `?is_available=true`
 * - Get blocked times: `?is_available=false`
 * - Get weekly patterns for Monday: `?availability_type=WEEKLY&day_of_week=1`
 * - Get slots with specific color: `?color_code=#FF6B6B`
 * - Get slots by date range: `?specific_date_gte=2024-01-01&specific_date_lte=2024-12-31`
 * - Combined: `?is_available=false&color_code_like=FF6B`
 *
 * **Pagination:** Use standard Spring pagination parameters:
 * - `page` - page number (0-indexed)
 * - `size` - page size
 * - `sort` - sorting (e.g., `start_time,asc` or `specific_date,desc`)
 *
 * **Examples:**
 * - `/search?is_available=true&page=0&size=20&sort=start_time,asc`
 * - `/search?availability_type_in=WEEKLY,MONTHLY&day_of_week_gte=1&day_of_week_lte=5`
 * - `/search?is_available=false&specific_date_gte=2024-10-01`
 *
 */
export const searchAvailability = <ThrowOnError extends boolean = false>(
  options: Options<SearchAvailabilityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchAvailabilityResponses,
    SearchAvailabilityErrors,
    ThrowOnError
  >({
    responseTransformer: searchAvailabilityResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/search',
    ...options,
  });
};

/**
 * Get availability for a specific date
 * Retrieves all availability slots (including from patterns) for an instructor on a specific date
 */
export const getAvailabilityForDate = <ThrowOnError extends boolean = false>(
  options: Options<GetAvailabilityForDateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAvailabilityForDateResponses,
    GetAvailabilityForDateErrors,
    ThrowOnError
  >({
    responseTransformer: getAvailabilityForDateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/date/{date}',
    ...options,
  });
};

/**
 * Check if instructor is available during a time period
 * Checks whether an instructor is available for the entire specified time period.
 *
 * Returns true only if the instructor is available for the ENTIRE duration.
 * This considers:
 * - All availability patterns
 * - Blocked time slots
 * - Existing bookings (if integrated with scheduling)
 *
 * Useful for validating booking requests before creating them.
 *
 */
export const checkAvailability = <ThrowOnError extends boolean = false>(
  options: Options<CheckAvailabilityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckAvailabilityResponses,
    CheckAvailabilityErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/check',
    ...options,
  });
};

/**
 * Find available slots within a date range
 * Finds all available time slots for an instructor within a specified date range.
 *
 * This is useful for scheduling systems that need to:
 * - Show available booking slots
 * - Find the next available time
 * - Display a calendar of availability
 *
 * Only returns slots where isAvailable = true (excludes blocked times).
 *
 */
export const findAvailableSlots = <ThrowOnError extends boolean = false>(
  options: Options<FindAvailableSlotsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    FindAvailableSlotsResponses,
    FindAvailableSlotsErrors,
    ThrowOnError
  >({
    responseTransformer: findAvailableSlotsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/{instructorUuid}/availability/available',
    ...options,
  });
};

/**
 * Search instructor skills
 * Search skills with flexible criteria.
 *
 * **Common Skills Search Examples:**
 * - `instructorUuid=uuid` - All skills for specific instructor
 * - `skillName_like=java` - Skills containing "java"
 * - `proficiencyLevel=EXPERT` - Expert level skills only
 * - `proficiencyLevel_in=ADVANCED,EXPERT` - Advanced or expert skills
 * - `skillName_startswith=Data` - Skills starting with "Data"
 * - `proficiencyLevel_noteq=BEGINNER` - Non-beginner skills
 *
 * **Skills Analysis Queries:**
 * - `skillName_like=programming&proficiencyLevel_in=ADVANCED,EXPERT` - Advanced programming skills
 * - `createdDate_gte=2024-01-01&proficiencyLevel=EXPERT` - Recently added expert skills
 *
 * **Proficiency Levels:** BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
 *
 * For complete operator documentation, see the main search endpoint.
 *
 */
export const searchSkills = <ThrowOnError extends boolean = false>(
  options: Options<SearchSkillsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchSkillsResponses,
    SearchSkillsErrors,
    ThrowOnError
  >({
    responseTransformer: searchSkillsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/skills/search',
    ...options,
  });
};

/**
 * Search instructors
 *  Search for instructors using flexible criteria with advanced operators.
 *
 * **Basic Search:**
 * - `field=value` - Exact match (default operation)
 * - `firstName=John` - Find instructors with firstName exactly "John"
 *
 * **Comparison Operators:**
 * - `field_gt=value` - Greater than
 * - `field_lt=value` - Less than
 * - `field_gte=value` - Greater than or equal
 * - `field_lte=value` - Less than or equal
 * - `createdDate_gte=2024-01-01T00:00:00` - Created after Jan 1, 2024
 *
 * **String Operations:**
 * - `field_like=value` - Contains (case-insensitive)
 * - `field_startswith=value` - Starts with (case-insensitive)
 * - `field_endswith=value` - Ends with (case-insensitive)
 * - `lastName_like=smith` - Last name contains "smith"
 *
 * **List Operations:**
 * - `field_in=val1,val2,val3` - Field is in list
 * - `field_notin=val1,val2` - Field is not in list
 * - `status_in=ACTIVE,PENDING` - Status is either ACTIVE or PENDING
 *
 * **Negation:**
 * - `field_noteq=value` - Not equal to value
 * - `isActive_noteq=false` - Is not false (i.e., is true)
 *
 * **Range Operations:**
 * - `field_between=start,end` - Value between start and end (inclusive)
 * - `createdDate_between=2024-01-01T00:00:00,2024-12-31T23:59:59` - Created in 2024
 *
 * **Complex Operations:**
 * - `field_notingroup=relationshipField,groupId` - Not in specific group
 *
 * **Nested Field Access:**
 * - `nestedObject.field=value` - Search in nested objects
 *
 * **Supported Data Types:**
 * - String, UUID, Boolean (true/false or 1/0), Integer, Long, Double, Float, BigDecimal
 * - Date (YYYY-MM-DD), Timestamp, LocalDateTime (ISO format)
 *
 * **Examples:**
 * - `/search?firstName_like=john&isActive=true&createdDate_gte=2024-01-01T00:00:00`
 * - `/search?experience_gt=5&status_in=ACTIVE,VERIFIED`
 * - `/search?email_endswith=@company.com&department_noteq=IT`
 *
 */
export const searchInstructors = <ThrowOnError extends boolean = false>(
  options: Options<SearchInstructorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchInstructorsResponses,
    SearchInstructorsErrors,
    ThrowOnError
  >({
    responseTransformer: searchInstructorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/search',
    ...options,
  });
};

/**
 * Search instructor memberships
 * Search membership records with flexible criteria.
 *
 * **Common Membership Search Examples:**
 * - `instructorUuid=uuid` - All memberships for specific instructor
 * - `isActive=true` - Active memberships only
 * - `organizationName_like=professional` - Organizations with "professional" in name
 * - `startDate_gte=2023-01-01` - Memberships started in 2023 or later
 * - `endDate=null` - Ongoing memberships (no end date)
 * - `membershipNumber_startswith=PRO` - Numbers starting with "PRO"
 *
 * **Membership Analysis Queries:**
 * - `isActive=true&endDate=null` - Currently active ongoing memberships
 * - `isActive=false&endDate_gte=2024-01-01` - Recently expired memberships
 * - `startDate_between=2020-01-01,2023-12-31` - Joined between 2020-2023
 *
 * For complete operator documentation, see the main search endpoint.
 *
 */
export const searchMemberships = <ThrowOnError extends boolean = false>(
  options: Options<SearchMembershipsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchMembershipsResponses,
    SearchMembershipsErrors,
    ThrowOnError
  >({
    responseTransformer: searchMembershipsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/memberships/search',
    ...options,
  });
};

/**
 * Search instructor experience
 * Search experience records with flexible criteria.
 *
 * **Common Experience Search Examples:**
 * - `instructorUuid=uuid` - All experience for specific instructor
 * - `isCurrentPosition=true` - Current positions only
 * - `position_like=manager` - Positions containing "manager"
 * - `organizationName_endswith=Ltd` - Organizations ending with "Ltd"
 * - `yearsOfExperience_gte=5` - 5+ years experience
 * - `startDate_gte=2020-01-01` - Started in 2020 or later
 * - `endDate=null` - Ongoing positions (no end date)
 * - `responsibilities_like=team` - Responsibilities mentioning "team"
 *
 * **Experience Analysis Queries:**
 * - `isCurrentPosition=false&endDate_gte=2023-01-01` - Recent past positions
 * - `yearsOfExperience_between=3,10` - Mid-level experience (3-10 years)
 *
 * For complete operator documentation, see the main search endpoint.
 *
 */
export const searchExperience = <ThrowOnError extends boolean = false>(
  options: Options<SearchExperienceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchExperienceResponses,
    SearchExperienceErrors,
    ThrowOnError
  >({
    responseTransformer: searchExperienceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/experience/search',
    ...options,
  });
};

/**
 * Search instructor education
 * Search education records with flexible criteria.
 *
 * **Common Education Search Examples:**
 * - `instructorUuid=uuid` - All education for specific instructor
 * - `qualification_like=degree` - Qualifications containing "degree"
 * - `schoolName_startswith=University` - Schools starting with "University"
 * - `yearCompleted_gte=2020` - Completed in 2020 or later
 * - `yearCompleted_between=2015,2020` - Completed between 2015-2020
 * - `certificateNumber_noteq=null` - Has certificate number
 *
 * For complete operator documentation, see the main search endpoint.
 *
 */
export const searchEducation = <ThrowOnError extends boolean = false>(
  options: Options<SearchEducationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchEducationResponses,
    SearchEducationErrors,
    ThrowOnError
  >({
    responseTransformer: searchEducationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/education/search',
    ...options,
  });
};

/**
 * Search instructor documents
 * Search documents with flexible criteria using advanced operators.
 *
 * **Common Document Search Examples:**
 * - `instructorUuid=uuid` - All documents for specific instructor
 * - `isVerified=false` - Unverified documents
 * - `status=PENDING` - Documents with pending status
 * - `status_in=APPROVED,VERIFIED` - Approved or verified documents
 * - `expiryDate_lte=2025-12-31` - Documents expiring by end of 2025
 * - `mimeType_like=pdf` - PDF documents
 * - `fileSizeBytes_gt=1048576` - Files larger than 1MB
 * - `title_startswith=Certificate` - Titles starting with "Certificate"
 * - `createdDate_between=2024-01-01T00:00:00,2024-12-31T23:59:59` - Created in 2024
 *
 * **Special Document Queries:**
 * - `isVerified=false&expiryDate_lte=2025-12-31` - Unverified expiring documents
 * - `status_noteq=EXPIRED&expiryDate_lt=2025-07-02` - Non-expired but overdue docs
 *
 * For complete operator documentation, see the main search endpoint.
 *
 */
export const searchDocuments = <ThrowOnError extends boolean = false>(
  options: Options<SearchDocumentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchDocumentsResponses,
    SearchDocumentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchDocumentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/instructors/documents/search',
    ...options,
  });
};

/**
 * Cancel a student enrollment
 */
export const cancelEnrollment = <ThrowOnError extends boolean = false>(
  options: Options<CancelEnrollmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CancelEnrollmentResponses,
    CancelEnrollmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/{enrollmentUuid}',
    ...options,
  });
};

/**
 * Get an enrollment by UUID
 */
export const getEnrollment = <ThrowOnError extends boolean = false>(
  options: Options<GetEnrollmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetEnrollmentResponses,
    GetEnrollmentErrors,
    ThrowOnError
  >({
    responseTransformer: getEnrollmentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/{enrollmentUuid}',
    ...options,
  });
};

/**
 * Get schedule for a specific student within a date range
 */
export const getStudentSchedule = <ThrowOnError extends boolean = false>(
  options: Options<GetStudentScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStudentScheduleResponses,
    GetStudentScheduleErrors,
    ThrowOnError
  >({
    responseTransformer: getStudentScheduleResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/student/{studentUuid}',
    ...options,
  });
};

/**
 * Get all enrollments for a scheduled instance
 */
export const getEnrollmentsForInstance = <ThrowOnError extends boolean = false>(
  options: Options<GetEnrollmentsForInstanceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetEnrollmentsForInstanceResponses,
    GetEnrollmentsForInstanceErrors,
    ThrowOnError
  >({
    responseTransformer: getEnrollmentsForInstanceResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/instance/{instanceUuid}',
    ...options,
  });
};

/**
 * Get enrollment count for a scheduled instance
 */
export const getEnrollmentCount = <ThrowOnError extends boolean = false>(
  options: Options<GetEnrollmentCountData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetEnrollmentCountResponses,
    GetEnrollmentCountErrors,
    ThrowOnError
  >({
    responseTransformer: getEnrollmentCountResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/instance/{instanceUuid}/count',
    ...options,
  });
};

/**
 * Check if a scheduled instance has capacity for new enrollments
 */
export const hasCapacityForEnrollment = <ThrowOnError extends boolean = false>(
  options: Options<HasCapacityForEnrollmentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    HasCapacityForEnrollmentResponses,
    HasCapacityForEnrollmentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/enrollment/instance/{instanceUuid}/capacity',
    ...options,
  });
};

/**
 * Get available status transitions
 * Returns the list of valid status transitions for a course based on its current state and business rules.
 *
 * **Status Transition Rules:**
 * - DRAFT → IN_REVIEW, ARCHIVED
 * - IN_REVIEW → DRAFT, PUBLISHED, ARCHIVED
 * - PUBLISHED → DRAFT (if no active enrollments), ARCHIVED
 * - ARCHIVED → (no transitions - permanent state)
 *
 */
export const getStatusTransitions = <ThrowOnError extends boolean = false>(
  options: Options<GetStatusTransitionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStatusTransitionsResponses,
    GetStatusTransitionsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{uuid}/status-transitions',
    ...options,
  });
};

/**
 * Check if rubric is associated with course
 * Checks whether a specific rubric is already associated with the course.
 */
export const checkRubricAssociation = <ThrowOnError extends boolean = false>(
  options: Options<CheckRubricAssociationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckRubricAssociationResponses,
    CheckRubricAssociationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/{rubricUuid}/exists',
    ...options,
  });
};

/**
 * Get primary rubric for a course
 * Retrieves the primary rubric association for the specified course.
 */
export const getPrimaryRubric = <ThrowOnError extends boolean = false>(
  options: Options<GetPrimaryRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPrimaryRubricResponses,
    GetPrimaryRubricErrors,
    ThrowOnError
  >({
    responseTransformer: getPrimaryRubricResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/primary',
    ...options,
  });
};

/**
 * Get rubrics by usage context
 * Retrieves rubric associations for a specific usage context (e.g., 'midterm', 'final', 'assignment').
 */
export const getRubricsByContext = <ThrowOnError extends boolean = false>(
  options: Options<GetRubricsByContextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRubricsByContextResponses,
    GetRubricsByContextErrors,
    ThrowOnError
  >({
    responseTransformer: getRubricsByContextResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/context/{context}',
    ...options,
  });
};

/**
 * Get course enrollments
 * Retrieves enrollment data for a specific course with analytics.
 */
export const getCourseEnrollments = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseEnrollmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseEnrollmentsResponses,
    GetCourseEnrollmentsErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseEnrollmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/enrollments',
    ...options,
  });
};

/**
 * Get course completion rate
 * Returns the completion rate percentage for a course.
 */
export const getCourseCompletionRate = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseCompletionRateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseCompletionRateResponses,
    GetCourseCompletionRateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/completion-rate',
    ...options,
  });
};

/**
 * Remove all categories from course
 * Removes all category associations from a course.
 */
export const removeAllCategoriesFromCourse = <ThrowOnError extends boolean = false>(
  options: Options<RemoveAllCategoriesFromCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveAllCategoriesFromCourseResponses,
    RemoveAllCategoriesFromCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/categories',
    ...options,
  });
};

/**
 * Get course categories
 * Retrieves all categories assigned to a specific course.
 */
export const getCourseCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseCategoriesResponses,
    GetCourseCategoriesErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseCategoriesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/categories',
    ...options,
  });
};

/**
 * Search courses with enhanced category filtering
 * Advanced course search with flexible criteria and operators, including category-based filtering.
 *
 * **Category-Specific Search Examples:**
 * - `categoryUuids_in=uuid1,uuid2` - Courses in any of these categories
 * - `categoryUuids_contains=uuid` - Courses containing specific category
 * - `categoryNames_like=programming` - Courses in categories with "programming" in the name
 * - `categoryCount_gte=2` - Courses assigned to 2 or more categories
 * - `hasMultipleCategories=true` - Courses with multiple category assignments
 *
 * **Combined Search Examples:**
 * - `status=PUBLISHED&categoryUuids_in=uuid1,uuid2&price_lte=100` - Published courses under $100 in specific categories
 * - `name_like=java&categoryNames_like=programming&active=true` - Active Java courses in programming categories
 *
 * For complete operator documentation, see the general course search endpoint.
 *
 */
export const searchCourses = <ThrowOnError extends boolean = false>(
  options: Options<SearchCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCoursesResponses,
    SearchCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: searchCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/search',
    ...options,
  });
};

/**
 * Search course requirements
 * Search course requirements and prerequisites.
 *
 * **Common Requirement Search Examples:**
 * - `courseUuid=uuid` - All requirements for specific course
 * - `requirementType=PREREQUISITE` - Only prerequisites
 * - `isMandatory=true` - Only mandatory requirements
 * - `requirementText_like=experience` - Requirements mentioning "experience"
 *
 */
export const searchRequirements = <ThrowOnError extends boolean = false>(
  options: Options<SearchRequirementsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchRequirementsResponses,
    SearchRequirementsErrors,
    ThrowOnError
  >({
    responseTransformer: searchRequirementsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/requirements/search',
    ...options,
  });
};

/**
 * Get published courses
 * Retrieves all published courses available for enrollment.
 */
export const getPublishedCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetPublishedCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPublishedCoursesResponses,
    GetPublishedCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getPublishedCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/published',
    ...options,
  });
};

/**
 * Get course media by file name
 * Retrieves course media files (thumbnails, banners, intro videos) by their file name.
 * This endpoint serves the actual media files with appropriate content types and caching headers.
 *
 * **File Types Served:**
 * - Course thumbnails from course_thumbnails folder
 * - Course banners from course_banners folder
 * - Course intro videos from course_intro_videos folder
 *
 * **Response Features:**
 * - Automatic content type detection
 * - Optimized caching headers for performance
 * - Support for range requests (for videos)
 * - Proper file serving with inline disposition
 *
 * **Usage:**
 * - File names are typically returned from upload endpoints
 * - URLs are automatically generated and stored in course records
 * - Direct access via this endpoint for custom implementations
 *
 */
export const getCourseMedia = <ThrowOnError extends boolean = false>(
  options: Options<GetCourseMediaData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCourseMediaResponses,
    GetCourseMediaErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/media/{fileName}',
    ...options,
  });
};

/**
 * Search lessons
 * Search course lessons with advanced filtering.
 *
 * **Common Lesson Search Examples:**
 * - `courseUuid=uuid` - All lessons for specific course
 * - `status=PUBLISHED` - Only published lessons
 * - `active=true` - Only active lessons
 * - `lessonNumber_gte=5` - Lessons from lesson 5 onwards
 * - `title_like=introduction` - Lessons with "introduction" in title
 * - `durationHours_between=1,3` - Lessons between 1-3 hours
 *
 */
export const searchLessons = <ThrowOnError extends boolean = false>(
  options: Options<SearchLessonsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchLessonsResponses,
    SearchLessonsErrors,
    ThrowOnError
  >({
    responseTransformer: searchLessonsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/lessons/search',
    ...options,
  });
};

/**
 * Get courses by instructor
 * Retrieves all courses created by a specific instructor.
 */
export const getCoursesByInstructor = <ThrowOnError extends boolean = false>(
  options: Options<GetCoursesByInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoursesByInstructorResponses,
    GetCoursesByInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: getCoursesByInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Search course enrollments
 * Search enrollment records across all courses.
 *
 * **Common Enrollment Search Examples:**
 * - `courseUuid=uuid` - All enrollments for specific course
 * - `studentUuid=uuid` - All enrollments for specific student
 * - `status=COMPLETED` - Only completed enrollments
 * - `progressPercentage_gte=80` - Students with 80%+ progress
 * - `enrollmentDate_gte=2024-01-01T00:00:00` - Enrollments from 2024
 *
 */
export const searchEnrollments = <ThrowOnError extends boolean = false>(
  options: Options<SearchEnrollmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchEnrollmentsResponses,
    SearchEnrollmentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchEnrollmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/enrollments/search',
    ...options,
  });
};

/**
 * Search lesson content
 * Search lesson content across all courses.
 *
 * **Common Content Search Examples:**
 * - `lessonUuid=uuid` - All content for specific lesson
 * - `contentTypeUuid=uuid` - Content of specific type
 * - `isRequired=true` - Only required content
 * - `title_like=video` - Content with "video" in title
 * - `fileSizeBytes_gt=1048576` - Files larger than 1MB
 *
 */
export const searchLessonContent = <ThrowOnError extends boolean = false>(
  options: Options<SearchLessonContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchLessonContentResponses,
    SearchLessonContentErrors,
    ThrowOnError
  >({
    responseTransformer: searchLessonContentResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/content/search',
    ...options,
  });
};

/**
 * Get courses by category
 * Retrieves all courses in a specific category.
 *
 * **Enhanced Category Search:**
 * This endpoint now supports the many-to-many relationship, returning courses that have
 * the specified category assigned to them, regardless of what other categories they may also have.
 *
 */
export const getCoursesByCategory = <ThrowOnError extends boolean = false>(
  options: Options<GetCoursesByCategoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCoursesByCategoryResponses,
    GetCoursesByCategoryErrors,
    ThrowOnError
  >({
    responseTransformer: getCoursesByCategoryResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/category/{categoryUuid}',
    ...options,
  });
};

/**
 * Search course category mappings
 * Search course-category relationships.
 *
 * **Common Mapping Search Examples:**
 * - `courseUuid=uuid` - All category mappings for specific course
 * - `categoryUuid=uuid` - All course mappings for specific category
 * - `courseName_like=java` - Mappings for courses with "java" in name
 * - `categoryName_like=programming` - Mappings for categories with "programming" in name
 *
 */
export const searchCategoryMappings = <ThrowOnError extends boolean = false>(
  options: Options<SearchCategoryMappingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCategoryMappingsResponses,
    SearchCategoryMappingsErrors,
    ThrowOnError
  >({
    responseTransformer: searchCategoryMappingsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/category-mappings/search',
    ...options,
  });
};

/**
 * Search course assessments
 * Search assessments across all courses.
 *
 * **Common Assessment Search Examples:**
 * - `courseUuid=uuid` - All assessments for specific course
 * - `assessmentType=QUIZ` - Only quiz assessments
 * - `isRequired=true` - Only required assessments
 * - `weightPercentage_gte=20` - Assessments worth 20% or more
 *
 */
export const searchAssessments = <ThrowOnError extends boolean = false>(
  options: Options<SearchAssessmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchAssessmentsResponses,
    SearchAssessmentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchAssessmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/assessments/search',
    ...options,
  });
};

/**
 * Get active courses
 * Retrieves all currently active and published courses.
 */
export const getActiveCourses = <ThrowOnError extends boolean = false>(
  options: Options<GetActiveCoursesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetActiveCoursesResponses,
    GetActiveCoursesErrors,
    ThrowOnError
  >({
    responseTransformer: getActiveCoursesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/active',
    ...options,
  });
};

/**
 * Check if course creator is verified
 * Returns the verification status of a course creator.
 */
export const isCourseCreatorVerified = <ThrowOnError extends boolean = false>(
  options: Options<IsCourseCreatorVerifiedData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    IsCourseCreatorVerifiedResponses,
    IsCourseCreatorVerifiedErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/{uuid}/verification-status',
    ...options,
  });
};

/**
 * Get verified course creators
 * Fetches a paginated list of all verified course creators.
 */
export const getVerifiedCourseCreators = <ThrowOnError extends boolean = false>(
  options: Options<GetVerifiedCourseCreatorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetVerifiedCourseCreatorsResponses,
    GetVerifiedCourseCreatorsErrors,
    ThrowOnError
  >({
    responseTransformer: getVerifiedCourseCreatorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/verified',
    ...options,
  });
};

/**
 * Get unverified course creators
 * Fetches a paginated list of all unverified course creators pending admin review.
 */
export const getUnverifiedCourseCreators = <ThrowOnError extends boolean = false>(
  options: Options<GetUnverifiedCourseCreatorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUnverifiedCourseCreatorsResponses,
    GetUnverifiedCourseCreatorsErrors,
    ThrowOnError
  >({
    responseTransformer: getUnverifiedCourseCreatorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/unverified',
    ...options,
  });
};

/**
 * Search course creators
 *  Search for course creators using flexible criteria with advanced operators.
 *
 * **Basic Search:**
 * - `field=value` - Exact match (default operation)
 * - `fullName=John` - Find course creators with fullName exactly "John"
 *
 * **Comparison Operators:**
 * - `field_gt=value` - Greater than
 * - `field_lt=value` - Less than
 * - `field_gte=value` - Greater than or equal
 * - `field_lte=value` - Less than or equal
 * - `createdDate_gte=2024-01-01T00:00:00` - Created after Jan 1, 2024
 *
 * **String Operations:**
 * - `field_like=value` - Contains (case-insensitive)
 * - `field_startswith=value` - Starts with (case-insensitive)
 * - `field_endswith=value` - Ends with (case-insensitive)
 * - `fullName_like=alice` - Full name contains "alice"
 *
 * **Boolean Operations:**
 * - `adminVerified=true` - Only verified course creators
 * - `adminVerified=false` - Only unverified course creators
 *
 * **List Operations:**
 * - `field_in=val1,val2,val3` - Field is in list
 * - `field_notin=val1,val2` - Field is not in list
 *
 * **Negation:**
 * - `field_noteq=value` - Not equal to value
 *
 * **Examples:**
 * - `/search?fullName_like=john&adminVerified=true`
 * - `/search?createdDate_gte=2024-01-01T00:00:00`
 * - `/search?professionalHeadline_like=content`
 *
 */
export const searchCourseCreators = <ThrowOnError extends boolean = false>(
  options: Options<SearchCourseCreatorsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCourseCreatorsResponses,
    SearchCourseCreatorsErrors,
    ThrowOnError
  >({
    responseTransformer: searchCourseCreatorsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/search',
    ...options,
  });
};

/**
 * Get course creator count by verification status
 * Returns the total count of course creators filtered by verification status.
 */
export const countCourseCreatorsByVerificationStatus = <ThrowOnError extends boolean = false>(
  options: Options<CountCourseCreatorsByVerificationStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CountCourseCreatorsByVerificationStatusResponses,
    CountCourseCreatorsByVerificationStatusErrors,
    ThrowOnError
  >({
    responseTransformer: countCourseCreatorsByVerificationStatusResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/course-creators/count',
    ...options,
  });
};

/**
 * Search content types
 * Search content types with filtering options.
 *
 * **Common Content Type Search Examples:**
 * - `name_like=video` - Content types with "video" in name
 * - `mimeTypes_like=image/` - Image content types
 * - `maxFileSizeMb_gte=100` - Large file content types
 *
 */
export const searchContentTypes = <ThrowOnError extends boolean = false>(
  options: Options<SearchContentTypesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchContentTypesResponses,
    SearchContentTypesErrors,
    ThrowOnError
  >({
    responseTransformer: searchContentTypesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types/search',
    ...options,
  });
};

/**
 * Check MIME type support
 * Checks if a specific MIME type is supported by the system.
 */
export const checkMimeTypeSupport = <ThrowOnError extends boolean = false>(
  options: Options<CheckMimeTypeSupportData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckMimeTypeSupportResponses,
    CheckMimeTypeSupportErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types/mime-support/{mimeType}',
    ...options,
  });
};

/**
 * Get media content types
 * Retrieves content types for media files (video, audio, images).
 */
export const getMediaContentTypes = <ThrowOnError extends boolean = false>(
  options?: Options<GetMediaContentTypesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMediaContentTypesResponses,
    GetMediaContentTypesErrors,
    ThrowOnError
  >({
    responseTransformer: getMediaContentTypesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/content-types/media',
    ...options,
  });
};

/**
 * Get subcategories
 * Retrieves all subcategories for a specific parent category.
 */
export const getSubCategories = <ThrowOnError extends boolean = false>(
  options: Options<GetSubCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSubCategoriesResponses,
    GetSubCategoriesErrors,
    ThrowOnError
  >({
    responseTransformer: getSubCategoriesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/{parentUuid}/subcategories',
    ...options,
  });
};

/**
 * Search categories
 * Search categories with filtering options.
 *
 * **Common Category Search Examples:**
 * - `name_like=technology` - Categories with "technology" in name
 * - `parentUuid=null` - Root categories only
 * - `parentUuid=uuid` - Subcategories of specific parent
 * - `isActive=true` - Only active categories
 *
 */
export const searchCategories = <ThrowOnError extends boolean = false>(
  options: Options<SearchCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCategoriesResponses,
    SearchCategoriesErrors,
    ThrowOnError
  >({
    responseTransformer: searchCategoriesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/search',
    ...options,
  });
};

/**
 * Get root categories
 * Retrieves all top-level categories (no parent).
 */
export const getRootCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetRootCategoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRootCategoriesResponses,
    GetRootCategoriesErrors,
    ThrowOnError
  >({
    responseTransformer: getRootCategoriesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/config/categories/root',
    ...options,
  });
};

/**
 * Preview recurring schedule without creating instances
 */
export const previewRecurringClassSchedule = <ThrowOnError extends boolean = false>(
  options: Options<PreviewRecurringClassScheduleData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PreviewRecurringClassScheduleResponses,
    PreviewRecurringClassScheduleErrors,
    ThrowOnError
  >({
    responseTransformer: previewRecurringClassScheduleResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}/schedule/preview',
    ...options,
  });
};

/**
 * Check for scheduling conflicts
 */
export const checkClassSchedulingConflicts = <ThrowOnError extends boolean = false>(
  options: Options<CheckClassSchedulingConflictsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CheckClassSchedulingConflictsResponses,
    CheckClassSchedulingConflictsErrors,
    ThrowOnError
  >({
    responseTransformer: checkClassSchedulingConflictsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/{uuid}/schedule/conflicts',
    ...options,
  });
};

/**
 * Get class definitions for an organisation
 */
export const getClassDefinitionsForOrganisation = <ThrowOnError extends boolean = false>(
  options: Options<GetClassDefinitionsForOrganisationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetClassDefinitionsForOrganisationResponses,
    GetClassDefinitionsForOrganisationErrors,
    ThrowOnError
  >({
    responseTransformer: getClassDefinitionsForOrganisationResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/organisation/{organisationUuid}',
    ...options,
  });
};

/**
 * Get class definitions for an instructor
 */
export const getClassDefinitionsForInstructor = <ThrowOnError extends boolean = false>(
  options: Options<GetClassDefinitionsForInstructorData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetClassDefinitionsForInstructorResponses,
    GetClassDefinitionsForInstructorErrors,
    ThrowOnError
  >({
    responseTransformer: getClassDefinitionsForInstructorResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/instructor/{instructorUuid}',
    ...options,
  });
};

/**
 * Get class definitions for a course
 */
export const getClassDefinitionsForCourse = <ThrowOnError extends boolean = false>(
  options: Options<GetClassDefinitionsForCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetClassDefinitionsForCourseResponses,
    GetClassDefinitionsForCourseErrors,
    ThrowOnError
  >({
    responseTransformer: getClassDefinitionsForCourseResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/course/{courseUuid}',
    ...options,
  });
};

/**
 * Get all active class definitions
 */
export const getAllActiveClassDefinitions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllActiveClassDefinitionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllActiveClassDefinitionsResponses,
    GetAllActiveClassDefinitionsErrors,
    ThrowOnError
  >({
    responseTransformer: getAllActiveClassDefinitionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/classes/active',
    ...options,
  });
};

/**
 * Verify certificate
 * Verifies the authenticity of a certificate using its certificate number.
 */
export const verifyCertificate = <ThrowOnError extends boolean = false>(
  options: Options<VerifyCertificateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    VerifyCertificateResponses,
    VerifyCertificateErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/verify/{certificateNumber}',
    ...options,
  });
};

/**
 * Search certificate templates
 * Search certificate templates with filtering.
 *
 * **Common Template Search Examples:**
 * - `templateType=COURSE` - Course certificate templates
 * - `templateType=PROGRAM` - Program certificate templates
 * - `status=PUBLISHED` - Published templates
 * - `active=true` - Active templates
 * - `name_like=modern` - Templates with "modern" in name
 *
 */
export const searchCertificateTemplates = <ThrowOnError extends boolean = false>(
  options: Options<SearchCertificateTemplatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCertificateTemplatesResponses,
    SearchCertificateTemplatesErrors,
    ThrowOnError
  >({
    responseTransformer: searchCertificateTemplatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/templates/search',
    ...options,
  });
};

/**
 * Get student certificates
 * Retrieves all certificates earned by a specific student.
 */
export const getStudentCertificates = <ThrowOnError extends boolean = false>(
  options: Options<GetStudentCertificatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStudentCertificatesResponses,
    GetStudentCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getStudentCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/student/{studentUuid}',
    ...options,
  });
};

/**
 * Get downloadable certificates
 * Retrieves all valid certificates available for download by a student.
 */
export const getDownloadableCertificates = <ThrowOnError extends boolean = false>(
  options: Options<GetDownloadableCertificatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadableCertificatesResponses,
    GetDownloadableCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getDownloadableCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/student/{studentUuid}/downloadable',
    ...options,
  });
};

/**
 * Search certificates
 * Advanced certificate search with flexible criteria and operators.
 *
 * **Common Certificate Search Examples:**
 * - `studentUuid=uuid` - All certificates for specific student
 * - `courseUuid=uuid` - All certificates for specific course
 * - `programUuid=uuid` - All certificates for specific program
 * - `isValid=true` - Only valid certificates
 * - `isValid=false` - Only revoked certificates
 * - `finalGrade_gte=85` - Certificates with grade 85%+
 * - `issuedDate_gte=2024-01-01T00:00:00` - Certificates issued from 2024
 * - `certificateNumber_like=CERT-2024` - Certificates from 2024
 *
 * **Certificate Analytics Queries:**
 * - `courseUuid_noteq=null&isValid=true` - Valid course certificates
 * - `programUuid_noteq=null&isValid=true` - Valid program certificates
 * - `finalGrade_between=80,100&isValid=true` - High-grade valid certificates
 *
 */
export const searchCertificates = <ThrowOnError extends boolean = false>(
  options: Options<SearchCertificatesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchCertificatesResponses,
    SearchCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: searchCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/search',
    ...options,
  });
};

/**
 * Get revoked certificates
 * Retrieves all revoked certificates for administrative review.
 */
export const getRevokedCertificates = <ThrowOnError extends boolean = false>(
  options?: Options<GetRevokedCertificatesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRevokedCertificatesResponses,
    GetRevokedCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getRevokedCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/revoked',
    ...options,
  });
};

/**
 * Get program certificates
 * Retrieves all certificates issued for program completions.
 */
export const getProgramCertificates1 = <ThrowOnError extends boolean = false>(
  options?: Options<GetProgramCertificates1Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProgramCertificates1Responses,
    GetProgramCertificates1Errors,
    ThrowOnError
  >({
    responseTransformer: getProgramCertificates1ResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/program-certificates',
    ...options,
  });
};

/**
 * Get certificate by number
 * Retrieves certificate details using certificate number for public verification.
 */
export const getCertificateByNumber = <ThrowOnError extends boolean = false>(
  options: Options<GetCertificateByNumberData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCertificateByNumberResponses,
    GetCertificateByNumberErrors,
    ThrowOnError
  >({
    responseTransformer: getCertificateByNumberResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/number/{certificateNumber}',
    ...options,
  });
};

/**
 * Get course certificates
 * Retrieves all certificates issued for course completions.
 */
export const getCourseCertificates = <ThrowOnError extends boolean = false>(
  options?: Options<GetCourseCertificatesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCourseCertificatesResponses,
    GetCourseCertificatesErrors,
    ThrowOnError
  >({
    responseTransformer: getCourseCertificatesResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/certificates/course-certificates',
    ...options,
  });
};

/**
 * Get assignment submissions
 * Retrieves all submissions for a specific assignment.
 */
export const getAssignmentSubmissions = <ThrowOnError extends boolean = false>(
  options: Options<GetAssignmentSubmissionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAssignmentSubmissionsResponses,
    GetAssignmentSubmissionsErrors,
    ThrowOnError
  >({
    responseTransformer: getAssignmentSubmissionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/submissions',
    ...options,
  });
};

/**
 * Get high performance submissions
 * Returns submissions with scores above 85%.
 */
export const getHighPerformanceSubmissions = <ThrowOnError extends boolean = false>(
  options: Options<GetHighPerformanceSubmissionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetHighPerformanceSubmissionsResponses,
    GetHighPerformanceSubmissionsErrors,
    ThrowOnError
  >({
    responseTransformer: getHighPerformanceSubmissionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/high-performance',
    ...options,
  });
};

/**
 * Get average submission score
 * Returns the average score for all graded submissions of an assignment.
 */
export const getAverageScore = <ThrowOnError extends boolean = false>(
  options: Options<GetAverageScoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAverageScoreResponses,
    GetAverageScoreErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/average-score',
    ...options,
  });
};

/**
 * Get submission analytics
 * Returns analytics data for assignment submissions including category distribution.
 */
export const getSubmissionAnalytics = <ThrowOnError extends boolean = false>(
  options: Options<GetSubmissionAnalyticsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSubmissionAnalyticsResponses,
    GetSubmissionAnalyticsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/{assignmentUuid}/analytics',
    ...options,
  });
};

/**
 * Search assignment submissions
 * Search submissions across all assignments.
 *
 * **Common Submission Search Examples:**
 * - `assignmentUuid=uuid` - All submissions for specific assignment
 * - `enrollmentUuid=uuid` - All submissions by specific student
 * - `status=GRADED` - Only graded submissions
 * - `percentage_gte=90` - Submissions with 90%+ score
 * - `submittedAt_gte=2024-01-01T00:00:00` - Submissions from 2024
 * - `gradedByUuid=uuid` - Submissions graded by specific instructor
 *
 */
export const searchSubmissions = <ThrowOnError extends boolean = false>(
  options: Options<SearchSubmissionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchSubmissionsResponses,
    SearchSubmissionsErrors,
    ThrowOnError
  >({
    responseTransformer: searchSubmissionsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/submissions/search',
    ...options,
  });
};

/**
 * Search assignments
 * Advanced assignment search with flexible criteria and operators.
 *
 * **Common Assignment Search Examples:**
 * - `title_like=essay` - Assignments with "essay" in title
 * - `lessonUuid=uuid` - Assignments for specific lesson
 * - `status=PUBLISHED` - Only published assignments
 * - `active=true` - Only active assignments
 * - `dueDate_gte=2024-12-01T00:00:00` - Assignments due from Dec 1, 2024
 * - `maxPoints_gte=50` - Assignments worth 50+ points
 *
 */
export const searchAssignments = <ThrowOnError extends boolean = false>(
  options: Options<SearchAssignmentsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    SearchAssignmentsResponses,
    SearchAssignmentsErrors,
    ThrowOnError
  >({
    responseTransformer: searchAssignmentsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/search',
    ...options,
  });
};

/**
 * Get pending grading
 * Retrieves all submissions pending grading for a specific instructor.
 */
export const getPendingGrading = <ThrowOnError extends boolean = false>(
  options: Options<GetPendingGradingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPendingGradingResponses,
    GetPendingGradingErrors,
    ThrowOnError
  >({
    responseTransformer: getPendingGradingResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/assignments/instructor/{instructorUuid}/pending-grading',
    ...options,
  });
};

/**
 * Check if user is system admin
 * Checks whether a specific user has system administrator privileges. System admins have platform-wide administrative access.
 */
export const isUserSystemAdmin = <ThrowOnError extends boolean = false>(
  options: Options<IsUserSystemAdminData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    IsUserSystemAdminResponses,
    IsUserSystemAdminErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/{uuid}/is-system-admin',
    ...options,
  });
};

/**
 * Check if user is admin
 * Checks whether a specific user has any type of administrative privileges. Returns true if the user has either system admin or organization admin roles.
 */
export const isUserAdmin = <ThrowOnError extends boolean = false>(
  options: Options<IsUserAdminData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    IsUserAdminResponses,
    IsUserAdminErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/{uuid}/is-admin',
    ...options,
  });
};

/**
 * Get system admin users
 * Retrieves a paginated list of users with global system administrator privileges. These users have platform-wide administrative access.
 */
export const getSystemAdminUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetSystemAdminUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSystemAdminUsersResponses,
    GetSystemAdminUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getSystemAdminUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/system-admins',
    ...options,
  });
};

/**
 * Get organization admin users
 * Retrieves a paginated list of users with organization administrator privileges. These users have administrative access within specific organizational contexts.
 */
export const getOrganizationAdminUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetOrganizationAdminUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrganizationAdminUsersResponses,
    GetOrganizationAdminUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getOrganizationAdminUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/organization-admins',
    ...options,
  });
};

/**
 * Get users eligible for admin promotion
 * Retrieves a paginated list of users who can be promoted to administrator roles. Excludes users who already have administrative privileges. Supports search by name or email.
 */
export const getAdminEligibleUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetAdminEligibleUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAdminEligibleUsersResponses,
    GetAdminEligibleUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getAdminEligibleUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/eligible',
    ...options,
  });
};

/**
 * Get all admin users
 * Retrieves a paginated list of all users with administrative privileges. Includes both system administrators and organization administrators. Supports filtering by admin level, status, and other criteria.
 */
export const getAdminUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetAdminUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAdminUsersResponses,
    GetAdminUsersErrors,
    ThrowOnError
  >({
    responseTransformer: getAdminUsersResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/admins',
    ...options,
  });
};

/**
 * Check if organization is verified
 * Checks whether a specific organization has been verified by an admin. Returns true if the organization has admin verification status.
 */
export const isOrganisationVerified = <ThrowOnError extends boolean = false>(
  options: Options<IsOrganisationVerifiedData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    IsOrganisationVerifiedResponses,
    IsOrganisationVerifiedErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/organizations/{uuid}/verification-status',
    ...options,
  });
};

/**
 * Check if instructor is verified
 * Checks whether a specific instructor has been verified by an admin. Returns true if the instructor has admin verification status.
 */
export const isInstructorVerified = <ThrowOnError extends boolean = false>(
  options: Options<IsInstructorVerifiedData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    IsInstructorVerifiedResponses,
    IsInstructorVerifiedErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/instructors/{uuid}/verification-status',
    ...options,
  });
};

/**
 * Get admin dashboard statistics
 * Retrieves comprehensive statistics for the admin dashboard including user metrics, organization metrics, content metrics, system performance, and admin-specific data.
 */
export const getDashboardStatistics = <ThrowOnError extends boolean = false>(
  options?: Options<GetDashboardStatisticsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDashboardStatisticsResponses,
    GetDashboardStatisticsErrors,
    ThrowOnError
  >({
    responseTransformer: getDashboardStatisticsResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/dashboard/statistics',
    ...options,
  });
};

/**
 * Cancel pending invitation
 * Cancels a pending invitation within this organization, preventing it from being accepted or declined. Only the original inviter or an organization administrator can cancel invitations. This action is irreversible and the invitation cannot be reactivated.
 */
export const cancelInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CancelInvitationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CancelInvitationResponses,
    CancelInvitationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/organisations/{uuid}/invitations/{invitationUuid}',
    ...options,
  });
};

/**
 * Cleanup old invitations
 * System maintenance endpoint to delete old invitations that are expired, declined, or cancelled. This helps maintain database cleanliness by removing old invitation records.
 */
export const cleanupOldInvitations = <ThrowOnError extends boolean = false>(
  options?: Options<CleanupOldInvitationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    CleanupOldInvitationsResponses,
    CleanupOldInvitationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/invitations/maintenance/cleanup',
    ...options,
  });
};

/**
 * Remove rubric association
 * Removes the association between a rubric and a course.
 */
export const dissociateRubric = <ThrowOnError extends boolean = false>(
  options: Options<DissociateRubricData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DissociateRubricResponses,
    DissociateRubricErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/{rubricUuid}',
    ...options,
  });
};

/**
 * Remove rubric association by context
 * Removes a specific rubric association based on usage context.
 */
export const dissociateRubricByContext = <ThrowOnError extends boolean = false>(
  options: Options<DissociateRubricByContextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DissociateRubricByContextResponses,
    DissociateRubricByContextErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/rubrics/{rubricUuid}/context/{context}',
    ...options,
  });
};

/**
 * Remove category from course
 * Removes a specific category from a course without affecting other categories.
 */
export const removeCategoryFromCourse = <ThrowOnError extends boolean = false>(
  options: Options<RemoveCategoryFromCourseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveCategoryFromCourseResponses,
    RemoveCategoryFromCourseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/courses/{courseUuid}/categories/{categoryUuid}',
    ...options,
  });
};

/**
 * Remove admin domain from user
 * Removes admin domain privileges from a user. This revokes the user's administrative access for the specified domain type. Only system administrators can perform this operation.
 */
export const removeAdminDomain = <ThrowOnError extends boolean = false>(
  options: Options<RemoveAdminDomainData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveAdminDomainResponses,
    RemoveAdminDomainErrors,
    ThrowOnError
  >({
    responseTransformer: removeAdminDomainResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/admin/users/{uuid}/domains/{domain}',
    ...options,
  });
};
