// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetUserByUuidResponse,
  UpdateUserResponse,
  GetTrainingBranchByUuidResponse,
  UpdateTrainingBranchResponse,
  GetStudentByIdResponse,
  UpdateStudentResponse,
  GetQuizByUuidResponse,
  UpdateQuizResponse,
  UpdateQuizQuestionResponse,
  UpdateQuestionOptionResponse,
  UpdateProgramRequirementResponse,
  UpdateProgramCourseResponse,
  GetOrganisationByUuidResponse,
  UpdateOrganisationResponse,
  GetTrainingBranchByUuid1Response,
  UpdateTrainingBranch1Response,
  GetInstructorByUuidResponse,
  UpdateInstructorResponse,
  UpdateInstructorSkillResponse,
  UpdateInstructorMembershipResponse,
  UpdateInstructorExperienceResponse,
  UpdateInstructorEducationResponse,
  UpdateInstructorDocumentResponse,
  GetCourseByUuidResponse,
  UpdateCourseResponse,
  UpdateCourseRequirementResponse,
  GetCourseLessonResponse,
  UpdateCourseLessonResponse,
  UpdateLessonContentResponse,
  UpdateCourseAssessmentResponse,
  UpdateGradingLevelResponse,
  UpdateDifficultyLevelResponse,
  UpdateContentTypeResponse,
  GetCategoryByUuidResponse,
  UpdateCategoryResponse,
  GetCertificateByUuidResponse,
  UpdateCertificateResponse,
  UpdateCertificateTemplateResponse,
  GetAssignmentByUuidResponse,
  UpdateAssignmentResponse,
  AcceptInvitationResponse,
  UploadProfileImageResponse,
  GetAllTrainingBranchesResponse,
  CreateTrainingBranchResponse,
  GetAllStudentsResponse,
  CreateStudentResponse,
  GetAllQuizzesResponse,
  CreateQuizResponse,
  GetQuizQuestionsResponse,
  AddQuizQuestionResponse,
  GetQuestionOptionsResponse,
  AddQuestionOptionResponse,
  GetProgramRequirementsResponse,
  AddProgramRequirementResponse,
  GetProgramCoursesResponse,
  AddProgramCourseResponse,
  GetAllOrganisationsResponse,
  CreateOrganisationResponse,
  GetTrainingBranchesByOrganisationResponse,
  CreateTrainingBranch1Response,
  GetBranchInvitationsResponse,
  CreateBranchInvitationResponse,
  GetOrganizationInvitationsResponse,
  CreateOrganizationInvitationResponse,
  GetAllInstructorsResponse,
  CreateInstructorResponse,
  GetInstructorSkillsResponse,
  AddInstructorSkillResponse,
  GetInstructorMembershipsResponse,
  AddInstructorMembershipResponse,
  GetInstructorExperienceResponse,
  AddInstructorExperienceResponse,
  GetInstructorEducationResponse,
  AddInstructorEducationResponse,
  GetInstructorDocumentsResponse,
  AddInstructorDocumentResponse,
  VerifyDocumentResponse,
  GetAllCoursesResponse,
  CreateCourseResponse,
  UnpublishCourseResponse,
  UploadCourseThumbnailResponse,
  PublishCourseResponse,
  UploadCourseIntroVideoResponse,
  UploadCourseBannerResponse,
  ArchiveCourseResponse,
  GetCourseRequirementsResponse,
  AddCourseRequirementResponse,
  GetCourseLessonsResponse,
  AddCourseLessonResponse,
  GetLessonContentResponse,
  AddLessonContentResponse,
  GetCourseAssessmentsResponse,
  AddCourseAssessmentResponse,
  GetAllGradingLevelsResponse,
  CreateGradingLevelResponse,
  GetAllDifficultyLevelsResponse,
  CreateDifficultyLevelResponse,
  GetAllContentTypesResponse,
  CreateContentTypeResponse,
  GetAllCategoriesResponse,
  CreateCategoryResponse,
  GetAllCertificatesResponse,
  CreateCertificateResponse,
  GenerateCertificateUrlResponse,
  GetCertificateTemplatesResponse,
  CreateCertificateTemplateResponse,
  GenerateProgramCertificateResponse,
  GenerateCourseCertificateResponse,
  GetAllAssignmentsResponse,
  CreateAssignmentResponse,
  SubmitAssignmentResponse,
  ReturnSubmissionResponse,
  GradeSubmissionResponse,
  GetAllUsersResponse,
  GetInvitationsSentByUserResponse,
  GetPendingInvitationsForUserResponse,
  SearchResponse,
  Search1Response,
  GetTrainingBranchesByOrganisation1Response,
  SearchStudentsResponse,
  GetQuizAttemptsResponse,
  SearchQuizzesResponse,
  SearchQuestionsResponse,
  SearchAttemptsResponse,
  GetProgramEnrollmentsResponse,
  GetRequiredCoursesResponse,
  GetOptionalCoursesResponse,
  GetProgramCertificatesResponse,
  SearchProgramRequirementsResponse,
  SearchProgramEnrollmentsResponse,
  SearchProgramCoursesResponse,
  GetUsersByOrganisationResponse,
  GetUsersByOrganisationAndDomainResponse,
  GetBranchUsersResponse,
  GetBranchUsersByDomainResponse,
  Search2Response,
  GetInvitationByTokenResponse,
  GetPendingInvitationsForEmailResponse,
  SearchSkillsResponse,
  SearchInstructorsResponse,
  SearchMembershipsResponse,
  SearchExperienceResponse,
  SearchEducationResponse,
  SearchDocumentsResponse,
  GetCourseEnrollmentsResponse,
  GetCourseCategoriesResponse,
  SearchCoursesResponse,
  SearchRequirementsResponse,
  GetPublishedCoursesResponse,
  SearchLessonsResponse,
  GetCoursesByInstructorResponse,
  SearchEnrollmentsResponse,
  SearchLessonContentResponse,
  GetCoursesByCategoryResponse,
  SearchCategoryMappingsResponse,
  SearchAssessmentsResponse,
  GetActiveCoursesResponse,
  SearchContentTypesResponse,
  GetMediaContentTypesResponse,
  GetSubCategoriesResponse,
  SearchCategoriesResponse,
  GetRootCategoriesResponse,
  SearchCertificateTemplatesResponse,
  GetStudentCertificatesResponse,
  GetDownloadableCertificatesResponse,
  SearchCertificatesResponse,
  GetRevokedCertificatesResponse,
  GetProgramCertificates1Response,
  GetCertificateByNumberResponse,
  GetCourseCertificatesResponse,
  GetAssignmentSubmissionsResponse,
  GetHighPerformanceSubmissionsResponse,
  SearchSubmissionsResponse,
  SearchAssignmentsResponse,
  GetPendingGradingResponse,
} from './types.gen';

const userSchemaResponseTransformer = (data: any) => {
  data.dob = new Date(data.dob);
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseUserSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = userSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getUserByUuidResponseTransformer = async (
  data: any
): Promise<GetUserByUuidResponse> => {
  data = apiResponseUserSchemaResponseTransformer(data);
  return data;
};

export const updateUserResponseTransformer = async (data: any): Promise<UpdateUserResponse> => {
  data = apiResponseUserSchemaResponseTransformer(data);
  return data;
};

const trainingBranchSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseTrainingBranchSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = trainingBranchSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getTrainingBranchByUuidResponseTransformer = async (
  data: any
): Promise<GetTrainingBranchByUuidResponse> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

export const updateTrainingBranchResponseTransformer = async (
  data: any
): Promise<UpdateTrainingBranchResponse> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

const studentSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

export const getStudentByIdResponseTransformer = async (
  data: any
): Promise<GetStudentByIdResponse> => {
  data = studentSchemaResponseTransformer(data);
  return data;
};

export const updateStudentResponseTransformer = async (
  data: any
): Promise<UpdateStudentResponse> => {
  data = studentSchemaResponseTransformer(data);
  return data;
};

const quizSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseQuizSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = quizSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getQuizByUuidResponseTransformer = async (
  data: any
): Promise<GetQuizByUuidResponse> => {
  data = apiResponseQuizSchemaResponseTransformer(data);
  return data;
};

export const updateQuizResponseTransformer = async (data: any): Promise<UpdateQuizResponse> => {
  data = apiResponseQuizSchemaResponseTransformer(data);
  return data;
};

const quizQuestionSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseQuizQuestionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = quizQuestionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateQuizQuestionResponseTransformer = async (
  data: any
): Promise<UpdateQuizQuestionResponse> => {
  data = apiResponseQuizQuestionSchemaResponseTransformer(data);
  return data;
};

const quizQuestionOptionSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseQuizQuestionOptionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = quizQuestionOptionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateQuestionOptionResponseTransformer = async (
  data: any
): Promise<UpdateQuestionOptionResponse> => {
  data = apiResponseQuizQuestionOptionSchemaResponseTransformer(data);
  return data;
};

const programRequirementSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseProgramRequirementSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = programRequirementSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateProgramRequirementResponseTransformer = async (
  data: any
): Promise<UpdateProgramRequirementResponse> => {
  data = apiResponseProgramRequirementSchemaResponseTransformer(data);
  return data;
};

const programCourseSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseProgramCourseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = programCourseSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateProgramCourseResponseTransformer = async (
  data: any
): Promise<UpdateProgramCourseResponse> => {
  data = apiResponseProgramCourseSchemaResponseTransformer(data);
  return data;
};

const organisationSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseOrganisationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = organisationSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getOrganisationByUuidResponseTransformer = async (
  data: any
): Promise<GetOrganisationByUuidResponse> => {
  data = apiResponseOrganisationSchemaResponseTransformer(data);
  return data;
};

export const updateOrganisationResponseTransformer = async (
  data: any
): Promise<UpdateOrganisationResponse> => {
  data = apiResponseOrganisationSchemaResponseTransformer(data);
  return data;
};

export const getTrainingBranchByUuid1ResponseTransformer = async (
  data: any
): Promise<GetTrainingBranchByUuid1Response> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

export const updateTrainingBranch1ResponseTransformer = async (
  data: any
): Promise<UpdateTrainingBranch1Response> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

const instructorSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

export const getInstructorByUuidResponseTransformer = async (
  data: any
): Promise<GetInstructorByUuidResponse> => {
  data = instructorSchemaResponseTransformer(data);
  return data;
};

export const updateInstructorResponseTransformer = async (
  data: any
): Promise<UpdateInstructorResponse> => {
  data = instructorSchemaResponseTransformer(data);
  return data;
};

const instructorSkillSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseInstructorSkillSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = instructorSkillSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateInstructorSkillResponseTransformer = async (
  data: any
): Promise<UpdateInstructorSkillResponse> => {
  data = apiResponseInstructorSkillSchemaResponseTransformer(data);
  return data;
};

const instructorProfessionalMembershipSchemaResponseTransformer = (data: any) => {
  if (data.start_date) {
    data.start_date = new Date(data.start_date);
  }
  if (data.end_date) {
    data.end_date = new Date(data.end_date);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseInstructorProfessionalMembershipSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = instructorProfessionalMembershipSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateInstructorMembershipResponseTransformer = async (
  data: any
): Promise<UpdateInstructorMembershipResponse> => {
  data = apiResponseInstructorProfessionalMembershipSchemaResponseTransformer(data);
  return data;
};

const instructorExperienceSchemaResponseTransformer = (data: any) => {
  if (data.start_date) {
    data.start_date = new Date(data.start_date);
  }
  if (data.end_date) {
    data.end_date = new Date(data.end_date);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseInstructorExperienceSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = instructorExperienceSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateInstructorExperienceResponseTransformer = async (
  data: any
): Promise<UpdateInstructorExperienceResponse> => {
  data = apiResponseInstructorExperienceSchemaResponseTransformer(data);
  return data;
};

const instructorEducationSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseInstructorEducationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = instructorEducationSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateInstructorEducationResponseTransformer = async (
  data: any
): Promise<UpdateInstructorEducationResponse> => {
  data = apiResponseInstructorEducationSchemaResponseTransformer(data);
  return data;
};

const instructorDocumentSchemaResponseTransformer = (data: any) => {
  if (data.expiry_date) {
    data.expiry_date = new Date(data.expiry_date);
  }
  if (data.file_size_bytes) {
    data.file_size_bytes = BigInt(data.file_size_bytes.toString());
  }
  if (data.upload_date) {
    data.upload_date = new Date(data.upload_date);
  }
  if (data.verified_at) {
    data.verified_at = new Date(data.verified_at);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseInstructorDocumentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = instructorDocumentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateInstructorDocumentResponseTransformer = async (
  data: any
): Promise<UpdateInstructorDocumentResponse> => {
  data = apiResponseInstructorDocumentSchemaResponseTransformer(data);
  return data;
};

const courseSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCourseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = courseSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCourseByUuidResponseTransformer = async (
  data: any
): Promise<GetCourseByUuidResponse> => {
  data = apiResponseCourseSchemaResponseTransformer(data);
  return data;
};

export const updateCourseResponseTransformer = async (data: any): Promise<UpdateCourseResponse> => {
  data = apiResponseCourseSchemaResponseTransformer(data);
  return data;
};

const courseRequirementSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCourseRequirementSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = courseRequirementSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateCourseRequirementResponseTransformer = async (
  data: any
): Promise<UpdateCourseRequirementResponse> => {
  data = apiResponseCourseRequirementSchemaResponseTransformer(data);
  return data;
};

const lessonSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

export const getCourseLessonResponseTransformer = async (
  data: any
): Promise<GetCourseLessonResponse> => {
  data = lessonSchemaResponseTransformer(data);
  return data;
};

const apiResponseLessonSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = lessonSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateCourseLessonResponseTransformer = async (
  data: any
): Promise<UpdateCourseLessonResponse> => {
  data = apiResponseLessonSchemaResponseTransformer(data);
  return data;
};

const lessonContentSchemaResponseTransformer = (data: any) => {
  if (data.file_size_bytes) {
    data.file_size_bytes = BigInt(data.file_size_bytes.toString());
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseLessonContentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = lessonContentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateLessonContentResponseTransformer = async (
  data: any
): Promise<UpdateLessonContentResponse> => {
  data = apiResponseLessonContentSchemaResponseTransformer(data);
  return data;
};

const courseAssessmentSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCourseAssessmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = courseAssessmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateCourseAssessmentResponseTransformer = async (
  data: any
): Promise<UpdateCourseAssessmentResponse> => {
  data = apiResponseCourseAssessmentSchemaResponseTransformer(data);
  return data;
};

const gradingLevelSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseGradingLevelSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = gradingLevelSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateGradingLevelResponseTransformer = async (
  data: any
): Promise<UpdateGradingLevelResponse> => {
  data = apiResponseGradingLevelSchemaResponseTransformer(data);
  return data;
};

const difficultyLevelSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseDifficultyLevelSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = difficultyLevelSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateDifficultyLevelResponseTransformer = async (
  data: any
): Promise<UpdateDifficultyLevelResponse> => {
  data = apiResponseDifficultyLevelSchemaResponseTransformer(data);
  return data;
};

const contentTypeSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseContentTypeSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = contentTypeSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateContentTypeResponseTransformer = async (
  data: any
): Promise<UpdateContentTypeResponse> => {
  data = apiResponseContentTypeSchemaResponseTransformer(data);
  return data;
};

const categorySchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCategorySchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = categorySchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCategoryByUuidResponseTransformer = async (
  data: any
): Promise<GetCategoryByUuidResponse> => {
  data = apiResponseCategorySchemaResponseTransformer(data);
  return data;
};

export const updateCategoryResponseTransformer = async (
  data: any
): Promise<UpdateCategoryResponse> => {
  data = apiResponseCategorySchemaResponseTransformer(data);
  return data;
};

const certificateSchemaResponseTransformer = (data: any) => {
  data.completion_date = new Date(data.completion_date);
  if (data.issued_date) {
    data.issued_date = new Date(data.issued_date);
  }
  if (data.revoked_at) {
    data.revoked_at = new Date(data.revoked_at);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCertificateSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = certificateSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCertificateByUuidResponseTransformer = async (
  data: any
): Promise<GetCertificateByUuidResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

export const updateCertificateResponseTransformer = async (
  data: any
): Promise<UpdateCertificateResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

const certificateTemplateSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseCertificateTemplateSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = certificateTemplateSchemaResponseTransformer(data.data);
  }
  return data;
};

export const updateCertificateTemplateResponseTransformer = async (
  data: any
): Promise<UpdateCertificateTemplateResponse> => {
  data = apiResponseCertificateTemplateSchemaResponseTransformer(data);
  return data;
};

const assignmentSchemaResponseTransformer = (data: any) => {
  if (data.due_date) {
    data.due_date = new Date(data.due_date);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseAssignmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = assignmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAssignmentByUuidResponseTransformer = async (
  data: any
): Promise<GetAssignmentByUuidResponse> => {
  data = apiResponseAssignmentSchemaResponseTransformer(data);
  return data;
};

export const updateAssignmentResponseTransformer = async (
  data: any
): Promise<UpdateAssignmentResponse> => {
  data = apiResponseAssignmentSchemaResponseTransformer(data);
  return data;
};

export const acceptInvitationResponseTransformer = async (
  data: any
): Promise<AcceptInvitationResponse> => {
  data = apiResponseUserSchemaResponseTransformer(data);
  return data;
};

export const uploadProfileImageResponseTransformer = async (
  data: any
): Promise<UploadProfileImageResponse> => {
  data = userSchemaResponseTransformer(data);
  return data;
};

const pageMetadataSchemaResponseTransformer = (data: any) => {
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString());
  }
  return data;
};

const pagedDtoTrainingBranchSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return trainingBranchSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoTrainingBranchSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoTrainingBranchSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllTrainingBranchesResponseTransformer = async (
  data: any
): Promise<GetAllTrainingBranchesResponse> => {
  data = apiResponsePagedDtoTrainingBranchSchemaResponseTransformer(data);
  return data;
};

export const createTrainingBranchResponseTransformer = async (
  data: any
): Promise<CreateTrainingBranchResponse> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

const pagedDtoStudentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return studentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoStudentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoStudentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllStudentsResponseTransformer = async (
  data: any
): Promise<GetAllStudentsResponse> => {
  data = apiResponsePagedDtoStudentSchemaResponseTransformer(data);
  return data;
};

export const createStudentResponseTransformer = async (
  data: any
): Promise<CreateStudentResponse> => {
  data = studentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoQuizSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return quizSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoQuizSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoQuizSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllQuizzesResponseTransformer = async (
  data: any
): Promise<GetAllQuizzesResponse> => {
  data = apiResponsePagedDtoQuizSchemaResponseTransformer(data);
  return data;
};

export const createQuizResponseTransformer = async (data: any): Promise<CreateQuizResponse> => {
  data = quizSchemaResponseTransformer(data);
  return data;
};

const apiResponseListQuizQuestionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return quizQuestionSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getQuizQuestionsResponseTransformer = async (
  data: any
): Promise<GetQuizQuestionsResponse> => {
  data = apiResponseListQuizQuestionSchemaResponseTransformer(data);
  return data;
};

export const addQuizQuestionResponseTransformer = async (
  data: any
): Promise<AddQuizQuestionResponse> => {
  data = apiResponseQuizQuestionSchemaResponseTransformer(data);
  return data;
};

const pagedDtoQuizQuestionOptionSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return quizQuestionOptionSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoQuizQuestionOptionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoQuizQuestionOptionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getQuestionOptionsResponseTransformer = async (
  data: any
): Promise<GetQuestionOptionsResponse> => {
  data = apiResponsePagedDtoQuizQuestionOptionSchemaResponseTransformer(data);
  return data;
};

export const addQuestionOptionResponseTransformer = async (
  data: any
): Promise<AddQuestionOptionResponse> => {
  data = apiResponseQuizQuestionOptionSchemaResponseTransformer(data);
  return data;
};

const pagedDtoProgramRequirementSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return programRequirementSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoProgramRequirementSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoProgramRequirementSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getProgramRequirementsResponseTransformer = async (
  data: any
): Promise<GetProgramRequirementsResponse> => {
  data = apiResponsePagedDtoProgramRequirementSchemaResponseTransformer(data);
  return data;
};

export const addProgramRequirementResponseTransformer = async (
  data: any
): Promise<AddProgramRequirementResponse> => {
  data = apiResponseProgramRequirementSchemaResponseTransformer(data);
  return data;
};

const apiResponseListCourseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return courseSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getProgramCoursesResponseTransformer = async (
  data: any
): Promise<GetProgramCoursesResponse> => {
  data = apiResponseListCourseSchemaResponseTransformer(data);
  return data;
};

export const addProgramCourseResponseTransformer = async (
  data: any
): Promise<AddProgramCourseResponse> => {
  data = apiResponseProgramCourseSchemaResponseTransformer(data);
  return data;
};

const pagedDtoOrganisationSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return organisationSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoOrganisationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoOrganisationSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllOrganisationsResponseTransformer = async (
  data: any
): Promise<GetAllOrganisationsResponse> => {
  data = apiResponsePagedDtoOrganisationSchemaResponseTransformer(data);
  return data;
};

export const createOrganisationResponseTransformer = async (
  data: any
): Promise<CreateOrganisationResponse> => {
  data = apiResponseOrganisationSchemaResponseTransformer(data);
  return data;
};

export const getTrainingBranchesByOrganisationResponseTransformer = async (
  data: any
): Promise<GetTrainingBranchesByOrganisationResponse> => {
  data = apiResponsePagedDtoTrainingBranchSchemaResponseTransformer(data);
  return data;
};

export const createTrainingBranch1ResponseTransformer = async (
  data: any
): Promise<CreateTrainingBranch1Response> => {
  data = apiResponseTrainingBranchSchemaResponseTransformer(data);
  return data;
};

const invitationSchemaResponseTransformer = (data: any) => {
  if (data.expires_at) {
    data.expires_at = new Date(data.expires_at);
  }
  if (data.accepted_at) {
    data.accepted_at = new Date(data.accepted_at);
  }
  if (data.declined_at) {
    data.declined_at = new Date(data.declined_at);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseListInvitationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return invitationSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getBranchInvitationsResponseTransformer = async (
  data: any
): Promise<GetBranchInvitationsResponse> => {
  data = apiResponseListInvitationSchemaResponseTransformer(data);
  return data;
};

const apiResponseInvitationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = invitationSchemaResponseTransformer(data.data);
  }
  return data;
};

export const createBranchInvitationResponseTransformer = async (
  data: any
): Promise<CreateBranchInvitationResponse> => {
  data = apiResponseInvitationSchemaResponseTransformer(data);
  return data;
};

export const getOrganizationInvitationsResponseTransformer = async (
  data: any
): Promise<GetOrganizationInvitationsResponse> => {
  data = apiResponseListInvitationSchemaResponseTransformer(data);
  return data;
};

export const createOrganizationInvitationResponseTransformer = async (
  data: any
): Promise<CreateOrganizationInvitationResponse> => {
  data = apiResponseInvitationSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllInstructorsResponseTransformer = async (
  data: any
): Promise<GetAllInstructorsResponse> => {
  data = apiResponsePagedDtoInstructorSchemaResponseTransformer(data);
  return data;
};

export const createInstructorResponseTransformer = async (
  data: any
): Promise<CreateInstructorResponse> => {
  data = instructorSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorSkillSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorSkillSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorSkillSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorSkillSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getInstructorSkillsResponseTransformer = async (
  data: any
): Promise<GetInstructorSkillsResponse> => {
  data = apiResponsePagedDtoInstructorSkillSchemaResponseTransformer(data);
  return data;
};

export const addInstructorSkillResponseTransformer = async (
  data: any
): Promise<AddInstructorSkillResponse> => {
  data = apiResponseInstructorSkillSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorProfessionalMembershipSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorProfessionalMembershipSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorProfessionalMembershipSchemaResponseTransformer = (
  data: any
) => {
  if (data.data) {
    data.data = pagedDtoInstructorProfessionalMembershipSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getInstructorMembershipsResponseTransformer = async (
  data: any
): Promise<GetInstructorMembershipsResponse> => {
  data = apiResponsePagedDtoInstructorProfessionalMembershipSchemaResponseTransformer(data);
  return data;
};

export const addInstructorMembershipResponseTransformer = async (
  data: any
): Promise<AddInstructorMembershipResponse> => {
  data = apiResponseInstructorProfessionalMembershipSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorExperienceSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorExperienceSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorExperienceSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorExperienceSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getInstructorExperienceResponseTransformer = async (
  data: any
): Promise<GetInstructorExperienceResponse> => {
  data = apiResponsePagedDtoInstructorExperienceSchemaResponseTransformer(data);
  return data;
};

export const addInstructorExperienceResponseTransformer = async (
  data: any
): Promise<AddInstructorExperienceResponse> => {
  data = apiResponseInstructorExperienceSchemaResponseTransformer(data);
  return data;
};

const apiResponseListInstructorEducationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return instructorEducationSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getInstructorEducationResponseTransformer = async (
  data: any
): Promise<GetInstructorEducationResponse> => {
  data = apiResponseListInstructorEducationSchemaResponseTransformer(data);
  return data;
};

export const addInstructorEducationResponseTransformer = async (
  data: any
): Promise<AddInstructorEducationResponse> => {
  data = apiResponseInstructorEducationSchemaResponseTransformer(data);
  return data;
};

const apiResponseListInstructorDocumentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return instructorDocumentSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getInstructorDocumentsResponseTransformer = async (
  data: any
): Promise<GetInstructorDocumentsResponse> => {
  data = apiResponseListInstructorDocumentSchemaResponseTransformer(data);
  return data;
};

export const addInstructorDocumentResponseTransformer = async (
  data: any
): Promise<AddInstructorDocumentResponse> => {
  data = apiResponseInstructorDocumentSchemaResponseTransformer(data);
  return data;
};

export const verifyDocumentResponseTransformer = async (
  data: any
): Promise<VerifyDocumentResponse> => {
  data = apiResponseInstructorDocumentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCourseSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return courseSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCourseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCourseSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllCoursesResponseTransformer = async (
  data: any
): Promise<GetAllCoursesResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

export const createCourseResponseTransformer = async (data: any): Promise<CreateCourseResponse> => {
  data = courseSchemaResponseTransformer(data);
  return data;
};

export const unpublishCourseResponseTransformer = async (
  data: any
): Promise<UnpublishCourseResponse> => {
  data = apiResponseCourseSchemaResponseTransformer(data);
  return data;
};

export const uploadCourseThumbnailResponseTransformer = async (
  data: any
): Promise<UploadCourseThumbnailResponse> => {
  data = courseSchemaResponseTransformer(data);
  return data;
};

export const publishCourseResponseTransformer = async (
  data: any
): Promise<PublishCourseResponse> => {
  data = apiResponseCourseSchemaResponseTransformer(data);
  return data;
};

export const uploadCourseIntroVideoResponseTransformer = async (
  data: any
): Promise<UploadCourseIntroVideoResponse> => {
  data = courseSchemaResponseTransformer(data);
  return data;
};

export const uploadCourseBannerResponseTransformer = async (
  data: any
): Promise<UploadCourseBannerResponse> => {
  data = courseSchemaResponseTransformer(data);
  return data;
};

export const archiveCourseResponseTransformer = async (
  data: any
): Promise<ArchiveCourseResponse> => {
  data = apiResponseCourseSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCourseRequirementSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return courseRequirementSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCourseRequirementSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCourseRequirementSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCourseRequirementsResponseTransformer = async (
  data: any
): Promise<GetCourseRequirementsResponse> => {
  data = apiResponsePagedDtoCourseRequirementSchemaResponseTransformer(data);
  return data;
};

export const addCourseRequirementResponseTransformer = async (
  data: any
): Promise<AddCourseRequirementResponse> => {
  data = apiResponseCourseRequirementSchemaResponseTransformer(data);
  return data;
};

const pagedDtoLessonSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return lessonSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoLessonSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoLessonSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCourseLessonsResponseTransformer = async (
  data: any
): Promise<GetCourseLessonsResponse> => {
  data = apiResponsePagedDtoLessonSchemaResponseTransformer(data);
  return data;
};

export const addCourseLessonResponseTransformer = async (
  data: any
): Promise<AddCourseLessonResponse> => {
  data = apiResponseLessonSchemaResponseTransformer(data);
  return data;
};

const apiResponseListLessonContentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return lessonContentSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getLessonContentResponseTransformer = async (
  data: any
): Promise<GetLessonContentResponse> => {
  data = apiResponseListLessonContentSchemaResponseTransformer(data);
  return data;
};

export const addLessonContentResponseTransformer = async (
  data: any
): Promise<AddLessonContentResponse> => {
  data = apiResponseLessonContentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCourseAssessmentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return courseAssessmentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCourseAssessmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCourseAssessmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCourseAssessmentsResponseTransformer = async (
  data: any
): Promise<GetCourseAssessmentsResponse> => {
  data = apiResponsePagedDtoCourseAssessmentSchemaResponseTransformer(data);
  return data;
};

export const addCourseAssessmentResponseTransformer = async (
  data: any
): Promise<AddCourseAssessmentResponse> => {
  data = apiResponseCourseAssessmentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoGradingLevelSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return gradingLevelSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoGradingLevelSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoGradingLevelSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllGradingLevelsResponseTransformer = async (
  data: any
): Promise<GetAllGradingLevelsResponse> => {
  data = apiResponsePagedDtoGradingLevelSchemaResponseTransformer(data);
  return data;
};

export const createGradingLevelResponseTransformer = async (
  data: any
): Promise<CreateGradingLevelResponse> => {
  data = apiResponseGradingLevelSchemaResponseTransformer(data);
  return data;
};

const apiResponseListDifficultyLevelSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return difficultyLevelSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getAllDifficultyLevelsResponseTransformer = async (
  data: any
): Promise<GetAllDifficultyLevelsResponse> => {
  data = apiResponseListDifficultyLevelSchemaResponseTransformer(data);
  return data;
};

export const createDifficultyLevelResponseTransformer = async (
  data: any
): Promise<CreateDifficultyLevelResponse> => {
  data = apiResponseDifficultyLevelSchemaResponseTransformer(data);
  return data;
};

const pagedDtoContentTypeSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return contentTypeSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoContentTypeSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoContentTypeSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllContentTypesResponseTransformer = async (
  data: any
): Promise<GetAllContentTypesResponse> => {
  data = apiResponsePagedDtoContentTypeSchemaResponseTransformer(data);
  return data;
};

export const createContentTypeResponseTransformer = async (
  data: any
): Promise<CreateContentTypeResponse> => {
  data = apiResponseContentTypeSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCategorySchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return categorySchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCategorySchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCategorySchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllCategoriesResponseTransformer = async (
  data: any
): Promise<GetAllCategoriesResponse> => {
  data = apiResponsePagedDtoCategorySchemaResponseTransformer(data);
  return data;
};

export const createCategoryResponseTransformer = async (
  data: any
): Promise<CreateCategoryResponse> => {
  data = apiResponseCategorySchemaResponseTransformer(data);
  return data;
};

const pagedDtoCertificateSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return certificateSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCertificateSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCertificateSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllCertificatesResponseTransformer = async (
  data: any
): Promise<GetAllCertificatesResponse> => {
  data = apiResponsePagedDtoCertificateSchemaResponseTransformer(data);
  return data;
};

export const createCertificateResponseTransformer = async (
  data: any
): Promise<CreateCertificateResponse> => {
  data = certificateSchemaResponseTransformer(data);
  return data;
};

export const generateCertificateUrlResponseTransformer = async (
  data: any
): Promise<GenerateCertificateUrlResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCertificateTemplateSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return certificateTemplateSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCertificateTemplateSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCertificateTemplateSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCertificateTemplatesResponseTransformer = async (
  data: any
): Promise<GetCertificateTemplatesResponse> => {
  data = apiResponsePagedDtoCertificateTemplateSchemaResponseTransformer(data);
  return data;
};

export const createCertificateTemplateResponseTransformer = async (
  data: any
): Promise<CreateCertificateTemplateResponse> => {
  data = apiResponseCertificateTemplateSchemaResponseTransformer(data);
  return data;
};

export const generateProgramCertificateResponseTransformer = async (
  data: any
): Promise<GenerateProgramCertificateResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

export const generateCourseCertificateResponseTransformer = async (
  data: any
): Promise<GenerateCourseCertificateResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

const pagedDtoAssignmentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return assignmentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoAssignmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoAssignmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllAssignmentsResponseTransformer = async (
  data: any
): Promise<GetAllAssignmentsResponse> => {
  data = apiResponsePagedDtoAssignmentSchemaResponseTransformer(data);
  return data;
};

export const createAssignmentResponseTransformer = async (
  data: any
): Promise<CreateAssignmentResponse> => {
  data = assignmentSchemaResponseTransformer(data);
  return data;
};

const assignmentSubmissionSchemaResponseTransformer = (data: any) => {
  if (data.submitted_at) {
    data.submitted_at = new Date(data.submitted_at);
  }
  if (data.graded_at) {
    data.graded_at = new Date(data.graded_at);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseAssignmentSubmissionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = assignmentSubmissionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const submitAssignmentResponseTransformer = async (
  data: any
): Promise<SubmitAssignmentResponse> => {
  data = apiResponseAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

export const returnSubmissionResponseTransformer = async (
  data: any
): Promise<ReturnSubmissionResponse> => {
  data = apiResponseAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

export const gradeSubmissionResponseTransformer = async (
  data: any
): Promise<GradeSubmissionResponse> => {
  data = apiResponseAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

const pagedDtoUserSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoUserSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoUserSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getAllUsersResponseTransformer = async (data: any): Promise<GetAllUsersResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data);
  return data;
};

export const getInvitationsSentByUserResponseTransformer = async (
  data: any
): Promise<GetInvitationsSentByUserResponse> => {
  data = apiResponseListInvitationSchemaResponseTransformer(data);
  return data;
};

export const getPendingInvitationsForUserResponseTransformer = async (
  data: any
): Promise<GetPendingInvitationsForUserResponse> => {
  data = apiResponseListInvitationSchemaResponseTransformer(data);
  return data;
};

export const searchResponseTransformer = async (data: any): Promise<SearchResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data);
  return data;
};

export const search1ResponseTransformer = async (data: any): Promise<Search1Response> => {
  data = apiResponsePagedDtoTrainingBranchSchemaResponseTransformer(data);
  return data;
};

export const getTrainingBranchesByOrganisation1ResponseTransformer = async (
  data: any
): Promise<GetTrainingBranchesByOrganisation1Response> => {
  data = apiResponsePagedDtoTrainingBranchSchemaResponseTransformer(data);
  return data;
};

const pageableObjectSchemaResponseTransformer = (data: any) => {
  if (data.offset) {
    data.offset = BigInt(data.offset.toString());
  }
  return data;
};

const pageSchemaResponseTransformer = (data: any) => {
  if (data.totalElements) {
    data.totalElements = BigInt(data.totalElements.toString());
  }
  if (data.pageable) {
    data.pageable = pageableObjectSchemaResponseTransformer(data.pageable);
  }
  return data;
};

export const searchStudentsResponseTransformer = async (
  data: any
): Promise<SearchStudentsResponse> => {
  data = pageSchemaResponseTransformer(data);
  return data;
};

const quizAttemptSchemaResponseTransformer = (data: any) => {
  if (data.started_at) {
    data.started_at = new Date(data.started_at);
  }
  if (data.submitted_at) {
    data.submitted_at = new Date(data.submitted_at);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const pagedDtoQuizAttemptSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return quizAttemptSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoQuizAttemptSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoQuizAttemptSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getQuizAttemptsResponseTransformer = async (
  data: any
): Promise<GetQuizAttemptsResponse> => {
  data = apiResponsePagedDtoQuizAttemptSchemaResponseTransformer(data);
  return data;
};

export const searchQuizzesResponseTransformer = async (
  data: any
): Promise<SearchQuizzesResponse> => {
  data = apiResponsePagedDtoQuizSchemaResponseTransformer(data);
  return data;
};

const pagedDtoQuizQuestionSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return quizQuestionSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoQuizQuestionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoQuizQuestionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchQuestionsResponseTransformer = async (
  data: any
): Promise<SearchQuestionsResponse> => {
  data = apiResponsePagedDtoQuizQuestionSchemaResponseTransformer(data);
  return data;
};

export const searchAttemptsResponseTransformer = async (
  data: any
): Promise<SearchAttemptsResponse> => {
  data = apiResponsePagedDtoQuizAttemptSchemaResponseTransformer(data);
  return data;
};

const programEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.enrollment_date) {
    data.enrollment_date = new Date(data.enrollment_date);
  }
  if (data.completion_date) {
    data.completion_date = new Date(data.completion_date);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const pagedDtoProgramEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return programEnrollmentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoProgramEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoProgramEnrollmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getProgramEnrollmentsResponseTransformer = async (
  data: any
): Promise<GetProgramEnrollmentsResponse> => {
  data = apiResponsePagedDtoProgramEnrollmentSchemaResponseTransformer(data);
  return data;
};

export const getRequiredCoursesResponseTransformer = async (
  data: any
): Promise<GetRequiredCoursesResponse> => {
  data = apiResponseListCourseSchemaResponseTransformer(data);
  return data;
};

export const getOptionalCoursesResponseTransformer = async (
  data: any
): Promise<GetOptionalCoursesResponse> => {
  data = apiResponseListCourseSchemaResponseTransformer(data);
  return data;
};

export const getProgramCertificatesResponseTransformer = async (
  data: any
): Promise<GetProgramCertificatesResponse> => {
  data = apiResponsePagedDtoCertificateSchemaResponseTransformer(data);
  return data;
};

export const searchProgramRequirementsResponseTransformer = async (
  data: any
): Promise<SearchProgramRequirementsResponse> => {
  data = apiResponsePagedDtoProgramRequirementSchemaResponseTransformer(data);
  return data;
};

export const searchProgramEnrollmentsResponseTransformer = async (
  data: any
): Promise<SearchProgramEnrollmentsResponse> => {
  data = apiResponsePagedDtoProgramEnrollmentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoProgramCourseSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return programCourseSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoProgramCourseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoProgramCourseSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchProgramCoursesResponseTransformer = async (
  data: any
): Promise<SearchProgramCoursesResponse> => {
  data = apiResponsePagedDtoProgramCourseSchemaResponseTransformer(data);
  return data;
};

export const getUsersByOrganisationResponseTransformer = async (
  data: any
): Promise<GetUsersByOrganisationResponse> => {
  data = apiResponsePagedDtoUserSchemaResponseTransformer(data);
  return data;
};

const apiResponseListUserSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return userSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getUsersByOrganisationAndDomainResponseTransformer = async (
  data: any
): Promise<GetUsersByOrganisationAndDomainResponse> => {
  data = apiResponseListUserSchemaResponseTransformer(data);
  return data;
};

export const getBranchUsersResponseTransformer = async (
  data: any
): Promise<GetBranchUsersResponse> => {
  data = apiResponseListUserSchemaResponseTransformer(data);
  return data;
};

export const getBranchUsersByDomainResponseTransformer = async (
  data: any
): Promise<GetBranchUsersByDomainResponse> => {
  data = apiResponseListUserSchemaResponseTransformer(data);
  return data;
};

export const search2ResponseTransformer = async (data: any): Promise<Search2Response> => {
  data = apiResponsePagedDtoOrganisationSchemaResponseTransformer(data);
  return data;
};

export const getInvitationByTokenResponseTransformer = async (
  data: any
): Promise<GetInvitationByTokenResponse> => {
  data = apiResponseInvitationSchemaResponseTransformer(data);
  return data;
};

export const getPendingInvitationsForEmailResponseTransformer = async (
  data: any
): Promise<GetPendingInvitationsForEmailResponse> => {
  data = apiResponseListInvitationSchemaResponseTransformer(data);
  return data;
};

export const searchSkillsResponseTransformer = async (data: any): Promise<SearchSkillsResponse> => {
  data = apiResponsePagedDtoInstructorSkillSchemaResponseTransformer(data);
  return data;
};

export const searchInstructorsResponseTransformer = async (
  data: any
): Promise<SearchInstructorsResponse> => {
  data = pageSchemaResponseTransformer(data);
  return data;
};

export const searchMembershipsResponseTransformer = async (
  data: any
): Promise<SearchMembershipsResponse> => {
  data = apiResponsePagedDtoInstructorProfessionalMembershipSchemaResponseTransformer(data);
  return data;
};

export const searchExperienceResponseTransformer = async (
  data: any
): Promise<SearchExperienceResponse> => {
  data = apiResponsePagedDtoInstructorExperienceSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorEducationSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorEducationSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorEducationSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorEducationSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchEducationResponseTransformer = async (
  data: any
): Promise<SearchEducationResponse> => {
  data = apiResponsePagedDtoInstructorEducationSchemaResponseTransformer(data);
  return data;
};

const pagedDtoInstructorDocumentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return instructorDocumentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoInstructorDocumentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoInstructorDocumentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchDocumentsResponseTransformer = async (
  data: any
): Promise<SearchDocumentsResponse> => {
  data = apiResponsePagedDtoInstructorDocumentSchemaResponseTransformer(data);
  return data;
};

const courseEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.enrollment_date) {
    data.enrollment_date = new Date(data.enrollment_date);
  }
  if (data.completion_date) {
    data.completion_date = new Date(data.completion_date);
  }
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const pagedDtoCourseEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return courseEnrollmentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCourseEnrollmentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCourseEnrollmentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const getCourseEnrollmentsResponseTransformer = async (
  data: any
): Promise<GetCourseEnrollmentsResponse> => {
  data = apiResponsePagedDtoCourseEnrollmentSchemaResponseTransformer(data);
  return data;
};

const courseCategoryMappingSchemaResponseTransformer = (data: any) => {
  if (data.created_date) {
    data.created_date = new Date(data.created_date);
  }
  if (data.updated_date) {
    data.updated_date = new Date(data.updated_date);
  }
  return data;
};

const apiResponseListCourseCategoryMappingSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return courseCategoryMappingSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getCourseCategoriesResponseTransformer = async (
  data: any
): Promise<GetCourseCategoriesResponse> => {
  data = apiResponseListCourseCategoryMappingSchemaResponseTransformer(data);
  return data;
};

export const searchCoursesResponseTransformer = async (
  data: any
): Promise<SearchCoursesResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

export const searchRequirementsResponseTransformer = async (
  data: any
): Promise<SearchRequirementsResponse> => {
  data = apiResponsePagedDtoCourseRequirementSchemaResponseTransformer(data);
  return data;
};

export const getPublishedCoursesResponseTransformer = async (
  data: any
): Promise<GetPublishedCoursesResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

export const searchLessonsResponseTransformer = async (
  data: any
): Promise<SearchLessonsResponse> => {
  data = apiResponsePagedDtoLessonSchemaResponseTransformer(data);
  return data;
};

export const getCoursesByInstructorResponseTransformer = async (
  data: any
): Promise<GetCoursesByInstructorResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

export const searchEnrollmentsResponseTransformer = async (
  data: any
): Promise<SearchEnrollmentsResponse> => {
  data = apiResponsePagedDtoCourseEnrollmentSchemaResponseTransformer(data);
  return data;
};

const pagedDtoLessonContentSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return lessonContentSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoLessonContentSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoLessonContentSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchLessonContentResponseTransformer = async (
  data: any
): Promise<SearchLessonContentResponse> => {
  data = apiResponsePagedDtoLessonContentSchemaResponseTransformer(data);
  return data;
};

export const getCoursesByCategoryResponseTransformer = async (
  data: any
): Promise<GetCoursesByCategoryResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

const pagedDtoCourseCategoryMappingSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return courseCategoryMappingSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoCourseCategoryMappingSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoCourseCategoryMappingSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchCategoryMappingsResponseTransformer = async (
  data: any
): Promise<SearchCategoryMappingsResponse> => {
  data = apiResponsePagedDtoCourseCategoryMappingSchemaResponseTransformer(data);
  return data;
};

export const searchAssessmentsResponseTransformer = async (
  data: any
): Promise<SearchAssessmentsResponse> => {
  data = apiResponsePagedDtoCourseAssessmentSchemaResponseTransformer(data);
  return data;
};

export const getActiveCoursesResponseTransformer = async (
  data: any
): Promise<GetActiveCoursesResponse> => {
  data = apiResponsePagedDtoCourseSchemaResponseTransformer(data);
  return data;
};

export const searchContentTypesResponseTransformer = async (
  data: any
): Promise<SearchContentTypesResponse> => {
  data = apiResponsePagedDtoContentTypeSchemaResponseTransformer(data);
  return data;
};

const apiResponseListContentTypeSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return contentTypeSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getMediaContentTypesResponseTransformer = async (
  data: any
): Promise<GetMediaContentTypesResponse> => {
  data = apiResponseListContentTypeSchemaResponseTransformer(data);
  return data;
};

const apiResponseListCategorySchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return categorySchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getSubCategoriesResponseTransformer = async (
  data: any
): Promise<GetSubCategoriesResponse> => {
  data = apiResponseListCategorySchemaResponseTransformer(data);
  return data;
};

export const searchCategoriesResponseTransformer = async (
  data: any
): Promise<SearchCategoriesResponse> => {
  data = apiResponsePagedDtoCategorySchemaResponseTransformer(data);
  return data;
};

export const getRootCategoriesResponseTransformer = async (
  data: any
): Promise<GetRootCategoriesResponse> => {
  data = apiResponseListCategorySchemaResponseTransformer(data);
  return data;
};

export const searchCertificateTemplatesResponseTransformer = async (
  data: any
): Promise<SearchCertificateTemplatesResponse> => {
  data = apiResponsePagedDtoCertificateTemplateSchemaResponseTransformer(data);
  return data;
};

const apiResponseListCertificateSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return certificateSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getStudentCertificatesResponseTransformer = async (
  data: any
): Promise<GetStudentCertificatesResponse> => {
  data = apiResponseListCertificateSchemaResponseTransformer(data);
  return data;
};

export const getDownloadableCertificatesResponseTransformer = async (
  data: any
): Promise<GetDownloadableCertificatesResponse> => {
  data = apiResponseListCertificateSchemaResponseTransformer(data);
  return data;
};

export const searchCertificatesResponseTransformer = async (
  data: any
): Promise<SearchCertificatesResponse> => {
  data = apiResponsePagedDtoCertificateSchemaResponseTransformer(data);
  return data;
};

export const getRevokedCertificatesResponseTransformer = async (
  data: any
): Promise<GetRevokedCertificatesResponse> => {
  data = apiResponseListCertificateSchemaResponseTransformer(data);
  return data;
};

export const getProgramCertificates1ResponseTransformer = async (
  data: any
): Promise<GetProgramCertificates1Response> => {
  data = apiResponseListCertificateSchemaResponseTransformer(data);
  return data;
};

export const getCertificateByNumberResponseTransformer = async (
  data: any
): Promise<GetCertificateByNumberResponse> => {
  data = apiResponseCertificateSchemaResponseTransformer(data);
  return data;
};

export const getCourseCertificatesResponseTransformer = async (
  data: any
): Promise<GetCourseCertificatesResponse> => {
  data = apiResponseListCertificateSchemaResponseTransformer(data);
  return data;
};

const apiResponseListAssignmentSubmissionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return assignmentSubmissionSchemaResponseTransformer(item);
    });
  }
  return data;
};

export const getAssignmentSubmissionsResponseTransformer = async (
  data: any
): Promise<GetAssignmentSubmissionsResponse> => {
  data = apiResponseListAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

export const getHighPerformanceSubmissionsResponseTransformer = async (
  data: any
): Promise<GetHighPerformanceSubmissionsResponse> => {
  data = apiResponseListAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

const pagedDtoAssignmentSubmissionSchemaResponseTransformer = (data: any) => {
  if (data.content) {
    data.content = data.content.map((item: any) => {
      return assignmentSubmissionSchemaResponseTransformer(item);
    });
  }
  if (data.metadata) {
    data.metadata = pageMetadataSchemaResponseTransformer(data.metadata);
  }
  return data;
};

const apiResponsePagedDtoAssignmentSubmissionSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = pagedDtoAssignmentSubmissionSchemaResponseTransformer(data.data);
  }
  return data;
};

export const searchSubmissionsResponseTransformer = async (
  data: any
): Promise<SearchSubmissionsResponse> => {
  data = apiResponsePagedDtoAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};

export const searchAssignmentsResponseTransformer = async (
  data: any
): Promise<SearchAssignmentsResponse> => {
  data = apiResponsePagedDtoAssignmentSchemaResponseTransformer(data);
  return data;
};

export const getPendingGradingResponseTransformer = async (
  data: any
): Promise<GetPendingGradingResponse> => {
  data = apiResponseListAssignmentSubmissionSchemaResponseTransformer(data);
  return data;
};
