// This file is auto-generated by @hey-api/openapi-ts

export type ResponseDtoVoid = {
  data?: {
    [key: string]: unknown;
  };
  status?: number;
  message?: string;
  errors?: {
    [key: string]: string;
  };
  timestamp?: Date;
};

/**
 * Complete user profile information including personal details, authentication, and organizational data
 */
export type User = {
  /**
   * **[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.
   */
  first_name: string;
  /**
   * **[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.
   */
  middle_name?: string;
  /**
   * **[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.
   */
  last_name: string;
  /**
   * **[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.
   */
  email: string;
  /**
   * **[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.
   */
  username: string;
  /**
   * **[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.
   */
  dob: Date;
  /**
   * **[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.
   */
  phone_number: string;
  /**
   * **[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.
   */
  active: boolean;
  /**
   * **[OPTIONAL]** Keycloak user identifier for authentication integration. Links the user to their Keycloak identity for SSO functionality.
   */
  keycloak_id?: string;
  gender?: GenderEnum;
  user_domain?: Array<ItemsEnum>;
  /**
   * **[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.
   */
  readonly profile_image_url?: string;
  /**
   * **[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Identifier of the user who created this account. Automatically set by the system for audit purposes.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Identifier of the user who last updated this account. Automatically set by the system for audit purposes.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** User's display name for UI purposes, consisting of first name and last name only (excludes middle name). Automatically computed from name components.
   */
  readonly display_name?: string;
  /**
   * **[READ-ONLY]** User's complete full name including first, middle (if present), and last names concatenated together. Automatically computed from individual name components.
   */
  readonly full_name?: string;
};

export type ApiResponseUser = {
  success?: boolean;
  data?: User;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Training branch information including location details and point of contact
 */
export type TrainingBranch = {
  /**
   * **[READ-ONLY]** Unique system identifier for the training branch. Auto-generated by the system and cannot be modified.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** UUID of the parent organisation this branch belongs to.
   */
  organisation_uuid: string;
  /**
   * **[REQUIRED]** Name of the training branch or location. Must not be blank.
   */
  branch_name: string;
  /**
   * **[OPTIONAL]** Physical address of the training branch.
   */
  address?: string;
  /**
   * **[OPTIONAL]** UUID of the user who serves as point of contact for this branch.
   */
  poc_user_uuid?: string;
  /**
   * **[REQUIRED]** Indicates whether the training branch is active and operational.
   */
  active: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the training branch was first created. Automatically set by the system and cannot be modified.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Timestamp when the training branch was last updated. Automatically updated by the system on any changes and cannot be directly modified.
   */
  readonly updated_date?: Date;
};

export type ApiResponseTrainingBranch = {
  success?: boolean;
  data?: TrainingBranch;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Student profile information including guardian contacts and academic details. Links to a base user account.
 */
export type Student = {
  /**
   * **[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.
   */
  user_uuid: string;
  /**
   * **[OPTIONAL]** Full name of the primary guardian/parent. This is the main emergency contact for the student.
   */
  first_guardian_name?: string;
  /**
   * **[OPTIONAL]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.
   */
  first_guardian_mobile?: string;
  /**
   * **[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.
   */
  second_guardian_name?: string;
  /**
   * **[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.
   */
  second_guardian_mobile?: string;
  secondaryGuardianContact?: string;
  primaryGuardianContact?: string;
  allGuardianContacts?: Array<string>;
  /**
   * **[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.
   */
  readonly updated_by?: string;
};

/**
 * Quiz assessment with configurable questions, timing, and scoring
 */
export type Quiz = {
  /**
   * **[READ-ONLY]** Unique system identifier for the quiz. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the lesson UUID that contains this quiz.
   */
  lesson_uuid: string;
  /**
   * **[REQUIRED]** Quiz title that clearly describes the assessment content.
   */
  title: string;
  /**
   * **[OPTIONAL]** Detailed description of the quiz purpose and content coverage.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Instructions for students on how to complete the quiz.
   */
  instructions?: string;
  /**
   * **[OPTIONAL]** Time limit for completing the quiz in minutes. Null means no time limit.
   */
  time_limit_minutes?: number;
  /**
   * **[REQUIRED]** Number of attempts allowed for this quiz. Set to 1 for single attempt.
   */
  attempts_allowed: number;
  /**
   * **[REQUIRED]** Minimum score percentage required to pass the quiz.
   */
  passing_score: number;
  /**
   * **[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.
   */
  rubric_uuid?: string;
  status: StatusEnum;
  /**
   * **[OPTIONAL]** Indicates if the quiz is actively available to students. Can only be true for published quizzes.
   */
  active?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the quiz was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this quiz. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the quiz was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this quiz. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the quiz is published and accessible to students.
   */
  readonly is_published?: boolean;
  /**
   * **[READ-ONLY]** Human-readable format of quiz time limit.
   */
  readonly time_limit_display?: string;
  /**
   * **[READ-ONLY]** Indicates if the quiz has a time limit.
   */
  readonly is_timed?: boolean;
  /**
   * **[READ-ONLY]** Indicates if students can take the quiz multiple times.
   */
  readonly has_multiple_attempts?: boolean;
};

export type ApiResponseQuiz = {
  success?: boolean;
  data?: Quiz;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Individual question within a quiz supporting multiple question types
 */
export type QuizQuestion = {
  /**
   * **[READ-ONLY]** Unique system identifier for the quiz question. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the quiz UUID that contains this question.
   */
  quiz_uuid: string;
  /**
   * **[REQUIRED]** The actual question text that students will see and answer.
   */
  question_text: string;
  question_type: QuestionTypeEnum;
  /**
   * **[REQUIRED]** Point value for this question when answered correctly.
   */
  points: number;
  /**
   * **[REQUIRED]** Display order of the question within the quiz for sequential presentation.
   */
  display_order: number;
  /**
   * **[READ-ONLY]** Timestamp when the question was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this question. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the question was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this question. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if this question type requires predefined answer options.
   */
  readonly requires_options?: boolean;
  /**
   * **[READ-ONLY]** Human-readable category of the question type.
   */
  readonly question_category?: string;
  /**
   * **[READ-ONLY]** Human-readable format of the points value.
   */
  readonly points_display?: string;
  /**
   * **[READ-ONLY]** Formatted question number for display in quiz interface.
   */
  readonly question_number?: string;
};

export type ApiResponseQuizQuestion = {
  success?: boolean;
  data?: QuizQuestion;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Individual answer option for quiz questions with correctness and ordering information
 */
export type QuizQuestionOption = {
  /**
   * **[READ-ONLY]** Unique system identifier for the quiz question option. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the quiz question UUID this option belongs to.
   */
  question_uuid: string;
  /**
   * **[REQUIRED]** Text content of the answer option displayed to students.
   */
  option_text: string;
  /**
   * **[OPTIONAL]** Indicates if this option is the correct answer for the question.
   */
  is_correct?: boolean;
  /**
   * **[OPTIONAL]** Display order of this option within the question's answer choices.
   */
  display_order?: number;
  /**
   * **[READ-ONLY]** Timestamp when the option was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this option. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the option was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this option. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Formatted category of the option based on its correctness status.
   */
  readonly option_category?: string;
  /**
   * **[READ-ONLY]** Indicates if this option is an incorrect answer choice.
   */
  readonly is_incorrect?: boolean;
  /**
   * **[READ-ONLY]** Formatted display of the option's position within the question.
   */
  readonly position_display?: string;
  /**
   * **[READ-ONLY]** Status description indicating whether this option is correct or incorrect.
   */
  readonly correctness_status?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the option including correctness and position.
   */
  readonly option_summary?: string;
};

export type ApiResponseQuizQuestionOption = {
  success?: boolean;
  data?: QuizQuestionOption;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Program requirement with type classification and mandatory status
 */
export type ProgramRequirement = {
  /**
   * **[READ-ONLY]** Unique system identifier for the program requirement. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the program UUID this requirement applies to.
   */
  program_uuid: string;
  requirement_type: RequirementTypeEnum;
  /**
   * **[REQUIRED]** Detailed text describing the specific requirement and its criteria.
   */
  requirement_text: string;
  /**
   * **[OPTIONAL]** Indicates if this requirement is mandatory for program completion.
   */
  is_mandatory?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the requirement is optional (not mandatory).
   */
  readonly is_optional?: boolean;
  /**
   * **[READ-ONLY]** Priority level of the requirement based on type and mandatory status.
   */
  readonly requirement_priority?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the requirement including type and compliance level.
   */
  readonly requirement_summary?: string;
  /**
   * **[READ-ONLY]** Formatted category of the requirement based on type and mandatory status.
   */
  readonly requirement_category?: string;
  /**
   * **[READ-ONLY]** Compliance level indicating how strictly the requirement must be followed.
   */
  readonly compliance_level?: string;
};

export type ApiResponseProgramRequirement = {
  success?: boolean;
  data?: ProgramRequirement;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Association between programs and courses with sequencing and requirement information
 */
export type ProgramCourse = {
  /**
   * **[READ-ONLY]** Unique system identifier for the program-course association. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the program UUID that contains this course.
   */
  program_uuid: string;
  /**
   * **[REQUIRED]** Reference to the course UUID that is part of this program.
   */
  course_uuid: string;
  /**
   * **[OPTIONAL]** Sequential order of this course within the program curriculum.
   */
  sequence_order?: number;
  /**
   * **[OPTIONAL]** Indicates if this course is required for program completion.
   */
  is_required?: boolean;
  /**
   * **[OPTIONAL]** Reference to the prerequisite course UUID that must be completed before this course.
   */
  prerequisite_course_uuid?: string;
  /**
   * **[READ-ONLY]** Timestamp when the program-course association was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this association. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the association was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this association. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if this course has prerequisite requirements.
   */
  readonly has_prerequisites?: boolean;
  /**
   * **[READ-ONLY]** Formatted category of the course association based on requirement status.
   */
  readonly association_category?: string;
  /**
   * **[READ-ONLY]** Formatted display of the course position within the program sequence.
   */
  readonly sequence_display?: string;
  /**
   * **[READ-ONLY]** Requirement status of the course within the program.
   */
  readonly requirement_status?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the course's role within the program curriculum.
   */
  readonly curriculum_summary?: string;
};

export type ApiResponseProgramCourse = {
  success?: boolean;
  data?: ProgramCourse;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Complete organisation profile information including basic details, configuration, and metadata
 */
export type Organisation = {
  /**
   * **[READ-ONLY]** Unique system identifier for the organisation. Auto-generated by the system and cannot be modified.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Organisation's official name. Used for display purposes and official documentation. Must not be blank.
   */
  name: string;
  /**
   * **[OPTIONAL]** Detailed description of the organisation. Provides additional context about the organisation's purpose and activities.
   */
  description?: string;
  /**
   * **[REQUIRED]** Indicates whether the organisation is active and can access the system. Inactive organisations cannot perform any operations.
   */
  active: boolean;
  /**
   * **[OPTIONAL]** Short code or abbreviation for the organisation. Used for quick identification and referencing.
   */
  code?: string;
  /**
   * **[OPTIONAL]** Official licence number or registration number for the organisation. Used for regulatory compliance and verification.
   */
  licence_no?: string;
  /**
   * **[OPTIONAL]** Organisation's domain name. Used for email validation and system integration.
   */
  domain?: string;
  /**
   * **[OPTIONAL]** Reference to the primary contact user for this organisation.
   */
  user_uuid?: string;
  /**
   * **[OPTIONAL]** Physical location or address of the organisation.
   */
  location?: string;
  /**
   * **[OPTIONAL]** Country where the organisation is located.
   */
  country?: string;
  /**
   * **[READ-ONLY]** Timestamp when the organisation was first created. Automatically set by the system and cannot be modified.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Timestamp when the organisation was last updated. Automatically updated by the system on any changes and cannot be directly modified.
   */
  readonly updated_date?: Date;
};

export type ApiResponseOrganisation = {
  success?: boolean;
  data?: Organisation;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseVoid = {
  success?: boolean;
  data?: {
    [key: string]: unknown;
  };
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Instructor profile including location data for educational service delivery
 */
export type Instructor = {
  /**
   * **[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.
   */
  user_uuid: string;
  /**
   * **[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  latitude?: number;
  /**
   * **[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.
   */
  longitude?: number;
  /**
   * **[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.
   */
  website?: string;
  /**
   * **[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.
   */
  bio?: string;
  /**
   * **[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.
   */
  professional_headline?: string;
  /**
   * **[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.
   */
  readonly full_name?: string;
  /**
   * **[READ-ONLY]** Indicates whether the instructor has been verified by an administrator. True if verified, false if not verified, null if verification status is unknown or pending.
   */
  readonly admin_verified?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the instructor has both latitude and longitude coordinates configured.
   */
  readonly has_location_coordinates?: boolean;
  /**
   * **[READ-ONLY]** Formatted location coordinates as a string. Returns null if location coordinates are not available.
   */
  readonly formatted_location?: string;
  /**
   * **[READ-ONLY]** Indicates if the instructor profile is considered complete. Requires bio and professional headline.
   */
  readonly is_profile_complete?: boolean;
};

/**
 * Technical and professional skill record for instructors with proficiency levels and competency classifications
 */
export type InstructorSkill = {
  /**
   * **[READ-ONLY]** Unique system identifier for the skill record. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the instructor profile UUID. Links skill record to specific instructor.
   */
  instructor_uuid: string;
  /**
   * **[REQUIRED]** Name of the technical or professional skill. Should be specific and standardized for consistency.
   */
  skill_name: string;
  proficiency_level: ProficiencyLevelEnum;
  /**
   * **[READ-ONLY]** Timestamp when the skill record was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this skill record.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the skill record was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this skill record.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Formatted skill name for display in UI components.
   */
  readonly display_name?: string;
  /**
   * **[READ-ONLY]** Brief summary of the skill for display in skill lists.
   */
  readonly summary?: string;
  /**
   * **[READ-ONLY]** Human-readable description of the proficiency level.
   */
  readonly proficiency_description?: string;
};

export type ApiResponseInstructorSkill = {
  success?: boolean;
  data?: InstructorSkill;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Professional membership record for instructors including associations, industry bodies, and certification organizations
 */
export type InstructorProfessionalMembership = {
  /**
   * **[READ-ONLY]** Unique system identifier for the membership record. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the instructor profile UUID. Links membership record to specific instructor.
   */
  instructor_uuid: string;
  /**
   * **[REQUIRED]** Full name of the professional organization, association, or certification body.
   */
  organization_name: string;
  /**
   * **[OPTIONAL]** Official membership number or identifier issued by the organization.
   */
  membership_number?: string;
  /**
   * **[OPTIONAL]** Date when the membership began or was first obtained.
   */
  start_date?: Date;
  /**
   * **[OPTIONAL]** Date when the membership ended or expired. Should be null for active memberships.
   */
  end_date?: Date;
  /**
   * **[OPTIONAL]** Indicates whether the membership is currently active. True for active memberships, false for inactive or expired.
   */
  is_active?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the membership record was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this membership record.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the membership record was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this membership record.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the membership is currently valid and active.
   */
  readonly is_valid?: boolean;
  /**
   * **[READ-ONLY]** Brief summary of the membership for display in listings.
   */
  readonly summary?: string;
  /**
   * **[READ-ONLY]** Human-readable formatted duration of membership.
   */
  readonly formatted_duration?: string;
  membership_status?: MembershipStatusEnum;
  /**
   * **[READ-ONLY]** Formatted membership period showing start and end dates.
   */
  readonly membership_period?: string;
  /**
   * **[READ-ONLY]** Indicates if this membership has been held for 5 years or more.
   */
  readonly is_long_standing_member?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the membership has a membership number documented.
   */
  readonly has_membership_number?: boolean;
  organization_type?: OrganizationTypeEnum;
  /**
   * **[READ-ONLY]** Years of membership calculated with decimal precision.
   */
  readonly years_of_membership?: number;
  /**
   * **[READ-ONLY]** Indicates if this membership was started within the last 3 years.
   */
  readonly is_recent_membership?: boolean;
  /**
   * **[READ-ONLY]** Duration of membership calculated from start and end dates, in months.
   */
  readonly membership_duration_months?: number;
  /**
   * **[READ-ONLY]** Indicates if the membership record has all essential information.
   */
  readonly is_complete?: boolean;
};

export type ApiResponseInstructorProfessionalMembership = {
  success?: boolean;
  data?: InstructorProfessionalMembership;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Professional work experience record for instructors including positions, organizations, responsibilities, and employment duration
 */
export type InstructorExperience = {
  /**
   * **[READ-ONLY]** Unique system identifier for the experience record. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the instructor profile UUID. Links experience record to specific instructor.
   */
  instructor_uuid: string;
  /**
   * **[REQUIRED]** Job title or position held by the instructor in this role.
   */
  position: string;
  /**
   * **[REQUIRED]** Name of the organization, company, or institution where the instructor worked.
   */
  organization_name: string;
  /**
   * **[OPTIONAL]** Detailed description of key responsibilities, achievements, and duties performed in this position.
   */
  responsibilities?: string;
  /**
   * **[OPTIONAL]** Total years of experience in this position, including fractional years for more precise representation.
   */
  years_of_experience?: number;
  /**
   * **[OPTIONAL]** Date when employment in this position began.
   */
  start_date?: Date;
  /**
   * **[OPTIONAL]** Date when employment in this position ended. Should be null for current positions.
   */
  end_date?: Date;
  /**
   * **[OPTIONAL]** Indicates whether this is the instructor's current position. True for ongoing employment.
   */
  is_current_position?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the experience record was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this experience record.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the experience record was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this experience record.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Brief summary of the experience for display in listings.
   */
  readonly summary?: string;
  /**
   * **[READ-ONLY]** Duration of employment calculated from start and end dates, in months.
   */
  readonly duration_in_months?: number;
  /**
   * **[READ-ONLY]** Human-readable formatted duration of employment.
   */
  readonly formatted_duration?: string;
  /**
   * **[READ-ONLY]** Formatted employment period showing start and end dates.
   */
  readonly employment_period?: string;
  /**
   * **[READ-ONLY]** Indicates if this position was held for 2 years or more.
   */
  readonly is_long_term_position?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the position has responsibilities documented.
   */
  readonly has_responsibilities?: boolean;
  experience_level?: ExperienceLevelEnum;
  /**
   * **[READ-ONLY]** Indicates if this experience is recent (within the last 5 years).
   */
  readonly is_recent_experience?: boolean;
  /**
   * **[READ-ONLY]** Calculated years of experience based on start and end dates.
   */
  readonly calculated_years?: number;
  /**
   * **[READ-ONLY]** Indicates if the experience record has all essential information.
   */
  readonly is_complete?: boolean;
};

export type ApiResponseInstructorExperience = {
  success?: boolean;
  data?: InstructorExperience;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Educational qualification record for instructors including degrees, diplomas, certificates, and academic credentials
 */
export type InstructorEducation = {
  /**
   * **[READ-ONLY]** Unique system identifier for the education record. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the instructor profile UUID. Links education record to specific instructor.
   */
  instructor_uuid: string;
  /**
   * **[REQUIRED]** Name or title of the academic qualification, degree, diploma, or certificate obtained.
   */
  qualification: string;
  /**
   * **[REQUIRED]** Full name of the educational institution, university, college, or training organization.
   */
  school_name: string;
  /**
   * **[OPTIONAL]** Year when the qualification was completed or awarded. Must be a valid year not in the future.
   */
  year_completed?: number;
  /**
   * **[OPTIONAL]** Official certificate, diploma, or degree number issued by the educational institution.
   */
  certificate_number?: string;
  /**
   * **[READ-ONLY]** Timestamp when the education record was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this education record.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the education record was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this education record.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Complete description combining qualification, school, and year.
   */
  readonly full_description?: string;
  /**
   * **[READ-ONLY]** Indicates if this qualification was completed within the last 10 years.
   */
  readonly is_recent_qualification?: boolean;
  /**
   * **[READ-ONLY]** Number of years since the qualification was completed.
   */
  readonly years_since_completion?: number;
  education_level?: EducationLevelEnum;
  /**
   * **[READ-ONLY]** Indicates if the education record has a certificate number provided.
   */
  readonly has_certificate_number?: boolean;
  /**
   * **[READ-ONLY]** Formatted string showing year of completion and school name.
   */
  readonly formatted_completion?: string;
  /**
   * **[READ-ONLY]** Indicates if the education record has all essential information.
   */
  readonly is_complete?: boolean;
};

export type ApiResponseInstructorEducation = {
  success?: boolean;
  data?: InstructorEducation;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Document record for instructor credential verification including educational certificates, experience documents, and professional memberships
 */
export type InstructorDocument = {
  /**
   * **[READ-ONLY]** Unique system identifier for the document record. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the instructor profile UUID. Links document to specific instructor.
   */
  instructor_uuid: string;
  /**
   * **[REQUIRED]** Reference to the document type UUID. Defines the category and validation rules for this document.
   */
  document_type_uuid: string;
  /**
   * **[OPTIONAL]** Reference to specific education record UUID if this document supports an educational qualification.
   */
  education_uuid?: string;
  /**
   * **[OPTIONAL]** Reference to specific experience record UUID if this document supports work experience.
   */
  experience_uuid?: string;
  /**
   * **[OPTIONAL]** Reference to specific membership record UUID if this document supports professional body membership.
   */
  membership_uuid?: string;
  /**
   * **[REQUIRED]** Original filename as uploaded by the user. Preserved for user reference and display purposes.
   */
  original_filename: string;
  /**
   * **[REQUIRED]** Descriptive title for the document. Used for identification and display in document lists.
   */
  title: string;
  /**
   * **[OPTIONAL]** Detailed description of the document content and its relevance to instructor qualifications.
   */
  description?: string;
  status?: StatusEnum2;
  /**
   * **[OPTIONAL]** Expiry date of the document if applicable. Used for certificates and time-limited credentials.
   */
  expiry_date?: Date;
  /**
   * **[READ-ONLY]** System-generated filename for secure storage. Used internally for file system operations.
   */
  readonly stored_filename?: string;
  /**
   * **[READ-ONLY]** Full file system path where the document is stored. Used for internal file operations.
   */
  readonly file_path?: string;
  /**
   * **[READ-ONLY]** File size in bytes. Automatically calculated during upload.
   */
  readonly file_size_bytes?: bigint;
  /**
   * **[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.
   */
  readonly mime_type?: string;
  /**
   * **[READ-ONLY]** SHA-256 hash of the file content. Used for integrity verification and duplicate detection.
   */
  readonly file_hash?: string;
  /**
   * **[READ-ONLY]** Timestamp when the document was uploaded. Automatically set by the system.
   */
  readonly upload_date?: Date;
  /**
   * **[READ-ONLY]** Verification status of the document. True if verified by admin, false if not verified, null if pending.
   */
  readonly is_verified?: boolean;
  /**
   * **[READ-ONLY]** Email or username of the administrator who verified this document.
   */
  readonly verified_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the document was verified. Set automatically when verification is completed.
   */
  readonly verified_at?: Date;
  /**
   * **[READ-ONLY]** Notes or comments from the verification process. Includes details about verification outcome.
   */
  readonly verification_notes?: string;
  /**
   * **[READ-ONLY]** Timestamp when the document record was first created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this document record.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the document record was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this document record.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the document has expired based on the expiry date.
   */
  readonly is_expired?: boolean;
  /**
   * **[READ-ONLY]** Human-readable formatted file size.
   */
  readonly file_size_formatted?: string;
  /**
   * **[READ-ONLY]** Number of days until document expiry. Returns null if no expiry date or already expired.
   */
  readonly days_until_expiry?: number;
  /**
   * **[READ-ONLY]** Indicates if the document is pending verification.
   */
  readonly is_pending_verification?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the document has an expiry date configured.
   */
  readonly has_expiry_date?: boolean;
  verification_status?: VerificationStatusEnum;
};

export type ApiResponseInstructorDocument = {
  success?: boolean;
  data?: InstructorDocument;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Complete course with metadata, content organization, and publication status supporting multiple categories
 */
export type Course = {
  /**
   * **[READ-ONLY]** Unique system identifier for the course. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Course title. Should be descriptive and engaging for potential students.
   */
  name: string;
  /**
   * **[REQUIRED]** Reference to the instructor's UUID who created and owns this course.
   */
  instructor_uuid: string;
  /**
   * **[OPTIONAL]** List of category UUIDs for organizing the course. A course can belong to multiple categories.
   */
  category_uuids?: Array<string>;
  /**
   * **[OPTIONAL]** Reference to the difficulty level UUID indicating course complexity.
   */
  difficulty_uuid?: string;
  /**
   * **[OPTIONAL]** Detailed course description explaining content, approach, and outcomes.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Learning objectives and goals students will achieve upon completion.
   */
  objectives?: string;
  /**
   * **[OPTIONAL]** Required knowledge and skills students should have before taking this course.
   */
  prerequisites?: string;
  /**
   * **[REQUIRED]** Course duration in hours.
   */
  duration_hours: number;
  /**
   * **[REQUIRED]** Additional course duration in minutes (0-59).
   */
  duration_minutes: number;
  /**
   * **[OPTIONAL]** Maximum number of students that can enroll in the course.
   */
  class_limit?: number;
  /**
   * **[OPTIONAL]** Course price in the system currency. Set to null or 0 for free courses.
   */
  price?: number;
  /**
   * **[OPTIONAL]** Minimum age requirement for course enrollment.
   */
  age_lower_limit?: number;
  /**
   * **[OPTIONAL]** Maximum age requirement for course enrollment.
   */
  age_upper_limit?: number;
  /**
   * **[OPTIONAL]** URL to course thumbnail image for course listings and previews.
   */
  thumbnail_url?: string;
  /**
   * **[OPTIONAL]** URL to course introduction video for marketing and preview purposes.
   */
  intro_video_url?: string;
  /**
   * **[OPTIONAL]** URL to course banner image for detailed course pages.
   */
  banner_url?: string;
  status: StatusEnum3;
  /**
   * **[OPTIONAL]** Indicates if the course is actively available to students. Can only be true for published courses.
   */
  active?: boolean;
  /**
   * **[READ-ONLY]** List of category names this course belongs to. Computed from category mappings.
   */
  readonly category_names?: Array<string>;
  /**
   * **[READ-ONLY]** Timestamp when the course was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this course. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the course was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this course. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the course is offered for free.
   */
  readonly is_free?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the course is published and discoverable.
   */
  readonly is_published?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the course is archived and no longer available.
   */
  readonly is_archived?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the course is currently under review.
   */
  readonly is_in_review?: boolean;
  /**
   * **[READ-ONLY]** Indicates if the course is still in draft mode.
   */
  readonly is_draft?: boolean;
  /**
   * **[READ-ONLY]** Human-readable format of total course duration.
   */
  readonly total_duration_display?: string;
  /**
   * **[READ-ONLY]** Indicates if the course belongs to multiple categories.
   */
  readonly has_multiple_categories?: boolean;
  /**
   * **[READ-ONLY]** Number of categories this course belongs to.
   */
  readonly category_count?: number;
  /**
   * **[READ-ONLY]** Human-readable description of the course's current lifecycle stage.
   */
  readonly lifecycle_stage?: string;
  /**
   * **[READ-ONLY]** Indicates if the course is currently accepting new student enrollments.
   */
  readonly accepts_new_enrollments?: boolean;
};

export type ApiResponseCourse = {
  success?: boolean;
  data?: Course;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Course prerequisites and participation requirements
 */
export type CourseRequirement = {
  /**
   * **[READ-ONLY]** Unique system identifier for the course requirement. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the course UUID that this requirement applies to.
   */
  course_uuid: string;
  requirement_type: RequirementTypeEnum;
  /**
   * **[REQUIRED]** Detailed description of the specific requirement or prerequisite.
   */
  requirement_text: string;
  /**
   * **[OPTIONAL]** Indicates if this requirement is mandatory or optional for course participation.
   */
  is_mandatory?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.
   */
  readonly updated_by?: string;
};

export type ApiResponseCourseRequirement = {
  success?: boolean;
  data?: CourseRequirement;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Individual lesson within a course containing structured learning content
 */
export type Lesson = {
  /**
   * **[READ-ONLY]** Unique system identifier for the lesson. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the parent course UUID that contains this lesson.
   */
  course_uuid: string;
  /**
   * **[REQUIRED]** Sequential number of the lesson within the course. Must be unique per course.
   */
  lesson_number: number;
  /**
   * **[REQUIRED]** Descriptive title of the lesson that clearly indicates the learning content.
   */
  title: string;
  /**
   * **[REQUIRED]** Estimated lesson duration in hours.
   */
  duration_hours: number;
  /**
   * **[REQUIRED]** Additional lesson duration in minutes (0-59).
   */
  duration_minutes: number;
  /**
   * **[OPTIONAL]** Detailed description of the lesson content and what students will learn.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Specific learning objectives and outcomes for this lesson.
   */
  learning_objectives?: string;
  status: StatusEnum;
  /**
   * **[OPTIONAL]** Indicates if the lesson is actively available to students. Can only be true for published lessons.
   */
  active?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the lesson was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this lesson. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the lesson was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this lesson. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the lesson is published and accessible to students.
   */
  readonly is_published?: boolean;
  /**
   * **[READ-ONLY]** Human-readable format of lesson duration.
   */
  readonly duration_display?: string;
  /**
   * **[READ-ONLY]** Formatted lesson sequence for display purposes.
   */
  readonly lesson_sequence?: string;
};

export type ApiResponseLesson = {
  success?: boolean;
  data?: Lesson;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Individual content item within a lesson supporting various media types
 */
export type LessonContent = {
  /**
   * **[READ-ONLY]** Unique system identifier for the lesson content. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the lesson UUID that contains this content.
   */
  lesson_uuid: string;
  /**
   * **[REQUIRED]** Reference to the content type UUID defining the format and restrictions.
   */
  content_type_uuid: string;
  /**
   * **[REQUIRED]** Descriptive title of the content item for student navigation.
   */
  title: string;
  /**
   * **[OPTIONAL]** Detailed description of the content and its learning purpose.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Text content for text-based content types. Null for file-based content.
   */
  content_text?: string;
  /**
   * **[OPTIONAL]** URL to the uploaded content file. Null for text-based content.
   */
  file_url?: string;
  /**
   * **[REQUIRED]** Display order of content within the lesson for sequential presentation.
   */
  display_order: number;
  /**
   * **[OPTIONAL]** Indicates if this content is required for lesson completion.
   */
  is_required?: boolean;
  /**
   * **[READ-ONLY]** Size of the uploaded file in bytes. Null for text content.
   */
  readonly file_size_bytes?: bigint;
  /**
   * **[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.
   */
  readonly mime_type?: string;
  /**
   * **[READ-ONLY]** Timestamp when the content was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this content. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the content was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this content. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Category of content based on its type and format.
   */
  readonly content_category?: string;
  /**
   * **[READ-ONLY]** Human-readable format of file size.
   */
  readonly file_size_display?: string;
};

export type ApiResponseLessonContent = {
  success?: boolean;
  data?: LessonContent;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Course-level assessment component with weighting for final grade calculation
 */
export type CourseAssessment = {
  /**
   * **[READ-ONLY]** Unique system identifier for the course assessment. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the course UUID that this assessment belongs to.
   */
  course_uuid: string;
  /**
   * **[REQUIRED]** Type of assessment component for categorization and processing.
   */
  assessment_type: string;
  /**
   * **[REQUIRED]** Title of the assessment component that clearly describes its purpose.
   */
  title: string;
  /**
   * **[OPTIONAL]** Detailed description of the assessment criteria and expectations.
   */
  description?: string;
  /**
   * **[REQUIRED]** Percentage weight of this assessment in the final grade calculation.
   */
  weight_percentage: number;
  /**
   * **[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.
   */
  rubric_uuid?: string;
  /**
   * **[OPTIONAL]** Indicates if this assessment is required for course completion.
   */
  is_required?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the assessment was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this assessment. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the assessment was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this assessment. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Category classification of the assessment type.
   */
  readonly assessment_category?: string;
  /**
   * **[READ-ONLY]** Human-readable format of the weight percentage.
   */
  readonly weight_display?: string;
  /**
   * **[READ-ONLY]** Indicates if this is a major assessment component.
   */
  readonly is_major_assessment?: boolean;
  /**
   * **[READ-ONLY]** Level of contribution to final grade based on weight.
   */
  readonly contribution_level?: string;
};

export type ApiResponseCourseAssessment = {
  success?: boolean;
  data?: CourseAssessment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Grading scale level with points and ordering for assessments
 */
export type GradingLevel = {
  /**
   * **[READ-ONLY]** Unique system identifier for the grading level. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Name of the grading level. Must be unique across all grading levels.
   */
  name: string;
  /**
   * **[REQUIRED]** Point value assigned to this grading level for scoring calculations.
   */
  points: number;
  /**
   * **[REQUIRED]** Numeric order defining the grade hierarchy. Lower numbers indicate higher grades.
   */
  level_order: number;
  /**
   * **[READ-ONLY]** Timestamp when the grading level was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this grading level. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the grading level was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this grading level. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Formatted display of grade level with complete information.
   */
  readonly grade_display?: string;
};

export type ApiResponseGradingLevel = {
  success?: boolean;
  data?: GradingLevel;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Course difficulty level defining learning progression stages
 */
export type DifficultyLevel = {
  /**
   * **[READ-ONLY]** Unique system identifier for the difficulty level. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Name of the difficulty level. Must be unique across all difficulty levels.
   */
  name: string;
  /**
   * **[REQUIRED]** Numeric order defining the progression sequence. Lower numbers indicate easier levels.
   */
  level_order: number;
  /**
   * **[OPTIONAL]** Detailed description of the difficulty level and target audience.
   */
  description?: string;
  /**
   * **[READ-ONLY]** Timestamp when the difficulty level was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this difficulty level. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the difficulty level was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this difficulty level. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Formatted display name including level order for UI presentation.
   */
  readonly display_name?: string;
  /**
   * **[READ-ONLY]** Indicates if this is the entry-level difficulty for beginners.
   */
  readonly is_entry_level?: boolean;
};

export type ApiResponseDifficultyLevel = {
  success?: boolean;
  data?: DifficultyLevel;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Supported content type with file format specifications and size limits
 */
export type ContentType = {
  /**
   * **[READ-ONLY]** Unique system identifier for the content type. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Name of the content type. Must be unique across all content types.
   */
  name: string;
  /**
   * **[REQUIRED]** Array of supported MIME types for this content type.
   */
  mime_types: Array<string>;
  /**
   * **[OPTIONAL]** Maximum file size allowed in megabytes. Null means no size limit.
   */
  max_file_size_mb?: number;
  /**
   * **[READ-ONLY]** Timestamp when the content type was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this content type. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the content type was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this content type. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Category for organizing uploads in the user interface.
   */
  readonly upload_category?: string;
  /**
   * **[READ-ONLY]** Indicates if this content type is for media files.
   */
  readonly is_media_type?: boolean;
  /**
   * **[READ-ONLY]** Human-readable list of supported file formats.
   */
  readonly supported_formats?: string;
  /**
   * **[READ-ONLY]** Human-readable format of maximum file size.
   */
  readonly size_limit_display?: string;
};

export type ApiResponseContentType = {
  success?: boolean;
  data?: ContentType;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Course category supporting hierarchical organization
 */
export type Category = {
  /**
   * **[READ-ONLY]** Unique system identifier for the category. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Category name. Must be unique within the same parent category.
   */
  name: string;
  /**
   * **[OPTIONAL]** Detailed description of the category and its scope.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Reference to parent category UUID for hierarchical organization. Null for root categories.
   */
  parent_uuid?: string;
  /**
   * **[OPTIONAL]** Indicates if the category is active and available for course assignment.
   */
  is_active?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the category was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this category. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the category was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this category. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if this is a root category with no parent.
   */
  readonly is_root_category?: boolean;
  /**
   * **[READ-ONLY]** Hierarchical path showing category position in the tree structure.
   */
  readonly category_path?: string;
};

export type ApiResponseCategory = {
  success?: boolean;
  data?: Category;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Issued certificate documenting course or program completion
 */
export type Certificate = {
  /**
   * **[READ-ONLY]** Unique system identifier for the certificate. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the student UUID who earned this certificate.
   */
  student_uuid: string;
  /**
   * **[OPTIONAL]** Reference to the course UUID if this is a course completion certificate. Mutually exclusive with program_uuid.
   */
  course_uuid?: string;
  /**
   * **[OPTIONAL]** Reference to the program UUID if this is a program completion certificate. Mutually exclusive with course_uuid.
   */
  program_uuid?: string;
  /**
   * **[REQUIRED]** Reference to the certificate template UUID used for generating this certificate.
   */
  template_uuid: string;
  /**
   * **[REQUIRED]** Date when the course or program was completed by the student.
   */
  completion_date: Date;
  /**
   * **[OPTIONAL]** Final grade percentage achieved by the student.
   */
  final_grade?: number;
  /**
   * **[OPTIONAL]** Indicates if the certificate is valid and has not been revoked.
   */
  is_valid?: boolean;
  /**
   * **[READ-ONLY]** Unique certificate number for verification and reference purposes.
   */
  readonly certificate_number?: string;
  /**
   * **[READ-ONLY]** Timestamp when the certificate was issued. Automatically set by the system.
   */
  readonly issued_date?: Date;
  /**
   * **[READ-ONLY]** URL to the generated certificate PDF file for download.
   */
  readonly certificate_url?: string;
  /**
   * **[READ-ONLY]** Timestamp when the certificate was revoked, if applicable.
   */
  readonly revoked_at?: Date;
  /**
   * **[READ-ONLY]** Reason for certificate revocation, if applicable.
   */
  readonly revoked_reason?: string;
  /**
   * **[READ-ONLY]** Timestamp when the certificate record was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this certificate. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the certificate was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this certificate. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Type of certificate based on completion achievement.
   */
  readonly certificate_type?: string;
  /**
   * **[READ-ONLY]** Indicates if the certificate can be downloaded by the student.
   */
  readonly is_downloadable?: boolean;
  /**
   * **[READ-ONLY]** Letter grade representation of the final grade.
   */
  readonly grade_letter?: string;
  /**
   * **[READ-ONLY]** Current validity status of the certificate.
   */
  readonly validity_status?: string;
};

export type ApiResponseCertificate = {
  success?: boolean;
  data?: Certificate;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Certificate template with design elements and layout configuration
 */
export type CertificateTemplate = {
  /**
   * **[READ-ONLY]** Unique system identifier for the certificate template. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Name of the certificate template that clearly describes its purpose.
   */
  name: string;
  template_type: TemplateTypeEnum;
  /**
   * **[OPTIONAL]** HTML content defining the certificate layout and structure.
   */
  template_html?: string;
  /**
   * **[OPTIONAL]** CSS styles for the certificate template design.
   */
  template_css?: string;
  /**
   * **[OPTIONAL]** URL to the background image for the certificate.
   */
  background_image_url?: string;
  /**
   * **[OPTIONAL]** Indicates if the template is actively available for use. Can only be true for published templates.
   */
  active?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the template was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this template. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the template was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this template. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Assessment of the template's design complexity based on HTML and CSS content.
   */
  readonly design_complexity?: string;
};

export type ApiResponseCertificateTemplate = {
  success?: boolean;
  data?: CertificateTemplate;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Assignment with learning activities and assessment criteria
 */
export type Assignment = {
  /**
   * **[READ-ONLY]** Unique system identifier for the assignment. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the lesson UUID this assignment belongs to.
   */
  lesson_uuid: string;
  /**
   * **[REQUIRED]** Title of the assignment that clearly describes its purpose.
   */
  title: string;
  /**
   * **[OPTIONAL]** Detailed description of the assignment's objectives and scope.
   */
  description?: string;
  /**
   * **[OPTIONAL]** Detailed instructions for completing the assignment.
   */
  instructions?: string;
  /**
   * **[OPTIONAL]** Due date and time for assignment submission.
   */
  due_date?: Date;
  /**
   * **[OPTIONAL]** Maximum points that can be earned for this assignment.
   */
  max_points?: number;
  /**
   * **[OPTIONAL]** Reference to the rubric UUID used for grading this assignment.
   */
  rubric_uuid?: string;
  /**
   * **[OPTIONAL]** Array of accepted submission types for this assignment.
   */
  submission_types?: Array<string>;
  /**
   * **[OPTIONAL]** Indicates if the assignment is actively available for students. Can only be true for published assignments.
   */
  is_published?: boolean;
  /**
   * **[READ-ONLY]** Timestamp when the assignment was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this assignment. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the assignment was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this assignment. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Formatted category of the assignment based on its characteristics.
   */
  readonly assignment_category?: string;
  /**
   * **[READ-ONLY]** Formatted display of the maximum points for this assignment.
   */
  readonly points_display?: string;
  /**
   * **[READ-ONLY]** Scope of the assignment - lesson-specific or standalone.
   */
  readonly assignment_scope?: string;
  /**
   * **[READ-ONLY]** Summary of accepted submission types for this assignment.
   */
  readonly submission_summary?: string;
};

export type ApiResponseAssignment = {
  success?: boolean;
  data?: Assignment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseStudent = {
  success?: boolean;
  data?: Student;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseString = {
  success?: boolean;
  data?: string;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseInvitation = {
  success?: boolean;
  data?: Invitation;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Complete invitation information including recipient details, organization/branch assignment, invitation status, and lifecycle tracking
 */
export type Invitation = {
  /**
   * **[READ-ONLY]** Unique system identifier for the invitation. Auto-generated by the system and cannot be modified.
   */
  readonly uuid?: string;
  /**
   * **[READ-ONLY]** Unique token used for invitation acceptance and decline links. Generated by the system and used in email URLs for secure invitation processing.
   */
  readonly token?: string;
  /**
   * **[REQUIRED]** Email address of the invitation recipient. Must be a valid email format and will be used to send invitation emails.
   */
  recipient_email: string;
  /**
   * **[REQUIRED]** Full name of the invitation recipient. Used in email templates and for display purposes throughout the invitation process.
   */
  recipient_name: string;
  /**
   * **[REQUIRED]** UUID of the organization the user is being invited to join. References the target organization for this invitation.
   */
  organisation_uuid: string;
  /**
   * **[OPTIONAL]** UUID of the training branch for branch-specific invitations. When provided, the invitation is for a specific branch within the organization.
   */
  branch_uuid?: string;
  /**
   * **[REQUIRED]** UUID of the user domain/role being offered to the recipient. Determines what permissions and access the user will have upon acceptance.
   */
  domain_uuid: string;
  /**
   * **[REQUIRED]** UUID of the user who sent the invitation. References the user who initiated this invitation process.
   */
  inviter_uuid: string;
  status?: StatusEnum4;
  /**
   * **[OPTIONAL]** Optional notes or message included with the invitation. Can contain welcoming text, instructions, or other relevant information for the recipient.
   */
  notes?: string;
  /**
   * **[READ-ONLY]** Name of the organization for display purposes. Populated by the system based on the organisation_uuid and cannot be directly modified.
   */
  readonly organisation_name?: string;
  /**
   * **[READ-ONLY]** Name of the training branch for display purposes. Populated by the system based on the branch_uuid and cannot be directly modified.
   */
  readonly branch_name?: string;
  domain_name?: DomainNameEnum;
  /**
   * **[READ-ONLY]** Full name of the user who sent the invitation. Cached for performance and email template purposes, automatically populated by the system.
   */
  readonly inviter_name?: string;
  /**
   * **[READ-ONLY]** Date and time when the invitation expires in ISO 8601 format. After this time, the invitation cannot be accepted and will be marked as expired.
   */
  readonly expires_at?: Date;
  /**
   * **[READ-ONLY]** Date and time when the invitation was accepted in ISO 8601 format. Only populated when the invitation status is ACCEPTED.
   */
  readonly accepted_at?: Date;
  /**
   * **[READ-ONLY]** Date and time when the invitation was declined in ISO 8601 format. Only populated when the invitation status is DECLINED.
   */
  readonly declined_at?: Date;
  /**
   * **[READ-ONLY]** UUID of the user who accepted the invitation. Only populated when the invitation status is ACCEPTED, linking to the actual user account.
   */
  readonly user_uuid?: string;
  /**
   * **[READ-ONLY]** Timestamp when the invitation was first created in ISO 8601 format. Automatically set by the system and cannot be modified.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Timestamp when the invitation was last modified in ISO 8601 format. Automatically updated by the system on any changes and cannot be directly modified.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or identifier of who created the invitation. Used for audit trail purposes and automatically populated by the system.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Email or identifier of who last modified the invitation. Used for audit trail purposes and automatically updated by the system on changes.
   */
  readonly updated_by?: string;
};

export type ApiResponseInteger = {
  success?: boolean;
  data?: number;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseInstructor = {
  success?: boolean;
  data?: Instructor;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponse = {
  success?: boolean;
  data?: {
    [key: string]: unknown;
  };
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseAssignmentSubmission = {
  success?: boolean;
  data?: AssignmentSubmission;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Student submission for an assignment with grading and feedback information
 */
export type AssignmentSubmission = {
  /**
   * **[READ-ONLY]** Unique system identifier for the assignment submission. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the enrollment UUID of the student making this submission.
   */
  enrollment_uuid: string;
  /**
   * **[REQUIRED]** Reference to the assignment UUID this submission is for.
   */
  assignment_uuid: string;
  /**
   * **[OPTIONAL]** Text content of the student's submission.
   */
  submission_text?: string;
  /**
   * **[OPTIONAL]** Array of file URLs attached to this submission.
   */
  file_urls?: Array<string>;
  /**
   * **[OPTIONAL]** Timestamp when the submission was made by the student.
   */
  submitted_at?: Date;
  status: StatusEnum5;
  /**
   * **[OPTIONAL]** Score awarded to this submission by the instructor.
   */
  score?: number;
  /**
   * **[OPTIONAL]** Maximum possible score for this submission.
   */
  max_score?: number;
  /**
   * **[OPTIONAL]** Percentage score calculated from score and max_score.
   */
  percentage?: number;
  /**
   * **[OPTIONAL]** Instructor's feedback and comments on the submission.
   */
  instructor_comments?: string;
  /**
   * **[OPTIONAL]** Timestamp when the submission was graded by the instructor.
   */
  graded_at?: Date;
  /**
   * **[OPTIONAL]** Reference to the instructor UUID who graded this submission.
   */
  graded_by_uuid?: string;
  /**
   * **[READ-ONLY]** Timestamp when the submission was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the student who created this submission. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the submission was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this submission. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the submission has been graded by an instructor.
   */
  readonly is_graded?: boolean;
  /**
   * **[READ-ONLY]** Formatted category of the submission based on its content type.
   */
  readonly submission_category?: string;
  /**
   * **[READ-ONLY]** Formatted display of the grade information.
   */
  readonly grade_display?: string;
  /**
   * **[READ-ONLY]** Comprehensive status indicating submission state and availability of feedback.
   */
  readonly submission_status_display?: string;
  /**
   * **[READ-ONLY]** Summary of files attached to this submission.
   */
  readonly file_count_display?: string;
};

export type ApiResponsePagedDtoUser = {
  success?: boolean;
  data?: PagedDtoUser;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PageLinks = {
  first?: string;
  previous?: string;
  self?: string;
  next?: string;
  last?: string;
};

export type PageMetadata = {
  pageNumber?: number;
  pageSize?: number;
  totalElements?: bigint;
  totalPages?: number;
  hasNext?: boolean;
  hasPrevious?: boolean;
  first?: boolean;
  last?: boolean;
};

export type PagedDtoUser = {
  content?: Array<User>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListInvitation = {
  success?: boolean;
  data?: Array<Invitation>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoTrainingBranch = {
  success?: boolean;
  data?: PagedDtoTrainingBranch;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoTrainingBranch = {
  content?: Array<TrainingBranch>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoStudent = {
  success?: boolean;
  data?: PagedDtoStudent;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoStudent = {
  content?: Array<Student>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type Page = {
  totalElements?: bigint;
  totalPages?: number;
  first?: boolean;
  last?: boolean;
  pageable?: PageableObject;
  size?: number;
  content?: Array<{
    [key: string]: unknown;
  }>;
  number?: number;
  sort?: SortObject;
  numberOfElements?: number;
  empty?: boolean;
};

export type PageableObject = {
  paged?: boolean;
  pageNumber?: number;
  pageSize?: number;
  offset?: bigint;
  sort?: SortObject;
  unpaged?: boolean;
};

export type SortObject = {
  sorted?: boolean;
  empty?: boolean;
  unsorted?: boolean;
};

export type ApiResponsePagedDtoQuiz = {
  success?: boolean;
  data?: PagedDtoQuiz;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoQuiz = {
  content?: Array<Quiz>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseBigDecimal = {
  success?: boolean;
  data?: number;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseListQuizQuestion = {
  success?: boolean;
  data?: Array<QuizQuestion>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoQuizQuestionOption = {
  success?: boolean;
  data?: PagedDtoQuizQuestionOption;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoQuizQuestionOption = {
  content?: Array<QuizQuestionOption>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseMapStringLong = {
  success?: boolean;
  data?: {
    [key: string]: bigint;
  };
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoQuizAttempt = {
  success?: boolean;
  data?: PagedDtoQuizAttempt;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoQuizAttempt = {
  content?: Array<QuizAttempt>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

/**
 * Student quiz attempt with timing, scoring, and completion tracking
 */
export type QuizAttempt = {
  /**
   * **[READ-ONLY]** Unique system identifier for the quiz attempt. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the enrollment UUID of the student taking the quiz.
   */
  enrollment_uuid: string;
  /**
   * **[REQUIRED]** Reference to the quiz UUID being attempted.
   */
  quiz_uuid: string;
  /**
   * **[OPTIONAL]** Sequential number of this attempt for the same quiz by the same student.
   */
  attempt_number?: number;
  /**
   * **[OPTIONAL]** Timestamp when the student started the quiz attempt.
   */
  started_at?: Date;
  /**
   * **[OPTIONAL]** Timestamp when the student submitted the quiz attempt.
   */
  submitted_at?: Date;
  /**
   * **[OPTIONAL]** Total time taken to complete the quiz in minutes.
   */
  time_taken_minutes?: number;
  /**
   * **[OPTIONAL]** Score achieved by the student on this quiz attempt.
   */
  score?: number;
  /**
   * **[OPTIONAL]** Maximum possible score for this quiz.
   */
  max_score?: number;
  /**
   * **[OPTIONAL]** Percentage score calculated from score and max_score.
   */
  percentage?: number;
  /**
   * **[OPTIONAL]** Indicates if the student passed the quiz based on passing criteria.
   */
  is_passed?: boolean;
  status: StatusEnum6;
  /**
   * **[READ-ONLY]** Timestamp when the attempt was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this attempt. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the attempt was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this attempt. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the quiz attempt has been completed (submitted or graded).
   */
  readonly is_completed?: boolean;
  /**
   * **[READ-ONLY]** Formatted display of the grade information.
   */
  readonly grade_display?: string;
  /**
   * **[READ-ONLY]** Formatted category of the attempt based on outcome and status.
   */
  readonly attempt_category?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the quiz attempt performance.
   */
  readonly performance_summary?: string;
  /**
   * **[READ-ONLY]** Formatted display of the time taken to complete the quiz.
   */
  readonly time_display?: string;
};

export type ApiResponsePagedDtoQuizQuestion = {
  success?: boolean;
  data?: PagedDtoQuizQuestion;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoQuizQuestion = {
  content?: Array<QuizQuestion>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoProgramRequirement = {
  success?: boolean;
  data?: PagedDtoProgramRequirement;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoProgramRequirement = {
  content?: Array<ProgramRequirement>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoProgramEnrollment = {
  success?: boolean;
  data?: PagedDtoProgramEnrollment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoProgramEnrollment = {
  content?: Array<ProgramEnrollment>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

/**
 * Student enrollment in an educational program with progress tracking and completion details
 */
export type ProgramEnrollment = {
  /**
   * **[READ-ONLY]** Unique system identifier for the program enrollment. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the student UUID who is enrolled in the program.
   */
  student_uuid: string;
  /**
   * **[REQUIRED]** Reference to the program UUID the student is enrolled in.
   */
  program_uuid: string;
  /**
   * **[OPTIONAL]** Timestamp when the student enrolled in the program.
   */
  enrollment_date?: Date;
  /**
   * **[OPTIONAL]** Timestamp when the student completed the program. Null if not yet completed.
   */
  completion_date?: Date;
  status: StatusEnum7;
  /**
   * **[OPTIONAL]** Percentage of program content completed by the student.
   */
  progress_percentage?: number;
  /**
   * **[OPTIONAL]** Final grade achieved by the student in the program.
   */
  final_grade?: number;
  /**
   * **[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.
   */
  readonly is_active?: boolean;
  /**
   * **[READ-ONLY]** Formatted category of the enrollment based on current status.
   */
  readonly enrollment_category?: string;
  /**
   * **[READ-ONLY]** Formatted display of the student's progress in the program.
   */
  readonly progress_display?: string;
  /**
   * **[READ-ONLY]** Duration of the enrollment from start to completion or current date.
   */
  readonly enrollment_duration?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.
   */
  readonly status_summary?: string;
};

export type ApiResponseListCourse = {
  success?: boolean;
  data?: Array<Course>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseDouble = {
  success?: boolean;
  data?: number;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoCertificate = {
  success?: boolean;
  data?: PagedDtoCertificate;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCertificate = {
  content?: Array<Certificate>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoProgramCourse = {
  success?: boolean;
  data?: PagedDtoProgramCourse;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoProgramCourse = {
  content?: Array<ProgramCourse>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoOrganisation = {
  success?: boolean;
  data?: PagedDtoOrganisation;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoOrganisation = {
  content?: Array<Organisation>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListUser = {
  success?: boolean;
  data?: Array<User>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseBoolean = {
  success?: boolean;
  data?: boolean;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoInstructor = {
  success?: boolean;
  data?: PagedDtoInstructor;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructor = {
  content?: Array<Instructor>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoInstructorSkill = {
  success?: boolean;
  data?: PagedDtoInstructorSkill;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructorSkill = {
  content?: Array<InstructorSkill>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoInstructorProfessionalMembership = {
  success?: boolean;
  data?: PagedDtoInstructorProfessionalMembership;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructorProfessionalMembership = {
  content?: Array<InstructorProfessionalMembership>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoInstructorExperience = {
  success?: boolean;
  data?: PagedDtoInstructorExperience;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructorExperience = {
  content?: Array<InstructorExperience>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListInstructorEducation = {
  success?: boolean;
  data?: Array<InstructorEducation>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponseListInstructorDocument = {
  success?: boolean;
  data?: Array<InstructorDocument>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoInstructorEducation = {
  success?: boolean;
  data?: PagedDtoInstructorEducation;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructorEducation = {
  content?: Array<InstructorEducation>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoInstructorDocument = {
  success?: boolean;
  data?: PagedDtoInstructorDocument;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoInstructorDocument = {
  content?: Array<InstructorDocument>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoCourse = {
  success?: boolean;
  data?: PagedDtoCourse;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCourse = {
  content?: Array<Course>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListContentStatus = {
  success?: boolean;
  data?: Array<StatusEnum3>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoCourseRequirement = {
  success?: boolean;
  data?: PagedDtoCourseRequirement;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCourseRequirement = {
  content?: Array<CourseRequirement>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoLesson = {
  success?: boolean;
  data?: PagedDtoLesson;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoLesson = {
  content?: Array<Lesson>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListLessonContent = {
  success?: boolean;
  data?: Array<LessonContent>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoCourseEnrollment = {
  success?: boolean;
  data?: PagedDtoCourseEnrollment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Student enrollment in a course with progress tracking and completion details
 */
export type CourseEnrollment = {
  /**
   * **[READ-ONLY]** Unique system identifier for the course enrollment. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the student UUID who is enrolled in the course.
   */
  student_uuid: string;
  /**
   * **[REQUIRED]** Reference to the course UUID the student is enrolled in.
   */
  course_uuid: string;
  /**
   * **[OPTIONAL]** Timestamp when the student enrolled in the course.
   */
  enrollment_date?: Date;
  /**
   * **[OPTIONAL]** Timestamp when the student completed the course. Null if not yet completed.
   */
  completion_date?: Date;
  status: StatusEnum7;
  /**
   * **[OPTIONAL]** Percentage of course content completed by the student.
   */
  progress_percentage?: number;
  /**
   * **[OPTIONAL]** Final grade achieved by the student in the course.
   */
  final_grade?: number;
  /**
   * **[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.
   */
  readonly is_active?: boolean;
  /**
   * **[READ-ONLY]** Formatted category of the enrollment based on current status.
   */
  readonly enrollment_category?: string;
  /**
   * **[READ-ONLY]** Formatted display of the student's progress in the course.
   */
  readonly progress_display?: string;
  /**
   * **[READ-ONLY]** Duration of the enrollment from start to completion or current date.
   */
  readonly enrollment_duration?: string;
  /**
   * **[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.
   */
  readonly status_summary?: string;
};

export type PagedDtoCourseEnrollment = {
  content?: Array<CourseEnrollment>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListCourseCategoryMapping = {
  success?: boolean;
  data?: Array<CourseCategoryMapping>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

/**
 * Represents the many-to-many relationship between courses and categories
 */
export type CourseCategoryMapping = {
  /**
   * **[READ-ONLY]** Unique system identifier for the mapping. Auto-generated by the system.
   */
  readonly uuid?: string;
  /**
   * **[REQUIRED]** Reference to the course UUID in this mapping.
   */
  course_uuid: string;
  /**
   * **[REQUIRED]** Reference to the category UUID in this mapping.
   */
  category_uuid: string;
  /**
   * **[READ-ONLY]** Name of the course for display purposes. Fetched from the course entity.
   */
  readonly course_name?: string;
  /**
   * **[READ-ONLY]** Name of the category for display purposes. Fetched from the category entity.
   */
  readonly category_name?: string;
  /**
   * **[READ-ONLY]** Timestamp when the mapping was created. Automatically set by the system.
   */
  readonly created_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who created this mapping. Used for audit trails.
   */
  readonly created_by?: string;
  /**
   * **[READ-ONLY]** Timestamp when the mapping was last modified. Automatically updated by the system.
   */
  readonly updated_date?: Date;
  /**
   * **[READ-ONLY]** Email or username of the user who last modified this mapping. Used for audit trails.
   */
  readonly updated_by?: string;
  /**
   * **[READ-ONLY]** Indicates if both course and category names are populated.
   */
  readonly has_names?: boolean;
  /**
   * **[READ-ONLY]** Human-readable text representing this course-category relationship.
   */
  readonly display_text?: string;
};

export type ApiResponsePagedDtoCourseAssessment = {
  success?: boolean;
  data?: PagedDtoCourseAssessment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCourseAssessment = {
  content?: Array<CourseAssessment>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoLessonContent = {
  success?: boolean;
  data?: PagedDtoLessonContent;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoLessonContent = {
  content?: Array<LessonContent>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoCourseCategoryMapping = {
  success?: boolean;
  data?: PagedDtoCourseCategoryMapping;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCourseCategoryMapping = {
  content?: Array<CourseCategoryMapping>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponsePagedDtoGradingLevel = {
  success?: boolean;
  data?: PagedDtoGradingLevel;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoGradingLevel = {
  content?: Array<GradingLevel>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListDifficultyLevel = {
  success?: boolean;
  data?: Array<DifficultyLevel>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoContentType = {
  success?: boolean;
  data?: PagedDtoContentType;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoContentType = {
  content?: Array<ContentType>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListContentType = {
  success?: boolean;
  data?: Array<ContentType>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoCategory = {
  success?: boolean;
  data?: PagedDtoCategory;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCategory = {
  content?: Array<Category>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListCategory = {
  success?: boolean;
  data?: Array<Category>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoCertificateTemplate = {
  success?: boolean;
  data?: PagedDtoCertificateTemplate;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoCertificateTemplate = {
  content?: Array<CertificateTemplate>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListCertificate = {
  success?: boolean;
  data?: Array<Certificate>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoAssignment = {
  success?: boolean;
  data?: PagedDtoAssignment;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoAssignment = {
  content?: Array<Assignment>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

export type ApiResponseListAssignmentSubmission = {
  success?: boolean;
  data?: Array<AssignmentSubmission>;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type ApiResponsePagedDtoAssignmentSubmission = {
  success?: boolean;
  data?: PagedDtoAssignmentSubmission;
  message?: string;
  error?: {
    [key: string]: unknown;
  };
};

export type PagedDtoAssignmentSubmission = {
  content?: Array<AssignmentSubmission>;
  metadata?: PageMetadata;
  links?: PageLinks;
};

/**
 * Valid African phone number in international or local format
 */
export type AfricanPhoneNumber = unknown;

/**
 * Valid Kenyan mobile phone number (Safaricom, Airtel formats)
 */
export type KenyanPhoneNumber = unknown;

/**
 * Valid Nigerian mobile phone number (MTN, Glo, Airtel, 9mobile formats)
 */
export type NigerianPhoneNumber = unknown;

/**
 * Valid East African phone number (Kenya, Uganda, Tanzania, Rwanda, Burundi, South Sudan)
 */
export type EastAfricanPhoneNumber = unknown;

/**
 * Valid West African phone number (Nigeria, Ghana, Senegal, Mali, etc.)
 */
export type WestAfricanPhoneNumber = unknown;

/**
 * Valid Southern African phone number (South Africa, Zimbabwe, Zambia, Botswana, etc.)
 */
export type SouthernAfricanPhoneNumber = unknown;

/**
 * Valid international phone number in E.164 format
 */
export type InternationalPhoneNumber = unknown;

/**
 * A valid URL with HTTP or HTTPS protocol
 */
export type ValidUrl = unknown;

/**
 * A valid website URL for personal or business websites
 */
export type WebsiteUrl = unknown;

/**
 * A secure HTTPS URL for API endpoints
 */
export type ApiUrl = unknown;

/**
 * A valid URL pointing to an image file
 */
export type ImageUrl = unknown;

/**
 * A valid URL pointing to a document file
 */
export type DocumentUrl = unknown;

/**
 * A valid social media profile URL
 */
export type SocialMediaUrl = unknown;

/**
 * **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
 */
export const GenderEnum = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY',
} as const;

/**
 * **[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.
 */
export type GenderEnum = (typeof GenderEnum)[keyof typeof GenderEnum];

/**
 * Domain roles that define the user's functional areas within the system
 */
export const ItemsEnum = {
  STUDENT: 'student',
  INSTRUCTOR: 'instructor',
  ADMIN: 'admin',
  ORGANISATION_USER: 'organisation_user',
} as const;

/**
 * Domain roles that define the user's functional areas within the system
 */
export type ItemsEnum = (typeof ItemsEnum)[keyof typeof ItemsEnum];

/**
 * **[REQUIRED]** Quiz publication status in the content workflow.
 */
export const StatusEnum = {
  DRAFT: 'DRAFT',
  IN_REVIEW: 'IN_REVIEW',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
} as const;

/**
 * **[REQUIRED]** Quiz publication status in the content workflow.
 */
export type StatusEnum = (typeof StatusEnum)[keyof typeof StatusEnum];

/**
 * **[REQUIRED]** Type of question determining the answer format and validation.
 */
export const QuestionTypeEnum = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  TRUE_FALSE: 'TRUE_FALSE',
  SHORT_ANSWER: 'SHORT_ANSWER',
  ESSAY: 'ESSAY',
} as const;

/**
 * **[REQUIRED]** Type of question determining the answer format and validation.
 */
export type QuestionTypeEnum = (typeof QuestionTypeEnum)[keyof typeof QuestionTypeEnum];

/**
 * **[REQUIRED]** Type of requirement classification for this program element.
 */
export const RequirementTypeEnum = {
  STUDENT: 'STUDENT',
  TRAINING_CENTER: 'TRAINING_CENTER',
  INSTRUCTOR: 'INSTRUCTOR',
} as const;

/**
 * **[REQUIRED]** Type of requirement classification for this program element.
 */
export type RequirementTypeEnum = (typeof RequirementTypeEnum)[keyof typeof RequirementTypeEnum];

/**
 * **[REQUIRED]** Level of proficiency in this skill. Indicates instructor's competency and teaching capability.
 */
export const ProficiencyLevelEnum = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT',
} as const;

/**
 * **[REQUIRED]** Level of proficiency in this skill. Indicates instructor's competency and teaching capability.
 */
export type ProficiencyLevelEnum = (typeof ProficiencyLevelEnum)[keyof typeof ProficiencyLevelEnum];

/**
 * **[READ-ONLY]** Current status of the membership.
 */
export const MembershipStatusEnum = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  EXPIRED: 'EXPIRED',
  UNKNOWN: 'UNKNOWN',
} as const;

/**
 * **[READ-ONLY]** Current status of the membership.
 */
export type MembershipStatusEnum = (typeof MembershipStatusEnum)[keyof typeof MembershipStatusEnum];

/**
 * **[READ-ONLY]** Classification of organization type based on name keywords.
 */
export const OrganizationTypeEnum = {
  PROFESSIONAL_INSTITUTE: 'PROFESSIONAL_INSTITUTE',
  CERTIFICATION_BODY: 'CERTIFICATION_BODY',
  INDUSTRY_ASSOCIATION: 'INDUSTRY_ASSOCIATION',
  ACADEMIC_SOCIETY: 'ACADEMIC_SOCIETY',
  TRADE_ORGANIZATION: 'TRADE_ORGANIZATION',
  OTHER: 'OTHER',
} as const;

/**
 * **[READ-ONLY]** Classification of organization type based on name keywords.
 */
export type OrganizationTypeEnum = (typeof OrganizationTypeEnum)[keyof typeof OrganizationTypeEnum];

/**
 * **[READ-ONLY]** Classification of experience level based on position title and duration.
 */
export const ExperienceLevelEnum = {
  ENTRY: 'ENTRY',
  JUNIOR: 'JUNIOR',
  MID: 'MID',
  SENIOR: 'SENIOR',
  LEAD: 'LEAD',
  EXECUTIVE: 'EXECUTIVE',
} as const;

/**
 * **[READ-ONLY]** Classification of experience level based on position title and duration.
 */
export type ExperienceLevelEnum = (typeof ExperienceLevelEnum)[keyof typeof ExperienceLevelEnum];

/**
 * **[READ-ONLY]** Classification of education level based on qualification type.
 */
export const EducationLevelEnum = {
  CERTIFICATE: 'CERTIFICATE',
  DIPLOMA: 'DIPLOMA',
  UNDERGRADUATE: 'UNDERGRADUATE',
  POSTGRADUATE: 'POSTGRADUATE',
  DOCTORAL: 'DOCTORAL',
  OTHER: 'OTHER',
} as const;

/**
 * **[READ-ONLY]** Classification of education level based on qualification type.
 */
export type EducationLevelEnum = (typeof EducationLevelEnum)[keyof typeof EducationLevelEnum];

/**
 * **[READ-ONLY]** Current status of the document in the verification workflow.
 */
export const StatusEnum2 = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  UNDER_REVIEW: 'UNDER_REVIEW',
} as const;

/**
 * **[READ-ONLY]** Current status of the document in the verification workflow.
 */
export type StatusEnum2 = (typeof StatusEnum2)[keyof typeof StatusEnum2];

/**
 * **[READ-ONLY]** Human-readable verification status of the document.
 */
export const VerificationStatusEnum = {
  VERIFIED: 'VERIFIED',
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
} as const;

/**
 * **[READ-ONLY]** Human-readable verification status of the document.
 */
export type VerificationStatusEnum =
  (typeof VerificationStatusEnum)[keyof typeof VerificationStatusEnum];

/**
 * **[REQUIRED]** Course publication status in the content workflow.
 */
export const StatusEnum3 = {
  DRAFT: 'draft',
  IN_REVIEW: 'in_review',
  PUBLISHED: 'published',
  ARCHIVED: 'archived',
} as const;

/**
 * **[REQUIRED]** Course publication status in the content workflow.
 */
export type StatusEnum3 = (typeof StatusEnum3)[keyof typeof StatusEnum3];

/**
 * **[REQUIRED]** Type of certificate this template is designed for.
 */
export const TemplateTypeEnum = {
  COURSE_COMPLETION: 'COURSE_COMPLETION',
  PARTICIPATION: 'PARTICIPATION',
  ACHIEVEMENT: 'ACHIEVEMENT',
  CUSTOM: 'CUSTOM',
} as const;

/**
 * **[REQUIRED]** Type of certificate this template is designed for.
 */
export type TemplateTypeEnum = (typeof TemplateTypeEnum)[keyof typeof TemplateTypeEnum];

/**
 * **[READ-ONLY]** Current status of the invitation in its lifecycle. Automatically managed by the system based on user actions and expiration rules.
 */
export const StatusEnum4 = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
} as const;

/**
 * **[READ-ONLY]** Current status of the invitation in its lifecycle. Automatically managed by the system based on user actions and expiration rules.
 */
export type StatusEnum4 = (typeof StatusEnum4)[keyof typeof StatusEnum4];

/**
 * **[READ-ONLY]** Name of the user domain/role for display purposes. Populated by the system based on the domain_uuid and indicates the role being offered.
 */
export const DomainNameEnum = {
  STUDENT: 'student',
  INSTRUCTOR: 'instructor',
  ADMIN: 'admin',
  ORGANISATION_USER: 'organisation_user',
} as const;

/**
 * **[READ-ONLY]** Name of the user domain/role for display purposes. Populated by the system based on the domain_uuid and indicates the role being offered.
 */
export type DomainNameEnum = (typeof DomainNameEnum)[keyof typeof DomainNameEnum];

/**
 * **[REQUIRED]** Current status of the submission in the grading workflow.
 */
export const StatusEnum5 = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  IN_REVIEW: 'IN_REVIEW',
  GRADED: 'GRADED',
  RETURNED: 'RETURNED',
} as const;

/**
 * **[REQUIRED]** Current status of the submission in the grading workflow.
 */
export type StatusEnum5 = (typeof StatusEnum5)[keyof typeof StatusEnum5];

/**
 * **[REQUIRED]** Current status of the quiz attempt.
 */
export const StatusEnum6 = {
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
} as const;

/**
 * **[REQUIRED]** Current status of the quiz attempt.
 */
export type StatusEnum6 = (typeof StatusEnum6)[keyof typeof StatusEnum6];

/**
 * **[REQUIRED]** Current status of the student's enrollment in the program.
 */
export const StatusEnum7 = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  SUSPENDED: 'SUSPENDED',
} as const;

/**
 * **[REQUIRED]** Current status of the student's enrollment in the program.
 */
export type StatusEnum7 = (typeof StatusEnum7)[keyof typeof StatusEnum7];

export type DeleteUserData = {
  body?: never;
  path: {
    /**
     * UUID of the user to delete. This will remove the user and all their organization relationships.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/users/{uuid}';
};

export type DeleteUserErrors = {
  /**
   * User not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * User deleted successfully
   */
  200: ApiResponseVoid;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserByUuidData = {
  body?: never;
  path: {
    /**
     * UUID of the user to retrieve. Must be an existing user identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/users/{uuid}';
};

export type GetUserByUuidErrors = {
  /**
   * User not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetUserByUuidError = GetUserByUuidErrors[keyof GetUserByUuidErrors];

export type GetUserByUuidResponses = {
  /**
   * User retrieved successfully
   */
  200: ApiResponseUser;
};

export type GetUserByUuidResponse = GetUserByUuidResponses[keyof GetUserByUuidResponses];

export type UpdateUserData = {
  body: User;
  path: {
    /**
     * UUID of the user to update. Must be an existing user identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/users/{uuid}';
};

export type UpdateUserErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseUser;
  /**
   * User not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
  /**
   * User updated successfully
   */
  200: ApiResponseUser;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type DeleteTrainingBranchData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/training-branches/{uuid}';
};

export type DeleteTrainingBranchErrors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteTrainingBranchError =
  DeleteTrainingBranchErrors[keyof DeleteTrainingBranchErrors];

export type DeleteTrainingBranchResponses = {
  /**
   * Training branch deleted successfully
   */
  200: ApiResponseVoid;
};

export type DeleteTrainingBranchResponse =
  DeleteTrainingBranchResponses[keyof DeleteTrainingBranchResponses];

export type GetTrainingBranchByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/training-branches/{uuid}';
};

export type GetTrainingBranchByUuidErrors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetTrainingBranchByUuidError =
  GetTrainingBranchByUuidErrors[keyof GetTrainingBranchByUuidErrors];

export type GetTrainingBranchByUuidResponses = {
  /**
   * Training branch retrieved successfully
   */
  200: ApiResponseTrainingBranch;
};

export type GetTrainingBranchByUuidResponse =
  GetTrainingBranchByUuidResponses[keyof GetTrainingBranchByUuidResponses];

export type UpdateTrainingBranchData = {
  body: TrainingBranch;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/training-branches/{uuid}';
};

export type UpdateTrainingBranchErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseTrainingBranch;
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateTrainingBranchError =
  UpdateTrainingBranchErrors[keyof UpdateTrainingBranchErrors];

export type UpdateTrainingBranchResponses = {
  /**
   * Training branch updated successfully
   */
  200: ApiResponseTrainingBranch;
};

export type UpdateTrainingBranchResponse =
  UpdateTrainingBranchResponses[keyof UpdateTrainingBranchResponses];

export type DeleteStudentData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/students/{uuid}';
};

export type DeleteStudentErrors = {
  /**
   * Student not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteStudentError = DeleteStudentErrors[keyof DeleteStudentErrors];

export type DeleteStudentResponses = {
  /**
   * Student deleted successfully
   */
  204: ApiResponseVoid;
};

export type DeleteStudentResponse = DeleteStudentResponses[keyof DeleteStudentResponses];

export type GetStudentByIdData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/students/{uuid}';
};

export type GetStudentByIdErrors = {
  /**
   * Student not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetStudentByIdError = GetStudentByIdErrors[keyof GetStudentByIdErrors];

export type GetStudentByIdResponses = {
  /**
   * Student found
   */
  200: Student;
};

export type GetStudentByIdResponse = GetStudentByIdResponses[keyof GetStudentByIdResponses];

export type UpdateStudentData = {
  body: Student;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/students/{uuid}';
};

export type UpdateStudentErrors = {
  /**
   * Student not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateStudentError = UpdateStudentErrors[keyof UpdateStudentErrors];

export type UpdateStudentResponses = {
  /**
   * Student updated successfully
   */
  200: Student;
};

export type UpdateStudentResponse = UpdateStudentResponses[keyof UpdateStudentResponses];

export type DeleteQuizData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{uuid}';
};

export type DeleteQuizErrors = {
  /**
   * Quiz not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteQuizError = DeleteQuizErrors[keyof DeleteQuizErrors];

export type DeleteQuizResponses = {
  /**
   * Quiz deleted successfully
   */
  204: void;
};

export type DeleteQuizResponse = DeleteQuizResponses[keyof DeleteQuizResponses];

export type GetQuizByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{uuid}';
};

export type GetQuizByUuidErrors = {
  /**
   * Quiz not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuizByUuidError = GetQuizByUuidErrors[keyof GetQuizByUuidErrors];

export type GetQuizByUuidResponses = {
  /**
   * Quiz found
   */
  200: ApiResponseQuiz;
};

export type GetQuizByUuidResponse = GetQuizByUuidResponses[keyof GetQuizByUuidResponses];

export type UpdateQuizData = {
  body: Quiz;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{uuid}';
};

export type UpdateQuizErrors = {
  /**
   * Quiz not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateQuizError = UpdateQuizErrors[keyof UpdateQuizErrors];

export type UpdateQuizResponses = {
  /**
   * Quiz updated successfully
   */
  200: ApiResponseQuiz;
};

export type UpdateQuizResponse = UpdateQuizResponses[keyof UpdateQuizResponses];

export type DeleteQuizQuestionData = {
  body?: never;
  path: {
    quizUuid: string;
    questionUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}';
};

export type DeleteQuizQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteQuizQuestionError = DeleteQuizQuestionErrors[keyof DeleteQuizQuestionErrors];

export type DeleteQuizQuestionResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateQuizQuestionData = {
  body: QuizQuestion;
  path: {
    quizUuid: string;
    questionUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}';
};

export type UpdateQuizQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateQuizQuestionError = UpdateQuizQuestionErrors[keyof UpdateQuizQuestionErrors];

export type UpdateQuizQuestionResponses = {
  /**
   * OK
   */
  200: ApiResponseQuizQuestion;
};

export type UpdateQuizQuestionResponse =
  UpdateQuizQuestionResponses[keyof UpdateQuizQuestionResponses];

export type DeleteQuestionOptionData = {
  body?: never;
  path: {
    quizUuid: string;
    questionUuid: string;
    optionUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options/{optionUuid}';
};

export type DeleteQuestionOptionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteQuestionOptionError =
  DeleteQuestionOptionErrors[keyof DeleteQuestionOptionErrors];

export type DeleteQuestionOptionResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateQuestionOptionData = {
  body: QuizQuestionOption;
  path: {
    quizUuid: string;
    questionUuid: string;
    optionUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options/{optionUuid}';
};

export type UpdateQuestionOptionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateQuestionOptionError =
  UpdateQuestionOptionErrors[keyof UpdateQuestionOptionErrors];

export type UpdateQuestionOptionResponses = {
  /**
   * OK
   */
  200: ApiResponseQuizQuestionOption;
};

export type UpdateQuestionOptionResponse =
  UpdateQuestionOptionResponses[keyof UpdateQuestionOptionResponses];

export type DeleteTrainingProgramData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{uuid}';
};

export type DeleteTrainingProgramErrors = {
  /**
   * Program not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteTrainingProgramError =
  DeleteTrainingProgramErrors[keyof DeleteTrainingProgramErrors];

export type DeleteTrainingProgramResponses = {
  /**
   * Program deleted successfully
   */
  204: void;
};

export type DeleteTrainingProgramResponse =
  DeleteTrainingProgramResponses[keyof DeleteTrainingProgramResponses];

export type GetTrainingProgramByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{uuid}';
};

export type GetTrainingProgramByUuidErrors = {
  /**
   * Program not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetTrainingProgramByUuidError =
  GetTrainingProgramByUuidErrors[keyof GetTrainingProgramByUuidErrors];

export type GetTrainingProgramByUuidResponses = {
  /**
   * Program found
   */
  200: unknown;
};

export type UpdateTrainingProgramData = {
  body: unknown;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{uuid}';
};

export type UpdateTrainingProgramErrors = {
  /**
   * Program not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateTrainingProgramError =
  UpdateTrainingProgramErrors[keyof UpdateTrainingProgramErrors];

export type UpdateTrainingProgramResponses = {
  /**
   * Program updated successfully
   */
  200: unknown;
};

export type DeleteProgramRequirementData = {
  body?: never;
  path: {
    programUuid: string;
    requirementUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/requirements/{requirementUuid}';
};

export type DeleteProgramRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteProgramRequirementError =
  DeleteProgramRequirementErrors[keyof DeleteProgramRequirementErrors];

export type DeleteProgramRequirementResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateProgramRequirementData = {
  body: ProgramRequirement;
  path: {
    programUuid: string;
    requirementUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/requirements/{requirementUuid}';
};

export type UpdateProgramRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateProgramRequirementError =
  UpdateProgramRequirementErrors[keyof UpdateProgramRequirementErrors];

export type UpdateProgramRequirementResponses = {
  /**
   * OK
   */
  200: ApiResponseProgramRequirement;
};

export type UpdateProgramRequirementResponse =
  UpdateProgramRequirementResponses[keyof UpdateProgramRequirementResponses];

export type RemoveProgramCourseData = {
  body?: never;
  path: {
    programUuid: string;
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses/{courseUuid}';
};

export type RemoveProgramCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type RemoveProgramCourseError = RemoveProgramCourseErrors[keyof RemoveProgramCourseErrors];

export type RemoveProgramCourseResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateProgramCourseData = {
  body: ProgramCourse;
  path: {
    programUuid: string;
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses/{courseUuid}';
};

export type UpdateProgramCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateProgramCourseError = UpdateProgramCourseErrors[keyof UpdateProgramCourseErrors];

export type UpdateProgramCourseResponses = {
  /**
   * OK
   */
  200: ApiResponseProgramCourse;
};

export type UpdateProgramCourseResponse =
  UpdateProgramCourseResponses[keyof UpdateProgramCourseResponses];

export type DeleteOrganisationData = {
  body?: never;
  path: {
    /**
     * UUID of the organisation to delete. This will soft-delete the organisation and all user relationships.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}';
};

export type DeleteOrganisationErrors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteOrganisationError = DeleteOrganisationErrors[keyof DeleteOrganisationErrors];

export type DeleteOrganisationResponses = {
  /**
   * Organisation deleted successfully
   */
  200: ApiResponseVoid;
};

export type DeleteOrganisationResponse =
  DeleteOrganisationResponses[keyof DeleteOrganisationResponses];

export type GetOrganisationByUuidData = {
  body?: never;
  path: {
    /**
     * UUID of the organisation to retrieve. Must be an existing organisation identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}';
};

export type GetOrganisationByUuidErrors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetOrganisationByUuidError =
  GetOrganisationByUuidErrors[keyof GetOrganisationByUuidErrors];

export type GetOrganisationByUuidResponses = {
  /**
   * Organisation retrieved successfully
   */
  200: ApiResponseOrganisation;
};

export type GetOrganisationByUuidResponse =
  GetOrganisationByUuidResponses[keyof GetOrganisationByUuidResponses];

export type UpdateOrganisationData = {
  body: Organisation;
  path: {
    /**
     * UUID of the organisation to update. Must be an existing organisation identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}';
};

export type UpdateOrganisationErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseOrganisation;
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateOrganisationError = UpdateOrganisationErrors[keyof UpdateOrganisationErrors];

export type UpdateOrganisationResponses = {
  /**
   * Organisation updated successfully
   */
  200: ApiResponseOrganisation;
};

export type UpdateOrganisationResponse =
  UpdateOrganisationResponses[keyof UpdateOrganisationResponses];

export type DeleteTrainingBranch1Data = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to delete. This will soft-delete the branch and remove all user assignments.
     */
    branchUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}';
};

export type DeleteTrainingBranch1Errors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteTrainingBranch1Error =
  DeleteTrainingBranch1Errors[keyof DeleteTrainingBranch1Errors];

export type DeleteTrainingBranch1Responses = {
  /**
   * Training branch deleted successfully
   */
  200: ApiResponseVoid;
};

export type DeleteTrainingBranch1Response =
  DeleteTrainingBranch1Responses[keyof DeleteTrainingBranch1Responses];

export type GetTrainingBranchByUuid1Data = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to retrieve. Must be a branch within the specified organization.
     */
    branchUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}';
};

export type GetTrainingBranchByUuid1Errors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetTrainingBranchByUuid1Error =
  GetTrainingBranchByUuid1Errors[keyof GetTrainingBranchByUuid1Errors];

export type GetTrainingBranchByUuid1Responses = {
  /**
   * Training branch retrieved successfully
   */
  200: ApiResponseTrainingBranch;
};

export type GetTrainingBranchByUuid1Response =
  GetTrainingBranchByUuid1Responses[keyof GetTrainingBranchByUuid1Responses];

export type UpdateTrainingBranch1Data = {
  body: TrainingBranch;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to update. Must be a branch within the specified organization.
     */
    branchUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}';
};

export type UpdateTrainingBranch1Errors = {
  /**
   * Invalid input data
   */
  400: ApiResponseTrainingBranch;
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateTrainingBranch1Error =
  UpdateTrainingBranch1Errors[keyof UpdateTrainingBranch1Errors];

export type UpdateTrainingBranch1Responses = {
  /**
   * Training branch updated successfully
   */
  200: ApiResponseTrainingBranch;
};

export type UpdateTrainingBranch1Response =
  UpdateTrainingBranch1Responses[keyof UpdateTrainingBranch1Responses];

export type UpdatePointOfContactData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to update the POC for. Must be a branch within the specified organization.
     */
    branchUuid: string;
    /**
     * UUID of the user to set as point of contact. Must be assigned to the branch or be a member of the organization.
     */
    pocUserUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/poc/{pocUserUuid}';
};

export type UpdatePointOfContactErrors = {
  /**
   * User is not eligible to be POC
   */
  400: ApiResponseVoid;
  /**
   * Training branch or user not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdatePointOfContactError =
  UpdatePointOfContactErrors[keyof UpdatePointOfContactErrors];

export type UpdatePointOfContactResponses = {
  /**
   * Point of contact updated successfully
   */
  200: ApiResponseVoid;
};

export type UpdatePointOfContactResponse =
  UpdatePointOfContactResponses[keyof UpdatePointOfContactResponses];

export type DeleteInstructorData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{uuid}';
};

export type DeleteInstructorErrors = {
  /**
   * Instructor not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorError = DeleteInstructorErrors[keyof DeleteInstructorErrors];

export type DeleteInstructorResponses = {
  /**
   * Instructor deleted successfully
   */
  204: void;
};

export type DeleteInstructorResponse = DeleteInstructorResponses[keyof DeleteInstructorResponses];

export type GetInstructorByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{uuid}';
};

export type GetInstructorByUuidErrors = {
  /**
   * Instructor not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorByUuidError = GetInstructorByUuidErrors[keyof GetInstructorByUuidErrors];

export type GetInstructorByUuidResponses = {
  /**
   * Instructor found
   */
  200: Instructor;
};

export type GetInstructorByUuidResponse =
  GetInstructorByUuidResponses[keyof GetInstructorByUuidResponses];

export type UpdateInstructorData = {
  body: Instructor;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{uuid}';
};

export type UpdateInstructorErrors = {
  /**
   * Instructor not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorError = UpdateInstructorErrors[keyof UpdateInstructorErrors];

export type UpdateInstructorResponses = {
  /**
   * Instructor updated successfully
   */
  200: Instructor;
};

export type UpdateInstructorResponse = UpdateInstructorResponses[keyof UpdateInstructorResponses];

export type DeleteInstructorSkillData = {
  body?: never;
  path: {
    instructorUuid: string;
    skillUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/skills/{skillUuid}';
};

export type DeleteInstructorSkillErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorSkillError =
  DeleteInstructorSkillErrors[keyof DeleteInstructorSkillErrors];

export type DeleteInstructorSkillResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateInstructorSkillData = {
  body: InstructorSkill;
  path: {
    instructorUuid: string;
    skillUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/skills/{skillUuid}';
};

export type UpdateInstructorSkillErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorSkillError =
  UpdateInstructorSkillErrors[keyof UpdateInstructorSkillErrors];

export type UpdateInstructorSkillResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorSkill;
};

export type UpdateInstructorSkillResponse =
  UpdateInstructorSkillResponses[keyof UpdateInstructorSkillResponses];

export type DeleteInstructorMembershipData = {
  body?: never;
  path: {
    instructorUuid: string;
    membershipUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/memberships/{membershipUuid}';
};

export type DeleteInstructorMembershipErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorMembershipError =
  DeleteInstructorMembershipErrors[keyof DeleteInstructorMembershipErrors];

export type DeleteInstructorMembershipResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateInstructorMembershipData = {
  body: InstructorProfessionalMembership;
  path: {
    instructorUuid: string;
    membershipUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/memberships/{membershipUuid}';
};

export type UpdateInstructorMembershipErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorMembershipError =
  UpdateInstructorMembershipErrors[keyof UpdateInstructorMembershipErrors];

export type UpdateInstructorMembershipResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorProfessionalMembership;
};

export type UpdateInstructorMembershipResponse =
  UpdateInstructorMembershipResponses[keyof UpdateInstructorMembershipResponses];

export type DeleteInstructorExperienceData = {
  body?: never;
  path: {
    instructorUuid: string;
    experienceUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/experience/{experienceUuid}';
};

export type DeleteInstructorExperienceErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorExperienceError =
  DeleteInstructorExperienceErrors[keyof DeleteInstructorExperienceErrors];

export type DeleteInstructorExperienceResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateInstructorExperienceData = {
  body: InstructorExperience;
  path: {
    instructorUuid: string;
    experienceUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/experience/{experienceUuid}';
};

export type UpdateInstructorExperienceErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorExperienceError =
  UpdateInstructorExperienceErrors[keyof UpdateInstructorExperienceErrors];

export type UpdateInstructorExperienceResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorExperience;
};

export type UpdateInstructorExperienceResponse =
  UpdateInstructorExperienceResponses[keyof UpdateInstructorExperienceResponses];

export type DeleteInstructorEducationData = {
  body?: never;
  path: {
    instructorUuid: string;
    educationUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/education/{educationUuid}';
};

export type DeleteInstructorEducationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorEducationError =
  DeleteInstructorEducationErrors[keyof DeleteInstructorEducationErrors];

export type DeleteInstructorEducationResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateInstructorEducationData = {
  body: InstructorEducation;
  path: {
    instructorUuid: string;
    educationUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/education/{educationUuid}';
};

export type UpdateInstructorEducationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorEducationError =
  UpdateInstructorEducationErrors[keyof UpdateInstructorEducationErrors];

export type UpdateInstructorEducationResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorEducation;
};

export type UpdateInstructorEducationResponse =
  UpdateInstructorEducationResponses[keyof UpdateInstructorEducationResponses];

export type DeleteInstructorDocumentData = {
  body?: never;
  path: {
    instructorUuid: string;
    documentUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}';
};

export type DeleteInstructorDocumentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteInstructorDocumentError =
  DeleteInstructorDocumentErrors[keyof DeleteInstructorDocumentErrors];

export type DeleteInstructorDocumentResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateInstructorDocumentData = {
  body: InstructorDocument;
  path: {
    instructorUuid: string;
    documentUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}';
};

export type UpdateInstructorDocumentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateInstructorDocumentError =
  UpdateInstructorDocumentErrors[keyof UpdateInstructorDocumentErrors];

export type UpdateInstructorDocumentResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorDocument;
};

export type UpdateInstructorDocumentResponse =
  UpdateInstructorDocumentResponses[keyof UpdateInstructorDocumentResponses];

export type DeleteCourseData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}';
};

export type DeleteCourseErrors = {
  /**
   * Course not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCourseError = DeleteCourseErrors[keyof DeleteCourseErrors];

export type DeleteCourseResponses = {
  /**
   * Course deleted successfully
   */
  204: void;
};

export type DeleteCourseResponse = DeleteCourseResponses[keyof DeleteCourseResponses];

export type GetCourseByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}';
};

export type GetCourseByUuidErrors = {
  /**
   * Course not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseByUuidError = GetCourseByUuidErrors[keyof GetCourseByUuidErrors];

export type GetCourseByUuidResponses = {
  /**
   * Course found
   */
  200: ApiResponseCourse;
};

export type GetCourseByUuidResponse = GetCourseByUuidResponses[keyof GetCourseByUuidResponses];

export type UpdateCourseData = {
  body: Course;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}';
};

export type UpdateCourseErrors = {
  /**
   * Invalid category UUIDs provided
   */
  400: ApiResponseCourse;
  /**
   * Course not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCourseError = UpdateCourseErrors[keyof UpdateCourseErrors];

export type UpdateCourseResponses = {
  /**
   * Course updated successfully
   */
  200: ApiResponseCourse;
};

export type UpdateCourseResponse = UpdateCourseResponses[keyof UpdateCourseResponses];

export type DeleteCourseRequirementData = {
  body?: never;
  path: {
    courseUuid: string;
    requirementUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/requirements/{requirementUuid}';
};

export type DeleteCourseRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCourseRequirementError =
  DeleteCourseRequirementErrors[keyof DeleteCourseRequirementErrors];

export type DeleteCourseRequirementResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateCourseRequirementData = {
  body: CourseRequirement;
  path: {
    courseUuid: string;
    requirementUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/requirements/{requirementUuid}';
};

export type UpdateCourseRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCourseRequirementError =
  UpdateCourseRequirementErrors[keyof UpdateCourseRequirementErrors];

export type UpdateCourseRequirementResponses = {
  /**
   * OK
   */
  200: ApiResponseCourseRequirement;
};

export type UpdateCourseRequirementResponse =
  UpdateCourseRequirementResponses[keyof UpdateCourseRequirementResponses];

export type DeleteCourseLessonData = {
  body?: never;
  path: {
    courseUuid: string;
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}';
};

export type DeleteCourseLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCourseLessonError = DeleteCourseLessonErrors[keyof DeleteCourseLessonErrors];

export type DeleteCourseLessonResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetCourseLessonData = {
  body?: never;
  path: {
    /**
     * UUID of the course containing the lesson
     */
    courseUuid: string;
    /**
     * UUID of the lesson to retrieve
     */
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}';
};

export type GetCourseLessonErrors = {
  /**
   * Invalid UUID format provided
   */
  400: ApiResponse;
  /**
   * Access denied - insufficient permissions to view lesson details
   */
  403: ApiResponse;
  /**
   * Lesson not found or does not belong to the specified course
   */
  404: ApiResponse;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseLessonError = GetCourseLessonErrors[keyof GetCourseLessonErrors];

export type GetCourseLessonResponses = {
  /**
   * Lesson retrieved successfully
   */
  200: Lesson;
};

export type GetCourseLessonResponse = GetCourseLessonResponses[keyof GetCourseLessonResponses];

export type UpdateCourseLessonData = {
  body: Lesson;
  path: {
    courseUuid: string;
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}';
};

export type UpdateCourseLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCourseLessonError = UpdateCourseLessonErrors[keyof UpdateCourseLessonErrors];

export type UpdateCourseLessonResponses = {
  /**
   * OK
   */
  200: ApiResponseLesson;
};

export type UpdateCourseLessonResponse =
  UpdateCourseLessonResponses[keyof UpdateCourseLessonResponses];

export type DeleteLessonContentData = {
  body?: never;
  path: {
    courseUuid: string;
    lessonUuid: string;
    contentUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/{contentUuid}';
};

export type DeleteLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteLessonContentError = DeleteLessonContentErrors[keyof DeleteLessonContentErrors];

export type DeleteLessonContentResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateLessonContentData = {
  body: LessonContent;
  path: {
    courseUuid: string;
    lessonUuid: string;
    contentUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/{contentUuid}';
};

export type UpdateLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateLessonContentError = UpdateLessonContentErrors[keyof UpdateLessonContentErrors];

export type UpdateLessonContentResponses = {
  /**
   * OK
   */
  200: ApiResponseLessonContent;
};

export type UpdateLessonContentResponse =
  UpdateLessonContentResponses[keyof UpdateLessonContentResponses];

export type DeleteCourseAssessmentData = {
  body?: never;
  path: {
    courseUuid: string;
    assessmentUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/assessments/{assessmentUuid}';
};

export type DeleteCourseAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCourseAssessmentError =
  DeleteCourseAssessmentErrors[keyof DeleteCourseAssessmentErrors];

export type DeleteCourseAssessmentResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateCourseAssessmentData = {
  body: CourseAssessment;
  path: {
    courseUuid: string;
    assessmentUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/assessments/{assessmentUuid}';
};

export type UpdateCourseAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCourseAssessmentError =
  UpdateCourseAssessmentErrors[keyof UpdateCourseAssessmentErrors];

export type UpdateCourseAssessmentResponses = {
  /**
   * OK
   */
  200: ApiResponseCourseAssessment;
};

export type UpdateCourseAssessmentResponse =
  UpdateCourseAssessmentResponses[keyof UpdateCourseAssessmentResponses];

export type DeleteGradingLevelData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/grading-levels/{uuid}';
};

export type DeleteGradingLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteGradingLevelError = DeleteGradingLevelErrors[keyof DeleteGradingLevelErrors];

export type DeleteGradingLevelResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateGradingLevelData = {
  body: GradingLevel;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/grading-levels/{uuid}';
};

export type UpdateGradingLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateGradingLevelError = UpdateGradingLevelErrors[keyof UpdateGradingLevelErrors];

export type UpdateGradingLevelResponses = {
  /**
   * OK
   */
  200: ApiResponseGradingLevel;
};

export type UpdateGradingLevelResponse =
  UpdateGradingLevelResponses[keyof UpdateGradingLevelResponses];

export type DeleteDifficultyLevelData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/difficulty-levels/{uuid}';
};

export type DeleteDifficultyLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteDifficultyLevelError =
  DeleteDifficultyLevelErrors[keyof DeleteDifficultyLevelErrors];

export type DeleteDifficultyLevelResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type DeleteDifficultyLevelResponse =
  DeleteDifficultyLevelResponses[keyof DeleteDifficultyLevelResponses];

export type UpdateDifficultyLevelData = {
  body: DifficultyLevel;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/difficulty-levels/{uuid}';
};

export type UpdateDifficultyLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateDifficultyLevelError =
  UpdateDifficultyLevelErrors[keyof UpdateDifficultyLevelErrors];

export type UpdateDifficultyLevelResponses = {
  /**
   * OK
   */
  200: ApiResponseDifficultyLevel;
};

export type UpdateDifficultyLevelResponse =
  UpdateDifficultyLevelResponses[keyof UpdateDifficultyLevelResponses];

export type DeleteContentTypeData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/content-types/{uuid}';
};

export type DeleteContentTypeErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteContentTypeError = DeleteContentTypeErrors[keyof DeleteContentTypeErrors];

export type DeleteContentTypeResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type DeleteContentTypeResponse =
  DeleteContentTypeResponses[keyof DeleteContentTypeResponses];

export type UpdateContentTypeData = {
  body: ContentType;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/content-types/{uuid}';
};

export type UpdateContentTypeErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateContentTypeError = UpdateContentTypeErrors[keyof UpdateContentTypeErrors];

export type UpdateContentTypeResponses = {
  /**
   * OK
   */
  200: ApiResponseContentType;
};

export type UpdateContentTypeResponse =
  UpdateContentTypeResponses[keyof UpdateContentTypeResponses];

export type DeleteCategoryData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/categories/{uuid}';
};

export type DeleteCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCategoryError = DeleteCategoryErrors[keyof DeleteCategoryErrors];

export type DeleteCategoryResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type DeleteCategoryResponse = DeleteCategoryResponses[keyof DeleteCategoryResponses];

export type GetCategoryByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/categories/{uuid}';
};

export type GetCategoryByUuidErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCategoryByUuidError = GetCategoryByUuidErrors[keyof GetCategoryByUuidErrors];

export type GetCategoryByUuidResponses = {
  /**
   * OK
   */
  200: ApiResponseCategory;
};

export type GetCategoryByUuidResponse =
  GetCategoryByUuidResponses[keyof GetCategoryByUuidResponses];

export type UpdateCategoryData = {
  body: Category;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/config/categories/{uuid}';
};

export type UpdateCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCategoryError = UpdateCategoryErrors[keyof UpdateCategoryErrors];

export type UpdateCategoryResponses = {
  /**
   * OK
   */
  200: ApiResponseCategory;
};

export type UpdateCategoryResponse = UpdateCategoryResponses[keyof UpdateCategoryResponses];

export type DeleteCertificateData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/{uuid}';
};

export type DeleteCertificateErrors = {
  /**
   * Certificate not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCertificateError = DeleteCertificateErrors[keyof DeleteCertificateErrors];

export type DeleteCertificateResponses = {
  /**
   * Certificate deleted successfully
   */
  204: void;
};

export type DeleteCertificateResponse =
  DeleteCertificateResponses[keyof DeleteCertificateResponses];

export type GetCertificateByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/{uuid}';
};

export type GetCertificateByUuidErrors = {
  /**
   * Certificate not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCertificateByUuidError =
  GetCertificateByUuidErrors[keyof GetCertificateByUuidErrors];

export type GetCertificateByUuidResponses = {
  /**
   * Certificate found
   */
  200: ApiResponseCertificate;
};

export type GetCertificateByUuidResponse =
  GetCertificateByUuidResponses[keyof GetCertificateByUuidResponses];

export type UpdateCertificateData = {
  body: Certificate;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/{uuid}';
};

export type UpdateCertificateErrors = {
  /**
   * Certificate not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCertificateError = UpdateCertificateErrors[keyof UpdateCertificateErrors];

export type UpdateCertificateResponses = {
  /**
   * Certificate updated successfully
   */
  200: ApiResponseCertificate;
};

export type UpdateCertificateResponse =
  UpdateCertificateResponses[keyof UpdateCertificateResponses];

export type DeleteCertificateTemplateData = {
  body?: never;
  path: {
    templateUuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/templates/{templateUuid}';
};

export type DeleteCertificateTemplateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteCertificateTemplateError =
  DeleteCertificateTemplateErrors[keyof DeleteCertificateTemplateErrors];

export type DeleteCertificateTemplateResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UpdateCertificateTemplateData = {
  body: CertificateTemplate;
  path: {
    templateUuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/templates/{templateUuid}';
};

export type UpdateCertificateTemplateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateCertificateTemplateError =
  UpdateCertificateTemplateErrors[keyof UpdateCertificateTemplateErrors];

export type UpdateCertificateTemplateResponses = {
  /**
   * OK
   */
  200: ApiResponseCertificateTemplate;
};

export type UpdateCertificateTemplateResponse =
  UpdateCertificateTemplateResponses[keyof UpdateCertificateTemplateResponses];

export type DeleteAssignmentData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{uuid}';
};

export type DeleteAssignmentErrors = {
  /**
   * Assignment not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeleteAssignmentError = DeleteAssignmentErrors[keyof DeleteAssignmentErrors];

export type DeleteAssignmentResponses = {
  /**
   * Assignment deleted successfully
   */
  204: void;
};

export type DeleteAssignmentResponse = DeleteAssignmentResponses[keyof DeleteAssignmentResponses];

export type GetAssignmentByUuidData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{uuid}';
};

export type GetAssignmentByUuidErrors = {
  /**
   * Assignment not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAssignmentByUuidError = GetAssignmentByUuidErrors[keyof GetAssignmentByUuidErrors];

export type GetAssignmentByUuidResponses = {
  /**
   * Assignment found
   */
  200: ApiResponseAssignment;
};

export type GetAssignmentByUuidResponse =
  GetAssignmentByUuidResponses[keyof GetAssignmentByUuidResponses];

export type UpdateAssignmentData = {
  body: Assignment;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{uuid}';
};

export type UpdateAssignmentErrors = {
  /**
   * Assignment not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UpdateAssignmentError = UpdateAssignmentErrors[keyof UpdateAssignmentErrors];

export type UpdateAssignmentResponses = {
  /**
   * Assignment updated successfully
   */
  200: ApiResponseAssignment;
};

export type UpdateAssignmentResponse = UpdateAssignmentResponses[keyof UpdateAssignmentResponses];

export type DeclineInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the user who is declining the invitation. The user's email must match the invitation recipient email for security.
     */
    uuid: string;
  };
  query: {
    /**
     * Unique invitation token from the invitation email URL. This is the 64-character token that identifies the specific invitation.
     */
    token: string;
  };
  url: '/api/v1/users/{uuid}/invitations/decline';
};

export type DeclineInvitationErrors = {
  /**
   * Invalid token, expired invitation, or user email mismatch
   */
  400: ApiResponseVoid;
  /**
   * Invitation token not found or user not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type DeclineInvitationError = DeclineInvitationErrors[keyof DeclineInvitationErrors];

export type DeclineInvitationResponses = {
  /**
   * Invitation declined successfully, notifications sent to inviter
   */
  200: ApiResponseVoid;
};

export type DeclineInvitationResponse =
  DeclineInvitationResponses[keyof DeclineInvitationResponses];

export type AcceptInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the user who is accepting the invitation. The user's email must match the invitation recipient email for security.
     */
    uuid: string;
  };
  query: {
    /**
     * Unique invitation token from the invitation email URL. This is the 64-character token that identifies the specific invitation.
     */
    token: string;
  };
  url: '/api/v1/users/{uuid}/invitations/accept';
};

export type AcceptInvitationErrors = {
  /**
   * Invalid token, expired invitation, user email mismatch, or user already member of organization
   */
  400: ApiResponseUser;
  /**
   * Invitation token not found or user not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AcceptInvitationError = AcceptInvitationErrors[keyof AcceptInvitationErrors];

export type AcceptInvitationResponses = {
  /**
   * Invitation accepted successfully, user added to organization/branch with specified role
   */
  200: ApiResponseUser;
};

export type AcceptInvitationResponse = AcceptInvitationResponses[keyof AcceptInvitationResponses];

export type UploadProfileImageData = {
  body?: never;
  path: {
    /**
     * UUID of the user
     */
    userUuid: string;
  };
  query?: never;
  url: '/api/v1/users/{userUuid}/profile-image';
};

export type UploadProfileImageErrors = {
  /**
   * Invalid input data
   */
  400: User;
  /**
   * User not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UploadProfileImageError = UploadProfileImageErrors[keyof UploadProfileImageErrors];

export type UploadProfileImageResponses = {
  /**
   * Profile Image Uploaded successfully
   */
  200: User;
};

export type UploadProfileImageResponse =
  UploadProfileImageResponses[keyof UploadProfileImageResponses];

export type GetAllTrainingBranchesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/training-branches';
};

export type GetAllTrainingBranchesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllTrainingBranchesError =
  GetAllTrainingBranchesErrors[keyof GetAllTrainingBranchesErrors];

export type GetAllTrainingBranchesResponses = {
  /**
   * Training branches retrieved successfully
   */
  200: ApiResponsePagedDtoTrainingBranch;
};

export type GetAllTrainingBranchesResponse =
  GetAllTrainingBranchesResponses[keyof GetAllTrainingBranchesResponses];

export type CreateTrainingBranchData = {
  body: TrainingBranch;
  path?: never;
  query?: never;
  url: '/api/v1/training-branches';
};

export type CreateTrainingBranchErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseTrainingBranch;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateTrainingBranchError =
  CreateTrainingBranchErrors[keyof CreateTrainingBranchErrors];

export type CreateTrainingBranchResponses = {
  /**
   * Training branch created successfully
   */
  201: ApiResponseTrainingBranch;
};

export type CreateTrainingBranchResponse =
  CreateTrainingBranchResponses[keyof CreateTrainingBranchResponses];

export type GetAllStudentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/students';
};

export type GetAllStudentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllStudentsError = GetAllStudentsErrors[keyof GetAllStudentsErrors];

export type GetAllStudentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoStudent;
};

export type GetAllStudentsResponse = GetAllStudentsResponses[keyof GetAllStudentsResponses];

export type CreateStudentData = {
  body: Student;
  path?: never;
  query?: never;
  url: '/api/v1/students';
};

export type CreateStudentErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseStudent;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateStudentError = CreateStudentErrors[keyof CreateStudentErrors];

export type CreateStudentResponses = {
  /**
   * Student created successfully
   */
  201: Student;
};

export type CreateStudentResponse = CreateStudentResponses[keyof CreateStudentResponses];

export type GetAllQuizzesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes';
};

export type GetAllQuizzesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllQuizzesError = GetAllQuizzesErrors[keyof GetAllQuizzesErrors];

export type GetAllQuizzesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuiz;
};

export type GetAllQuizzesResponse = GetAllQuizzesResponses[keyof GetAllQuizzesResponses];

export type CreateQuizData = {
  body: Quiz;
  path?: never;
  query?: never;
  url: '/api/v1/quizzes';
};

export type CreateQuizErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseQuiz;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateQuizError = CreateQuizErrors[keyof CreateQuizErrors];

export type CreateQuizResponses = {
  /**
   * Quiz created successfully
   */
  201: Quiz;
};

export type CreateQuizResponse = CreateQuizResponses[keyof CreateQuizResponses];

export type GetQuizQuestionsData = {
  body?: never;
  path: {
    quizUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions';
};

export type GetQuizQuestionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuizQuestionsError = GetQuizQuestionsErrors[keyof GetQuizQuestionsErrors];

export type GetQuizQuestionsResponses = {
  /**
   * OK
   */
  200: ApiResponseListQuizQuestion;
};

export type GetQuizQuestionsResponse = GetQuizQuestionsResponses[keyof GetQuizQuestionsResponses];

export type AddQuizQuestionData = {
  body: QuizQuestion;
  path: {
    quizUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions';
};

export type AddQuizQuestionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddQuizQuestionError = AddQuizQuestionErrors[keyof AddQuizQuestionErrors];

export type AddQuizQuestionResponses = {
  /**
   * OK
   */
  200: ApiResponseQuizQuestion;
};

export type AddQuizQuestionResponse = AddQuizQuestionResponses[keyof AddQuizQuestionResponses];

export type GetQuestionOptionsData = {
  body?: never;
  path: {
    quizUuid: string;
    questionUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options';
};

export type GetQuestionOptionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuestionOptionsError = GetQuestionOptionsErrors[keyof GetQuestionOptionsErrors];

export type GetQuestionOptionsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuizQuestionOption;
};

export type GetQuestionOptionsResponse =
  GetQuestionOptionsResponses[keyof GetQuestionOptionsResponses];

export type AddQuestionOptionData = {
  body: QuizQuestionOption;
  path: {
    quizUuid: string;
    questionUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/{questionUuid}/options';
};

export type AddQuestionOptionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddQuestionOptionError = AddQuestionOptionErrors[keyof AddQuestionOptionErrors];

export type AddQuestionOptionResponses = {
  /**
   * OK
   */
  200: ApiResponseQuizQuestionOption;
};

export type AddQuestionOptionResponse =
  AddQuestionOptionResponses[keyof AddQuestionOptionResponses];

export type ReorderQuizQuestionsData = {
  body: Array<string>;
  path: {
    quizUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/questions/reorder';
};

export type ReorderQuizQuestionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ReorderQuizQuestionsError =
  ReorderQuizQuestionsErrors[keyof ReorderQuizQuestionsErrors];

export type ReorderQuizQuestionsResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type ReorderQuizQuestionsResponse =
  ReorderQuizQuestionsResponses[keyof ReorderQuizQuestionsResponses];

export type GetAllTrainingProgramsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs';
};

export type GetAllTrainingProgramsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllTrainingProgramsError =
  GetAllTrainingProgramsErrors[keyof GetAllTrainingProgramsErrors];

export type GetAllTrainingProgramsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type CreateTrainingProgramData = {
  body: unknown;
  path?: never;
  query?: never;
  url: '/api/v1/programs';
};

export type CreateTrainingProgramErrors = {
  /**
   * Invalid request data
   */
  400: unknown;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateTrainingProgramError =
  CreateTrainingProgramErrors[keyof CreateTrainingProgramErrors];

export type CreateTrainingProgramResponses = {
  /**
   * Program created successfully
   */
  201: string;
};

export type CreateTrainingProgramResponse =
  CreateTrainingProgramResponses[keyof CreateTrainingProgramResponses];

export type PublishProgramData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{uuid}/publish';
};

export type PublishProgramErrors = {
  /**
   * Program not ready for publishing
   */
  400: unknown;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type PublishProgramError = PublishProgramErrors[keyof PublishProgramErrors];

export type PublishProgramResponses = {
  /**
   * Program published successfully
   */
  200: unknown;
};

export type GetProgramRequirementsData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/{programUuid}/requirements';
};

export type GetProgramRequirementsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramRequirementsError =
  GetProgramRequirementsErrors[keyof GetProgramRequirementsErrors];

export type GetProgramRequirementsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoProgramRequirement;
};

export type GetProgramRequirementsResponse =
  GetProgramRequirementsResponses[keyof GetProgramRequirementsResponses];

export type AddProgramRequirementData = {
  body: ProgramRequirement;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/requirements';
};

export type AddProgramRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddProgramRequirementError =
  AddProgramRequirementErrors[keyof AddProgramRequirementErrors];

export type AddProgramRequirementResponses = {
  /**
   * OK
   */
  200: ApiResponseProgramRequirement;
};

export type AddProgramRequirementResponse =
  AddProgramRequirementResponses[keyof AddProgramRequirementResponses];

export type GetProgramCoursesData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses';
};

export type GetProgramCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramCoursesError = GetProgramCoursesErrors[keyof GetProgramCoursesErrors];

export type GetProgramCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCourse;
};

export type GetProgramCoursesResponse =
  GetProgramCoursesResponses[keyof GetProgramCoursesResponses];

export type AddProgramCourseData = {
  body: ProgramCourse;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses';
};

export type AddProgramCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddProgramCourseError = AddProgramCourseErrors[keyof AddProgramCourseErrors];

export type AddProgramCourseResponses = {
  /**
   * OK
   */
  200: ApiResponseProgramCourse;
};

export type AddProgramCourseResponse = AddProgramCourseResponses[keyof AddProgramCourseResponses];

export type GetAllOrganisationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/organisations';
};

export type GetAllOrganisationsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllOrganisationsError = GetAllOrganisationsErrors[keyof GetAllOrganisationsErrors];

export type GetAllOrganisationsResponses = {
  /**
   * Organisations retrieved successfully
   */
  200: ApiResponsePagedDtoOrganisation;
};

export type GetAllOrganisationsResponse =
  GetAllOrganisationsResponses[keyof GetAllOrganisationsResponses];

export type CreateOrganisationData = {
  body: Organisation;
  path?: never;
  query?: never;
  url: '/api/v1/organisations';
};

export type CreateOrganisationErrors = {
  /**
   * Invalid input data
   */
  400: ApiResponseOrganisation;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateOrganisationError = CreateOrganisationErrors[keyof CreateOrganisationErrors];

export type CreateOrganisationResponses = {
  /**
   * Organisation created successfully
   */
  201: ApiResponseOrganisation;
};

export type CreateOrganisationResponse =
  CreateOrganisationResponses[keyof CreateOrganisationResponses];

export type GetTrainingBranchesByOrganisationData = {
  body?: never;
  path: {
    /**
     * UUID of the organisation to get training branches for. Must be an existing organisation identifier.
     */
    uuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/organisations/{uuid}/training-branches';
};

export type GetTrainingBranchesByOrganisationErrors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetTrainingBranchesByOrganisationError =
  GetTrainingBranchesByOrganisationErrors[keyof GetTrainingBranchesByOrganisationErrors];

export type GetTrainingBranchesByOrganisationResponses = {
  /**
   * Training branches retrieved successfully
   */
  200: ApiResponsePagedDtoTrainingBranch;
};

export type GetTrainingBranchesByOrganisationResponse =
  GetTrainingBranchesByOrganisationResponses[keyof GetTrainingBranchesByOrganisationResponses];

export type CreateTrainingBranch1Data = {
  body: TrainingBranch;
  path: {
    /**
     * UUID of the organization to create the training branch in. Must be an existing organization.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches';
};

export type CreateTrainingBranch1Errors = {
  /**
   * Invalid input data
   */
  400: ApiResponseTrainingBranch;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateTrainingBranch1Error =
  CreateTrainingBranch1Errors[keyof CreateTrainingBranch1Errors];

export type CreateTrainingBranch1Responses = {
  /**
   * Training branch created successfully
   */
  201: ApiResponseTrainingBranch;
};

export type CreateTrainingBranch1Response =
  CreateTrainingBranch1Responses[keyof CreateTrainingBranch1Responses];

export type RemoveUserFromBranchData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to remove the user from. Must be a branch within the specified organization.
     */
    branchUuid: string;
    /**
     * UUID of the user to remove from the training branch. Must be currently assigned to the branch.
     */
    userUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/{userUuid}';
};

export type RemoveUserFromBranchErrors = {
  /**
   * Training branch or user not found, or user not assigned to branch
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type RemoveUserFromBranchError =
  RemoveUserFromBranchErrors[keyof RemoveUserFromBranchErrors];

export type RemoveUserFromBranchResponses = {
  /**
   * User removed from branch successfully
   */
  200: ApiResponseVoid;
};

export type RemoveUserFromBranchResponse =
  RemoveUserFromBranchResponses[keyof RemoveUserFromBranchResponses];

export type AssignUserToBranchData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to assign the user to. Must be a branch within the specified organization.
     */
    branchUuid: string;
    /**
     * UUID of the user to assign to the training branch. Must be an existing user.
     */
    userUuid: string;
  };
  query: {
    /**
     * Role/domain name for the user in this branch. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
     */
    domain_name: string;
  };
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/{userUuid}';
};

export type AssignUserToBranchErrors = {
  /**
   * Invalid domain name
   */
  400: ApiResponseVoid;
  /**
   * Training branch or user not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AssignUserToBranchError = AssignUserToBranchErrors[keyof AssignUserToBranchErrors];

export type AssignUserToBranchResponses = {
  /**
   * User assigned to branch successfully
   */
  200: ApiResponseVoid;
};

export type AssignUserToBranchResponse =
  AssignUserToBranchResponses[keyof AssignUserToBranchResponses];

export type GetBranchInvitationsData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to retrieve invitations for. Must be a branch within the specified organization.
     */
    branchUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/invitations';
};

export type GetBranchInvitationsErrors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetBranchInvitationsError =
  GetBranchInvitationsErrors[keyof GetBranchInvitationsErrors];

export type GetBranchInvitationsResponses = {
  /**
   * Branch invitations retrieved successfully (may be empty list)
   */
  200: ApiResponseListInvitation;
};

export type GetBranchInvitationsResponse =
  GetBranchInvitationsResponses[keyof GetBranchInvitationsResponses];

export type CreateBranchInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch the user is being invited to join. Must be a branch within the specified organization.
     */
    branchUuid: string;
  };
  query: {
    /**
     * Email address of the person being invited to the training branch. Must be a valid email format.
     */
    recipient_email: string;
    /**
     * Full name of the person being invited to the training branch. Used in email templates and records.
     */
    recipient_name: string;
    /**
     * Role/domain name being offered to the recipient within the training branch. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
     */
    domain_name: string;
    /**
     * UUID of the user who is sending this branch invitation. Must be an existing user with appropriate permissions.
     */
    inviter_uuid: string;
    /**
     * Optional personal message or notes to include with the branch invitation email. Maximum 500 characters.
     */
    notes?: string;
  };
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/invitations';
};

export type CreateBranchInvitationErrors = {
  /**
   * Invalid input data: duplicate invitation, invalid domain, or invalid branch
   */
  400: ApiResponseInvitation;
  /**
   * Training branch, inviter user not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateBranchInvitationError =
  CreateBranchInvitationErrors[keyof CreateBranchInvitationErrors];

export type CreateBranchInvitationResponses = {
  /**
   * Branch invitation created and email sent successfully
   */
  201: ApiResponseInvitation;
};

export type CreateBranchInvitationResponse =
  CreateBranchInvitationResponses[keyof CreateBranchInvitationResponses];

export type GetOrganizationInvitationsData = {
  body?: never;
  path: {
    /**
     * UUID of the organization to retrieve invitations for. Must be an existing organization.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/invitations';
};

export type GetOrganizationInvitationsErrors = {
  /**
   * Organization not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetOrganizationInvitationsError =
  GetOrganizationInvitationsErrors[keyof GetOrganizationInvitationsErrors];

export type GetOrganizationInvitationsResponses = {
  /**
   * Organization invitations retrieved successfully (may be empty list)
   */
  200: ApiResponseListInvitation;
};

export type GetOrganizationInvitationsResponse =
  GetOrganizationInvitationsResponses[keyof GetOrganizationInvitationsResponses];

export type CreateOrganizationInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the organization the user is being invited to join. Must be an existing, active organization.
     */
    uuid: string;
  };
  query: {
    /**
     * Email address of the person being invited. Must be a valid email format.
     */
    recipient_email: string;
    /**
     * Full name of the person being invited. Used in email templates and invitation records.
     */
    recipient_name: string;
    /**
     * Role/domain name being offered to the recipient. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
     */
    domain_name: string;
    /**
     * Optional UUID of a training branch within the organization. If provided, the invitation will be branch-specific. Must belong to the specified organization.
     */
    branch_uuid?: string;
    /**
     * UUID of the user who is sending this invitation. Must be an existing user with appropriate permissions in the organization.
     */
    inviter_uuid: string;
    /**
     * Optional personal message or notes to include with the invitation email. Maximum 500 characters.
     */
    notes?: string;
  };
  url: '/api/v1/organisations/{uuid}/invitations';
};

export type CreateOrganizationInvitationErrors = {
  /**
   * Invalid input data: duplicate invitation, invalid domain, or branch doesn't belong to organization
   */
  400: ApiResponseInvitation;
  /**
   * Organization, inviter user, or training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateOrganizationInvitationError =
  CreateOrganizationInvitationErrors[keyof CreateOrganizationInvitationErrors];

export type CreateOrganizationInvitationResponses = {
  /**
   * Invitation created and email sent successfully
   */
  201: ApiResponseInvitation;
};

export type CreateOrganizationInvitationResponse =
  CreateOrganizationInvitationResponses[keyof CreateOrganizationInvitationResponses];

export type ResendInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the invitation. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the invitation to resend. Must be a pending invitation that hasn't been accepted, declined, or cancelled.
     */
    invitationUuid: string;
  };
  query: {
    /**
     * UUID of the user requesting to resend the invitation. Must be either the original inviter or an administrator of the organization.
     */
    resender_uuid: string;
  };
  url: '/api/v1/organisations/{uuid}/invitations/{invitationUuid}/resend';
};

export type ResendInvitationErrors = {
  /**
   * Invitation is not pending, or user lacks permission to resend
   */
  400: ApiResponseVoid;
  /**
   * Invitation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ResendInvitationError = ResendInvitationErrors[keyof ResendInvitationErrors];

export type ResendInvitationResponses = {
  /**
   * Invitation email resent successfully with updated expiry date
   */
  200: ApiResponseVoid;
};

export type ResendInvitationResponse = ResendInvitationResponses[keyof ResendInvitationResponses];

export type SendExpiryRemindersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Number of hours before expiry to send reminder. Default is 24 hours.
     */
    hoursBeforeExpiry?: number;
  };
  url: '/api/v1/invitations/maintenance/send-reminders';
};

export type SendExpiryRemindersErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SendExpiryRemindersError = SendExpiryRemindersErrors[keyof SendExpiryRemindersErrors];

export type SendExpiryRemindersResponses = {
  /**
   * Expiry reminders sent successfully
   */
  200: ApiResponseInteger;
};

export type SendExpiryRemindersResponse =
  SendExpiryRemindersResponses[keyof SendExpiryRemindersResponses];

export type MarkExpiredInvitationsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/invitations/maintenance/mark-expired';
};

export type MarkExpiredInvitationsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type MarkExpiredInvitationsError =
  MarkExpiredInvitationsErrors[keyof MarkExpiredInvitationsErrors];

export type MarkExpiredInvitationsResponses = {
  /**
   * Expired invitations marked successfully
   */
  200: ApiResponseInteger;
};

export type MarkExpiredInvitationsResponse =
  MarkExpiredInvitationsResponses[keyof MarkExpiredInvitationsResponses];

export type GetAllInstructorsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors';
};

export type GetAllInstructorsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllInstructorsError = GetAllInstructorsErrors[keyof GetAllInstructorsErrors];

export type GetAllInstructorsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructor;
};

export type GetAllInstructorsResponse =
  GetAllInstructorsResponses[keyof GetAllInstructorsResponses];

export type CreateInstructorData = {
  body: Instructor;
  path?: never;
  query?: never;
  url: '/api/v1/instructors';
};

export type CreateInstructorErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseInstructor;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateInstructorError = CreateInstructorErrors[keyof CreateInstructorErrors];

export type CreateInstructorResponses = {
  /**
   * Instructor created successfully
   */
  201: Instructor;
};

export type CreateInstructorResponse = CreateInstructorResponses[keyof CreateInstructorResponses];

export type GetInstructorSkillsData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/{instructorUuid}/skills';
};

export type GetInstructorSkillsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorSkillsError = GetInstructorSkillsErrors[keyof GetInstructorSkillsErrors];

export type GetInstructorSkillsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorSkill;
};

export type GetInstructorSkillsResponse =
  GetInstructorSkillsResponses[keyof GetInstructorSkillsResponses];

export type AddInstructorSkillData = {
  body: InstructorSkill;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/skills';
};

export type AddInstructorSkillErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddInstructorSkillError = AddInstructorSkillErrors[keyof AddInstructorSkillErrors];

export type AddInstructorSkillResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorSkill;
};

export type AddInstructorSkillResponse =
  AddInstructorSkillResponses[keyof AddInstructorSkillResponses];

export type GetInstructorMembershipsData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/{instructorUuid}/memberships';
};

export type GetInstructorMembershipsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorMembershipsError =
  GetInstructorMembershipsErrors[keyof GetInstructorMembershipsErrors];

export type GetInstructorMembershipsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorProfessionalMembership;
};

export type GetInstructorMembershipsResponse =
  GetInstructorMembershipsResponses[keyof GetInstructorMembershipsResponses];

export type AddInstructorMembershipData = {
  body: InstructorProfessionalMembership;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/memberships';
};

export type AddInstructorMembershipErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddInstructorMembershipError =
  AddInstructorMembershipErrors[keyof AddInstructorMembershipErrors];

export type AddInstructorMembershipResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorProfessionalMembership;
};

export type AddInstructorMembershipResponse =
  AddInstructorMembershipResponses[keyof AddInstructorMembershipResponses];

export type GetInstructorExperienceData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/{instructorUuid}/experience';
};

export type GetInstructorExperienceErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorExperienceError =
  GetInstructorExperienceErrors[keyof GetInstructorExperienceErrors];

export type GetInstructorExperienceResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorExperience;
};

export type GetInstructorExperienceResponse =
  GetInstructorExperienceResponses[keyof GetInstructorExperienceResponses];

export type AddInstructorExperienceData = {
  body: InstructorExperience;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/experience';
};

export type AddInstructorExperienceErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddInstructorExperienceError =
  AddInstructorExperienceErrors[keyof AddInstructorExperienceErrors];

export type AddInstructorExperienceResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorExperience;
};

export type AddInstructorExperienceResponse =
  AddInstructorExperienceResponses[keyof AddInstructorExperienceResponses];

export type GetInstructorEducationData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/education';
};

export type GetInstructorEducationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorEducationError =
  GetInstructorEducationErrors[keyof GetInstructorEducationErrors];

export type GetInstructorEducationResponses = {
  /**
   * OK
   */
  200: ApiResponseListInstructorEducation;
};

export type GetInstructorEducationResponse =
  GetInstructorEducationResponses[keyof GetInstructorEducationResponses];

export type AddInstructorEducationData = {
  body: InstructorEducation;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/education';
};

export type AddInstructorEducationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddInstructorEducationError =
  AddInstructorEducationErrors[keyof AddInstructorEducationErrors];

export type AddInstructorEducationResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorEducation;
};

export type AddInstructorEducationResponse =
  AddInstructorEducationResponses[keyof AddInstructorEducationResponses];

export type GetInstructorDocumentsData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/documents';
};

export type GetInstructorDocumentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInstructorDocumentsError =
  GetInstructorDocumentsErrors[keyof GetInstructorDocumentsErrors];

export type GetInstructorDocumentsResponses = {
  /**
   * OK
   */
  200: ApiResponseListInstructorDocument;
};

export type GetInstructorDocumentsResponse =
  GetInstructorDocumentsResponses[keyof GetInstructorDocumentsResponses];

export type AddInstructorDocumentData = {
  body: InstructorDocument;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/instructors/{instructorUuid}/documents';
};

export type AddInstructorDocumentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddInstructorDocumentError =
  AddInstructorDocumentErrors[keyof AddInstructorDocumentErrors];

export type AddInstructorDocumentResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorDocument;
};

export type AddInstructorDocumentResponse =
  AddInstructorDocumentResponses[keyof AddInstructorDocumentResponses];

export type VerifyDocumentData = {
  body?: never;
  path: {
    instructorUuid: string;
    documentUuid: string;
  };
  query: {
    verifiedBy: string;
    verificationNotes?: string;
  };
  url: '/api/v1/instructors/{instructorUuid}/documents/{documentUuid}/verify';
};

export type VerifyDocumentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type VerifyDocumentError = VerifyDocumentErrors[keyof VerifyDocumentErrors];

export type VerifyDocumentResponses = {
  /**
   * OK
   */
  200: ApiResponseInstructorDocument;
};

export type VerifyDocumentResponse = VerifyDocumentResponses[keyof VerifyDocumentResponses];

export type GetAllCoursesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses';
};

export type GetAllCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllCoursesError = GetAllCoursesErrors[keyof GetAllCoursesErrors];

export type GetAllCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type GetAllCoursesResponse = GetAllCoursesResponses[keyof GetAllCoursesResponses];

export type CreateCourseData = {
  body: Course;
  path?: never;
  query?: never;
  url: '/api/v1/courses';
};

export type CreateCourseErrors = {
  /**
   * Invalid request data or category not found
   */
  400: ApiResponseCourse;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateCourseError = CreateCourseErrors[keyof CreateCourseErrors];

export type CreateCourseResponses = {
  /**
   * Course created successfully
   */
  201: Course;
};

export type CreateCourseResponse = CreateCourseResponses[keyof CreateCourseResponses];

export type UnpublishCourseData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/unpublish';
};

export type UnpublishCourseErrors = {
  /**
   * Course not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UnpublishCourseError = UnpublishCourseErrors[keyof UnpublishCourseErrors];

export type UnpublishCourseResponses = {
  /**
   * Course unpublished successfully
   */
  200: ApiResponseCourse;
};

export type UnpublishCourseResponse = UnpublishCourseResponses[keyof UnpublishCourseResponses];

export type UploadCourseThumbnailData = {
  body?: never;
  path: {
    /**
     * UUID of the course to upload thumbnail for. Must be an existing course identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/thumbnail';
};

export type UploadCourseThumbnailErrors = {
  /**
   * Invalid file format or size exceeds limit
   */
  400: ApiResponse;
  /**
   * Course not found
   */
  404: ApiResponse;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UploadCourseThumbnailError =
  UploadCourseThumbnailErrors[keyof UploadCourseThumbnailErrors];

export type UploadCourseThumbnailResponses = {
  /**
   * Thumbnail uploaded successfully
   */
  200: Course;
};

export type UploadCourseThumbnailResponse =
  UploadCourseThumbnailResponses[keyof UploadCourseThumbnailResponses];

export type PublishCourseData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/publish';
};

export type PublishCourseErrors = {
  /**
   * Course not ready for publishing
   */
  400: ApiResponseCourse;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type PublishCourseError = PublishCourseErrors[keyof PublishCourseErrors];

export type PublishCourseResponses = {
  /**
   * Course published successfully
   */
  200: ApiResponseCourse;
};

export type PublishCourseResponse = PublishCourseResponses[keyof PublishCourseResponses];

export type UploadCourseIntroVideoData = {
  body?: never;
  path: {
    /**
     * UUID of the course to upload intro video for. Must be an existing course identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/intro-video';
};

export type UploadCourseIntroVideoErrors = {
  /**
   * Invalid file format or size exceeds limit
   */
  400: ApiResponse;
  /**
   * Course not found
   */
  404: ApiResponse;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UploadCourseIntroVideoError =
  UploadCourseIntroVideoErrors[keyof UploadCourseIntroVideoErrors];

export type UploadCourseIntroVideoResponses = {
  /**
   * Introduction video uploaded successfully
   */
  200: Course;
};

export type UploadCourseIntroVideoResponse =
  UploadCourseIntroVideoResponses[keyof UploadCourseIntroVideoResponses];

export type UploadCourseBannerData = {
  body?: never;
  path: {
    /**
     * UUID of the course to upload banner for. Must be an existing course identifier.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/banner';
};

export type UploadCourseBannerErrors = {
  /**
   * Invalid file format or size exceeds limit
   */
  400: ApiResponse;
  /**
   * Course not found
   */
  404: ApiResponse;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type UploadCourseBannerError = UploadCourseBannerErrors[keyof UploadCourseBannerErrors];

export type UploadCourseBannerResponses = {
  /**
   * Banner uploaded successfully
   */
  200: Course;
};

export type UploadCourseBannerResponse =
  UploadCourseBannerResponses[keyof UploadCourseBannerResponses];

export type ArchiveCourseData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/archive';
};

export type ArchiveCourseErrors = {
  /**
   * Course not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ArchiveCourseError = ArchiveCourseErrors[keyof ArchiveCourseErrors];

export type ArchiveCourseResponses = {
  /**
   * Course archived successfully
   */
  200: ApiResponseCourse;
};

export type ArchiveCourseResponse = ArchiveCourseResponses[keyof ArchiveCourseResponses];

export type GetCourseRequirementsData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/{courseUuid}/requirements';
};

export type GetCourseRequirementsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseRequirementsError =
  GetCourseRequirementsErrors[keyof GetCourseRequirementsErrors];

export type GetCourseRequirementsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseRequirement;
};

export type GetCourseRequirementsResponse =
  GetCourseRequirementsResponses[keyof GetCourseRequirementsResponses];

export type AddCourseRequirementData = {
  body: CourseRequirement;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/requirements';
};

export type AddCourseRequirementErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddCourseRequirementError =
  AddCourseRequirementErrors[keyof AddCourseRequirementErrors];

export type AddCourseRequirementResponses = {
  /**
   * OK
   */
  200: ApiResponseCourseRequirement;
};

export type AddCourseRequirementResponse =
  AddCourseRequirementResponses[keyof AddCourseRequirementResponses];

export type GetCourseLessonsData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/{courseUuid}/lessons';
};

export type GetCourseLessonsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseLessonsError = GetCourseLessonsErrors[keyof GetCourseLessonsErrors];

export type GetCourseLessonsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoLesson;
};

export type GetCourseLessonsResponse = GetCourseLessonsResponses[keyof GetCourseLessonsResponses];

export type AddCourseLessonData = {
  body: Lesson;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons';
};

export type AddCourseLessonErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddCourseLessonError = AddCourseLessonErrors[keyof AddCourseLessonErrors];

export type AddCourseLessonResponses = {
  /**
   * OK
   */
  200: ApiResponseLesson;
};

export type AddCourseLessonResponse = AddCourseLessonResponses[keyof AddCourseLessonResponses];

export type GetLessonContentData = {
  body?: never;
  path: {
    courseUuid: string;
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content';
};

export type GetLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetLessonContentError = GetLessonContentErrors[keyof GetLessonContentErrors];

export type GetLessonContentResponses = {
  /**
   * OK
   */
  200: ApiResponseListLessonContent;
};

export type GetLessonContentResponse = GetLessonContentResponses[keyof GetLessonContentResponses];

export type AddLessonContentData = {
  body: LessonContent;
  path: {
    courseUuid: string;
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content';
};

export type AddLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddLessonContentError = AddLessonContentErrors[keyof AddLessonContentErrors];

export type AddLessonContentResponses = {
  /**
   * OK
   */
  200: ApiResponseLessonContent;
};

export type AddLessonContentResponse = AddLessonContentResponses[keyof AddLessonContentResponses];

export type ReorderLessonContentData = {
  body: Array<string>;
  path: {
    courseUuid: string;
    lessonUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/lessons/{lessonUuid}/content/reorder';
};

export type ReorderLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ReorderLessonContentError =
  ReorderLessonContentErrors[keyof ReorderLessonContentErrors];

export type ReorderLessonContentResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type ReorderLessonContentResponse =
  ReorderLessonContentResponses[keyof ReorderLessonContentResponses];

export type GetCourseAssessmentsData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/{courseUuid}/assessments';
};

export type GetCourseAssessmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseAssessmentsError =
  GetCourseAssessmentsErrors[keyof GetCourseAssessmentsErrors];

export type GetCourseAssessmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseAssessment;
};

export type GetCourseAssessmentsResponse =
  GetCourseAssessmentsResponses[keyof GetCourseAssessmentsResponses];

export type AddCourseAssessmentData = {
  body: CourseAssessment;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/assessments';
};

export type AddCourseAssessmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type AddCourseAssessmentError = AddCourseAssessmentErrors[keyof AddCourseAssessmentErrors];

export type AddCourseAssessmentResponses = {
  /**
   * OK
   */
  200: ApiResponseCourseAssessment;
};

export type AddCourseAssessmentResponse =
  AddCourseAssessmentResponses[keyof AddCourseAssessmentResponses];

export type GetAllGradingLevelsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/config/grading-levels';
};

export type GetAllGradingLevelsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllGradingLevelsError = GetAllGradingLevelsErrors[keyof GetAllGradingLevelsErrors];

export type GetAllGradingLevelsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoGradingLevel;
};

export type GetAllGradingLevelsResponse =
  GetAllGradingLevelsResponses[keyof GetAllGradingLevelsResponses];

export type CreateGradingLevelData = {
  body: GradingLevel;
  path?: never;
  query?: never;
  url: '/api/v1/config/grading-levels';
};

export type CreateGradingLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateGradingLevelError = CreateGradingLevelErrors[keyof CreateGradingLevelErrors];

export type CreateGradingLevelResponses = {
  /**
   * OK
   */
  200: ApiResponseGradingLevel;
};

export type CreateGradingLevelResponse =
  CreateGradingLevelResponses[keyof CreateGradingLevelResponses];

export type GetAllDifficultyLevelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/config/difficulty-levels';
};

export type GetAllDifficultyLevelsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllDifficultyLevelsError =
  GetAllDifficultyLevelsErrors[keyof GetAllDifficultyLevelsErrors];

export type GetAllDifficultyLevelsResponses = {
  /**
   * OK
   */
  200: ApiResponseListDifficultyLevel;
};

export type GetAllDifficultyLevelsResponse =
  GetAllDifficultyLevelsResponses[keyof GetAllDifficultyLevelsResponses];

export type CreateDifficultyLevelData = {
  body: DifficultyLevel;
  path?: never;
  query?: never;
  url: '/api/v1/config/difficulty-levels';
};

export type CreateDifficultyLevelErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateDifficultyLevelError =
  CreateDifficultyLevelErrors[keyof CreateDifficultyLevelErrors];

export type CreateDifficultyLevelResponses = {
  /**
   * OK
   */
  200: ApiResponseDifficultyLevel;
};

export type CreateDifficultyLevelResponse =
  CreateDifficultyLevelResponses[keyof CreateDifficultyLevelResponses];

export type ReorderDifficultyLevelsData = {
  body: Array<string>;
  path?: never;
  query?: never;
  url: '/api/v1/config/difficulty-levels/reorder';
};

export type ReorderDifficultyLevelsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ReorderDifficultyLevelsError =
  ReorderDifficultyLevelsErrors[keyof ReorderDifficultyLevelsErrors];

export type ReorderDifficultyLevelsResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type ReorderDifficultyLevelsResponse =
  ReorderDifficultyLevelsResponses[keyof ReorderDifficultyLevelsResponses];

export type GetAllContentTypesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/config/content-types';
};

export type GetAllContentTypesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllContentTypesError = GetAllContentTypesErrors[keyof GetAllContentTypesErrors];

export type GetAllContentTypesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoContentType;
};

export type GetAllContentTypesResponse =
  GetAllContentTypesResponses[keyof GetAllContentTypesResponses];

export type CreateContentTypeData = {
  body: ContentType;
  path?: never;
  query?: never;
  url: '/api/v1/config/content-types';
};

export type CreateContentTypeErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateContentTypeError = CreateContentTypeErrors[keyof CreateContentTypeErrors];

export type CreateContentTypeResponses = {
  /**
   * OK
   */
  200: ApiResponseContentType;
};

export type CreateContentTypeResponse =
  CreateContentTypeResponses[keyof CreateContentTypeResponses];

export type GetAllCategoriesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/config/categories';
};

export type GetAllCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllCategoriesError = GetAllCategoriesErrors[keyof GetAllCategoriesErrors];

export type GetAllCategoriesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCategory;
};

export type GetAllCategoriesResponse = GetAllCategoriesResponses[keyof GetAllCategoriesResponses];

export type CreateCategoryData = {
  body: Category;
  path?: never;
  query?: never;
  url: '/api/v1/config/categories';
};

export type CreateCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateCategoryError = CreateCategoryErrors[keyof CreateCategoryErrors];

export type CreateCategoryResponses = {
  /**
   * OK
   */
  200: ApiResponseCategory;
};

export type CreateCategoryResponse = CreateCategoryResponses[keyof CreateCategoryResponses];

export type GetAllCertificatesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/certificates';
};

export type GetAllCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllCertificatesError = GetAllCertificatesErrors[keyof GetAllCertificatesErrors];

export type GetAllCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCertificate;
};

export type GetAllCertificatesResponse =
  GetAllCertificatesResponses[keyof GetAllCertificatesResponses];

export type CreateCertificateData = {
  body: Certificate;
  path?: never;
  query?: never;
  url: '/api/v1/certificates';
};

export type CreateCertificateErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseCertificate;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateCertificateError = CreateCertificateErrors[keyof CreateCertificateErrors];

export type CreateCertificateResponses = {
  /**
   * Certificate created successfully
   */
  201: Certificate;
};

export type CreateCertificateResponse =
  CreateCertificateResponses[keyof CreateCertificateResponses];

export type RevokeCertificateData = {
  body?: never;
  path: {
    uuid: string;
  };
  query: {
    reason: string;
  };
  url: '/api/v1/certificates/{uuid}/revoke';
};

export type RevokeCertificateErrors = {
  /**
   * Certificate not found
   */
  404: unknown;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type RevokeCertificateError = RevokeCertificateErrors[keyof RevokeCertificateErrors];

export type RevokeCertificateResponses = {
  /**
   * Certificate revoked successfully
   */
  200: ApiResponseString;
};

export type RevokeCertificateResponse =
  RevokeCertificateResponses[keyof RevokeCertificateResponses];

export type GenerateCertificateUrlData = {
  body?: never;
  path: {
    uuid: string;
  };
  query: {
    certificateUrl: string;
  };
  url: '/api/v1/certificates/{uuid}/generate-url';
};

export type GenerateCertificateUrlErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GenerateCertificateUrlError =
  GenerateCertificateUrlErrors[keyof GenerateCertificateUrlErrors];

export type GenerateCertificateUrlResponses = {
  /**
   * OK
   */
  200: ApiResponseCertificate;
};

export type GenerateCertificateUrlResponse =
  GenerateCertificateUrlResponses[keyof GenerateCertificateUrlResponses];

export type GetCertificateTemplatesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/certificates/templates';
};

export type GetCertificateTemplatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCertificateTemplatesError =
  GetCertificateTemplatesErrors[keyof GetCertificateTemplatesErrors];

export type GetCertificateTemplatesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCertificateTemplate;
};

export type GetCertificateTemplatesResponse =
  GetCertificateTemplatesResponses[keyof GetCertificateTemplatesResponses];

export type CreateCertificateTemplateData = {
  body: CertificateTemplate;
  path?: never;
  query?: never;
  url: '/api/v1/certificates/templates';
};

export type CreateCertificateTemplateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateCertificateTemplateError =
  CreateCertificateTemplateErrors[keyof CreateCertificateTemplateErrors];

export type CreateCertificateTemplateResponses = {
  /**
   * OK
   */
  200: ApiResponseCertificateTemplate;
};

export type CreateCertificateTemplateResponse =
  CreateCertificateTemplateResponses[keyof CreateCertificateTemplateResponses];

export type GenerateProgramCertificateData = {
  body?: never;
  path?: never;
  query: {
    studentUuid: string;
    programUuid: string;
    finalGrade: number;
  };
  url: '/api/v1/certificates/generate/program';
};

export type GenerateProgramCertificateErrors = {
  /**
   * Student not eligible for certificate
   */
  400: ApiResponseCertificate;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GenerateProgramCertificateError =
  GenerateProgramCertificateErrors[keyof GenerateProgramCertificateErrors];

export type GenerateProgramCertificateResponses = {
  /**
   * Certificate generated successfully
   */
  201: ApiResponseCertificate;
};

export type GenerateProgramCertificateResponse =
  GenerateProgramCertificateResponses[keyof GenerateProgramCertificateResponses];

export type GenerateCourseCertificateData = {
  body?: never;
  path?: never;
  query: {
    studentUuid: string;
    courseUuid: string;
    finalGrade: number;
  };
  url: '/api/v1/certificates/generate/course';
};

export type GenerateCourseCertificateErrors = {
  /**
   * Student not eligible for certificate
   */
  400: ApiResponseCertificate;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GenerateCourseCertificateError =
  GenerateCourseCertificateErrors[keyof GenerateCourseCertificateErrors];

export type GenerateCourseCertificateResponses = {
  /**
   * Certificate generated successfully
   */
  201: ApiResponseCertificate;
};

export type GenerateCourseCertificateResponse =
  GenerateCourseCertificateResponses[keyof GenerateCourseCertificateResponses];

export type GetAllAssignmentsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/assignments';
};

export type GetAllAssignmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllAssignmentsError = GetAllAssignmentsErrors[keyof GetAllAssignmentsErrors];

export type GetAllAssignmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoAssignment;
};

export type GetAllAssignmentsResponse =
  GetAllAssignmentsResponses[keyof GetAllAssignmentsResponses];

export type CreateAssignmentData = {
  body: Assignment;
  path?: never;
  query?: never;
  url: '/api/v1/assignments';
};

export type CreateAssignmentErrors = {
  /**
   * Invalid request data
   */
  400: ApiResponseAssignment;
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CreateAssignmentError = CreateAssignmentErrors[keyof CreateAssignmentErrors];

export type CreateAssignmentResponses = {
  /**
   * Assignment created successfully
   */
  201: Assignment;
};

export type CreateAssignmentResponse = CreateAssignmentResponses[keyof CreateAssignmentResponses];

export type SubmitAssignmentData = {
  body?: never;
  path: {
    assignmentUuid: string;
  };
  query: {
    enrollmentUuid: string;
    content: string;
    fileUrls?: Array<string>;
  };
  url: '/api/v1/assignments/{assignmentUuid}/submit';
};

export type SubmitAssignmentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SubmitAssignmentError = SubmitAssignmentErrors[keyof SubmitAssignmentErrors];

export type SubmitAssignmentResponses = {
  /**
   * OK
   */
  200: ApiResponseAssignmentSubmission;
};

export type SubmitAssignmentResponse = SubmitAssignmentResponses[keyof SubmitAssignmentResponses];

export type ReturnSubmissionData = {
  body?: never;
  path: {
    assignmentUuid: string;
    submissionUuid: string;
  };
  query: {
    feedback: string;
  };
  url: '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/return';
};

export type ReturnSubmissionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ReturnSubmissionError = ReturnSubmissionErrors[keyof ReturnSubmissionErrors];

export type ReturnSubmissionResponses = {
  /**
   * OK
   */
  200: ApiResponseAssignmentSubmission;
};

export type ReturnSubmissionResponse = ReturnSubmissionResponses[keyof ReturnSubmissionResponses];

export type GradeSubmissionData = {
  body?: never;
  path: {
    assignmentUuid: string;
    submissionUuid: string;
  };
  query: {
    score: number;
    maxScore: number;
    comments?: string;
  };
  url: '/api/v1/assignments/{assignmentUuid}/submissions/{submissionUuid}/grade';
};

export type GradeSubmissionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GradeSubmissionError = GradeSubmissionErrors[keyof GradeSubmissionErrors];

export type GradeSubmissionResponses = {
  /**
   * OK
   */
  200: ApiResponseAssignmentSubmission;
};

export type GradeSubmissionResponse = GradeSubmissionResponses[keyof GradeSubmissionResponses];

export type GetAllUsersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/users';
};

export type GetAllUsersErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAllUsersError = GetAllUsersErrors[keyof GetAllUsersErrors];

export type GetAllUsersResponses = {
  /**
   * Paginated list of all users retrieved successfully
   */
  200: ApiResponsePagedDtoUser;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type GetInvitationsSentByUserData = {
  body?: never;
  path: {
    /**
     * UUID of the user to retrieve sent invitations for. Must be an existing user.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/users/{uuid}/invitations/sent';
};

export type GetInvitationsSentByUserErrors = {
  /**
   * User not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInvitationsSentByUserError =
  GetInvitationsSentByUserErrors[keyof GetInvitationsSentByUserErrors];

export type GetInvitationsSentByUserResponses = {
  /**
   * User's sent invitations retrieved successfully (may be empty list)
   */
  200: ApiResponseListInvitation;
};

export type GetInvitationsSentByUserResponse =
  GetInvitationsSentByUserResponses[keyof GetInvitationsSentByUserResponses];

export type GetPendingInvitationsForUserData = {
  body?: never;
  path: {
    /**
     * UUID of the user to get pending invitations for. The system will use the user's email to find invitations.
     */
    uuid: string;
  };
  query?: never;
  url: '/api/v1/users/{uuid}/invitations/pending';
};

export type GetPendingInvitationsForUserErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetPendingInvitationsForUserError =
  GetPendingInvitationsForUserErrors[keyof GetPendingInvitationsForUserErrors];

export type GetPendingInvitationsForUserResponses = {
  /**
   * Pending invitations retrieved successfully (may be empty list)
   */
  200: ApiResponseListInvitation;
};

export type GetPendingInvitationsForUserResponse =
  GetPendingInvitationsForUserResponses[keyof GetPendingInvitationsForUserResponses];

export type SearchData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/users/search';
};

export type SearchErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchError = SearchErrors[keyof SearchErrors];

export type SearchResponses = {
  /**
   * Paginated list of users matching the search criteria
   */
  200: ApiResponsePagedDtoUser;
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type GetProfileImageData = {
  body?: never;
  path: {
    /**
     * Name of the profile image file to retrieve. Format: profile_images_uuid.extension
     */
    fileName: string;
  };
  query?: never;
  url: '/api/v1/users/profile-image/{fileName}';
};

export type GetProfileImageErrors = {
  /**
   * Profile image not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProfileImageError = GetProfileImageErrors[keyof GetProfileImageErrors];

export type GetProfileImageResponses = {
  /**
   * Profile image retrieved successfully
   */
  200: Blob | File;
};

export type GetProfileImageResponse = GetProfileImageResponses[keyof GetProfileImageResponses];

export type Search1Data = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/training-branches/search';
};

export type Search1Errors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type Search1Error = Search1Errors[keyof Search1Errors];

export type Search1Responses = {
  /**
   * Paginated list of training branches matching the search criteria
   */
  200: ApiResponsePagedDtoTrainingBranch;
};

export type Search1Response = Search1Responses[keyof Search1Responses];

export type GetTrainingBranchesByOrganisation1Data = {
  body?: never;
  path: {
    organisationUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/training-branches/organisation/{organisationUuid}';
};

export type GetTrainingBranchesByOrganisation1Errors = {
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetTrainingBranchesByOrganisation1Error =
  GetTrainingBranchesByOrganisation1Errors[keyof GetTrainingBranchesByOrganisation1Errors];

export type GetTrainingBranchesByOrganisation1Responses = {
  /**
   * Training branches retrieved successfully
   */
  200: ApiResponsePagedDtoTrainingBranch;
};

export type GetTrainingBranchesByOrganisation1Response =
  GetTrainingBranchesByOrganisation1Responses[keyof GetTrainingBranchesByOrganisation1Responses];

export type SearchStudentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/students/search';
};

export type SearchStudentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchStudentsError = SearchStudentsErrors[keyof SearchStudentsErrors];

export type SearchStudentsResponses = {
  /**
   * Search results returned successfully
   */
  200: Page;
};

export type SearchStudentsResponse = SearchStudentsResponses[keyof SearchStudentsResponses];

export type GetQuizTotalPointsData = {
  body?: never;
  path: {
    quizUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/total-points';
};

export type GetQuizTotalPointsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuizTotalPointsError = GetQuizTotalPointsErrors[keyof GetQuizTotalPointsErrors];

export type GetQuizTotalPointsResponses = {
  /**
   * OK
   */
  200: ApiResponseBigDecimal;
};

export type GetQuizTotalPointsResponse =
  GetQuizTotalPointsResponses[keyof GetQuizTotalPointsResponses];

export type GetQuestionDistributionData = {
  body?: never;
  path: {
    quizUuid: string;
  };
  query?: never;
  url: '/api/v1/quizzes/{quizUuid}/question-distribution';
};

export type GetQuestionDistributionErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuestionDistributionError =
  GetQuestionDistributionErrors[keyof GetQuestionDistributionErrors];

export type GetQuestionDistributionResponses = {
  /**
   * OK
   */
  200: ApiResponseMapStringLong;
};

export type GetQuestionDistributionResponse =
  GetQuestionDistributionResponses[keyof GetQuestionDistributionResponses];

export type GetQuizAttemptsData = {
  body?: never;
  path: {
    quizUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes/{quizUuid}/attempts';
};

export type GetQuizAttemptsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetQuizAttemptsError = GetQuizAttemptsErrors[keyof GetQuizAttemptsErrors];

export type GetQuizAttemptsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuizAttempt;
};

export type GetQuizAttemptsResponse = GetQuizAttemptsResponses[keyof GetQuizAttemptsResponses];

export type SearchQuizzesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes/search';
};

export type SearchQuizzesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchQuizzesError = SearchQuizzesErrors[keyof SearchQuizzesErrors];

export type SearchQuizzesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuiz;
};

export type SearchQuizzesResponse = SearchQuizzesResponses[keyof SearchQuizzesResponses];

export type SearchQuestionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes/questions/search';
};

export type SearchQuestionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchQuestionsError = SearchQuestionsErrors[keyof SearchQuestionsErrors];

export type SearchQuestionsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuizQuestion;
};

export type SearchQuestionsResponse = SearchQuestionsResponses[keyof SearchQuestionsResponses];

export type SearchAttemptsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/quizzes/attempts/search';
};

export type SearchAttemptsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchAttemptsError = SearchAttemptsErrors[keyof SearchAttemptsErrors];

export type SearchAttemptsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoQuizAttempt;
};

export type SearchAttemptsResponse = SearchAttemptsResponses[keyof SearchAttemptsResponses];

export type GetProgramEnrollmentsData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/{programUuid}/enrollments';
};

export type GetProgramEnrollmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramEnrollmentsError =
  GetProgramEnrollmentsErrors[keyof GetProgramEnrollmentsErrors];

export type GetProgramEnrollmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoProgramEnrollment;
};

export type GetProgramEnrollmentsResponse =
  GetProgramEnrollmentsResponses[keyof GetProgramEnrollmentsResponses];

export type GetRequiredCoursesData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses/required';
};

export type GetRequiredCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetRequiredCoursesError = GetRequiredCoursesErrors[keyof GetRequiredCoursesErrors];

export type GetRequiredCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCourse;
};

export type GetRequiredCoursesResponse =
  GetRequiredCoursesResponses[keyof GetRequiredCoursesResponses];

export type GetOptionalCoursesData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/courses/optional';
};

export type GetOptionalCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetOptionalCoursesError = GetOptionalCoursesErrors[keyof GetOptionalCoursesErrors];

export type GetOptionalCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCourse;
};

export type GetOptionalCoursesResponse =
  GetOptionalCoursesResponses[keyof GetOptionalCoursesResponses];

export type GetProgramCompletionRateData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: never;
  url: '/api/v1/programs/{programUuid}/completion-rate';
};

export type GetProgramCompletionRateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramCompletionRateError =
  GetProgramCompletionRateErrors[keyof GetProgramCompletionRateErrors];

export type GetProgramCompletionRateResponses = {
  /**
   * OK
   */
  200: ApiResponseDouble;
};

export type GetProgramCompletionRateResponse =
  GetProgramCompletionRateResponses[keyof GetProgramCompletionRateResponses];

export type GetProgramCertificatesData = {
  body?: never;
  path: {
    programUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/{programUuid}/certificates';
};

export type GetProgramCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramCertificatesError =
  GetProgramCertificatesErrors[keyof GetProgramCertificatesErrors];

export type GetProgramCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCertificate;
};

export type GetProgramCertificatesResponse =
  GetProgramCertificatesResponses[keyof GetProgramCertificatesResponses];

export type SearchTrainingProgramsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/search';
};

export type SearchTrainingProgramsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchTrainingProgramsError =
  SearchTrainingProgramsErrors[keyof SearchTrainingProgramsErrors];

export type SearchTrainingProgramsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type SearchProgramRequirementsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/requirements/search';
};

export type SearchProgramRequirementsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchProgramRequirementsError =
  SearchProgramRequirementsErrors[keyof SearchProgramRequirementsErrors];

export type SearchProgramRequirementsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoProgramRequirement;
};

export type SearchProgramRequirementsResponse =
  SearchProgramRequirementsResponses[keyof SearchProgramRequirementsResponses];

export type GetPublishedProgramsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/published';
};

export type GetPublishedProgramsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetPublishedProgramsError =
  GetPublishedProgramsErrors[keyof GetPublishedProgramsErrors];

export type GetPublishedProgramsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetProgramsByInstructorData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/instructor/{instructorUuid}';
};

export type GetProgramsByInstructorErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramsByInstructorError =
  GetProgramsByInstructorErrors[keyof GetProgramsByInstructorErrors];

export type GetProgramsByInstructorResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetFreeProgramsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/free';
};

export type GetFreeProgramsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetFreeProgramsError = GetFreeProgramsErrors[keyof GetFreeProgramsErrors];

export type GetFreeProgramsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type SearchProgramEnrollmentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/enrollments/search';
};

export type SearchProgramEnrollmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchProgramEnrollmentsError =
  SearchProgramEnrollmentsErrors[keyof SearchProgramEnrollmentsErrors];

export type SearchProgramEnrollmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoProgramEnrollment;
};

export type SearchProgramEnrollmentsResponse =
  SearchProgramEnrollmentsResponses[keyof SearchProgramEnrollmentsResponses];

export type SearchProgramCoursesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/courses/search';
};

export type SearchProgramCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchProgramCoursesError =
  SearchProgramCoursesErrors[keyof SearchProgramCoursesErrors];

export type SearchProgramCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoProgramCourse;
};

export type SearchProgramCoursesResponse =
  SearchProgramCoursesResponses[keyof SearchProgramCoursesResponses];

export type GetProgramsByCategoryData = {
  body?: never;
  path: {
    categoryUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/category/{categoryUuid}';
};

export type GetProgramsByCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramsByCategoryError =
  GetProgramsByCategoryErrors[keyof GetProgramsByCategoryErrors];

export type GetProgramsByCategoryResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetActiveProgramsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/programs/active';
};

export type GetActiveProgramsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetActiveProgramsError = GetActiveProgramsErrors[keyof GetActiveProgramsErrors];

export type GetActiveProgramsResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetUsersByOrganisationData = {
  body?: never;
  path: {
    /**
     * UUID of the organisation to get users for. Must be an existing organisation identifier.
     */
    uuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/organisations/{uuid}/users';
};

export type GetUsersByOrganisationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetUsersByOrganisationError =
  GetUsersByOrganisationErrors[keyof GetUsersByOrganisationErrors];

export type GetUsersByOrganisationResponses = {
  /**
   * Users retrieved successfully
   */
  200: ApiResponsePagedDtoUser;
};

export type GetUsersByOrganisationResponse =
  GetUsersByOrganisationResponses[keyof GetUsersByOrganisationResponses];

export type GetUsersByOrganisationAndDomainData = {
  body?: never;
  path: {
    /**
     * UUID of the organisation to get users for. Must be an existing organisation identifier.
     */
    uuid: string;
    /**
     * Domain name to filter users by. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
     */
    domainName: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/users/domain/{domainName}';
};

export type GetUsersByOrganisationAndDomainErrors = {
  /**
   * Invalid domain name
   */
  400: ApiResponseListUser;
  /**
   * Organisation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetUsersByOrganisationAndDomainError =
  GetUsersByOrganisationAndDomainErrors[keyof GetUsersByOrganisationAndDomainErrors];

export type GetUsersByOrganisationAndDomainResponses = {
  /**
   * Filtered users retrieved successfully
   */
  200: ApiResponseListUser;
};

export type GetUsersByOrganisationAndDomainResponse =
  GetUsersByOrganisationAndDomainResponses[keyof GetUsersByOrganisationAndDomainResponses];

export type GetBranchUsersData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to get users for. Must be a branch within the specified organization.
     */
    branchUuid: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users';
};

export type GetBranchUsersErrors = {
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetBranchUsersError = GetBranchUsersErrors[keyof GetBranchUsersErrors];

export type GetBranchUsersResponses = {
  /**
   * Branch users retrieved successfully
   */
  200: ApiResponseListUser;
};

export type GetBranchUsersResponse = GetBranchUsersResponses[keyof GetBranchUsersResponses];

export type GetBranchUsersByDomainData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the training branch. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the training branch to get users for. Must be a branch within the specified organization.
     */
    branchUuid: string;
    /**
     * Domain name to filter users by. Valid values: 'student', 'instructor', 'admin', 'organisation_user'
     */
    domainName: string;
  };
  query?: never;
  url: '/api/v1/organisations/{uuid}/training-branches/{branchUuid}/users/domain/{domainName}';
};

export type GetBranchUsersByDomainErrors = {
  /**
   * Invalid domain name
   */
  400: ApiResponseListUser;
  /**
   * Training branch not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetBranchUsersByDomainError =
  GetBranchUsersByDomainErrors[keyof GetBranchUsersByDomainErrors];

export type GetBranchUsersByDomainResponses = {
  /**
   * Filtered branch users retrieved successfully
   */
  200: ApiResponseListUser;
};

export type GetBranchUsersByDomainResponse =
  GetBranchUsersByDomainResponses[keyof GetBranchUsersByDomainResponses];

export type Search2Data = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/organisations/search';
};

export type Search2Errors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type Search2Error = Search2Errors[keyof Search2Errors];

export type Search2Responses = {
  /**
   * Paginated list of organisations matching the search criteria
   */
  200: ApiResponsePagedDtoOrganisation;
};

export type Search2Response = Search2Responses[keyof Search2Responses];

export type ValidateInvitationData = {
  body?: never;
  path: {
    /**
     * Unique invitation token to validate. This is the 64-character token from invitation emails.
     */
    token: string;
  };
  query?: never;
  url: '/api/v1/invitations/validate/{token}';
};

export type ValidateInvitationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type ValidateInvitationError = ValidateInvitationErrors[keyof ValidateInvitationErrors];

export type ValidateInvitationResponses = {
  /**
   * Validation completed - check response body for result
   */
  200: ApiResponseBoolean;
};

export type ValidateInvitationResponse =
  ValidateInvitationResponses[keyof ValidateInvitationResponses];

export type GetInvitationByTokenData = {
  body?: never;
  path: {
    /**
     * Unique invitation token from the invitation email URL. This is the 64-character identifier for the specific invitation.
     */
    token: string;
  };
  query?: never;
  url: '/api/v1/invitations/token/{token}';
};

export type GetInvitationByTokenErrors = {
  /**
   * Invitation token not found or invalid
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetInvitationByTokenError =
  GetInvitationByTokenErrors[keyof GetInvitationByTokenErrors];

export type GetInvitationByTokenResponses = {
  /**
   * Invitation details retrieved successfully
   */
  200: ApiResponseInvitation;
};

export type GetInvitationByTokenResponse =
  GetInvitationByTokenResponses[keyof GetInvitationByTokenResponses];

export type GetPendingInvitationsForEmailData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Email address to search for pending invitations. Must be a valid email format. Search is case-insensitive.
     */
    email: string;
  };
  url: '/api/v1/invitations/pending';
};

export type GetPendingInvitationsForEmailErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetPendingInvitationsForEmailError =
  GetPendingInvitationsForEmailErrors[keyof GetPendingInvitationsForEmailErrors];

export type GetPendingInvitationsForEmailResponses = {
  /**
   * Pending invitations retrieved successfully (may be empty list)
   */
  200: ApiResponseListInvitation;
};

export type GetPendingInvitationsForEmailResponse =
  GetPendingInvitationsForEmailResponses[keyof GetPendingInvitationsForEmailResponses];

export type SearchSkillsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/skills/search';
};

export type SearchSkillsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchSkillsError = SearchSkillsErrors[keyof SearchSkillsErrors];

export type SearchSkillsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorSkill;
};

export type SearchSkillsResponse = SearchSkillsResponses[keyof SearchSkillsResponses];

export type SearchInstructorsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/search';
};

export type SearchInstructorsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchInstructorsError = SearchInstructorsErrors[keyof SearchInstructorsErrors];

export type SearchInstructorsResponses = {
  /**
   * Search results returned successfully
   */
  200: Page;
};

export type SearchInstructorsResponse =
  SearchInstructorsResponses[keyof SearchInstructorsResponses];

export type SearchMembershipsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/memberships/search';
};

export type SearchMembershipsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchMembershipsError = SearchMembershipsErrors[keyof SearchMembershipsErrors];

export type SearchMembershipsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorProfessionalMembership;
};

export type SearchMembershipsResponse =
  SearchMembershipsResponses[keyof SearchMembershipsResponses];

export type SearchExperienceData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/experience/search';
};

export type SearchExperienceErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchExperienceError = SearchExperienceErrors[keyof SearchExperienceErrors];

export type SearchExperienceResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorExperience;
};

export type SearchExperienceResponse = SearchExperienceResponses[keyof SearchExperienceResponses];

export type SearchEducationData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/education/search';
};

export type SearchEducationErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchEducationError = SearchEducationErrors[keyof SearchEducationErrors];

export type SearchEducationResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorEducation;
};

export type SearchEducationResponse = SearchEducationResponses[keyof SearchEducationResponses];

export type SearchDocumentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/instructors/documents/search';
};

export type SearchDocumentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchDocumentsError = SearchDocumentsErrors[keyof SearchDocumentsErrors];

export type SearchDocumentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoInstructorDocument;
};

export type SearchDocumentsResponse = SearchDocumentsResponses[keyof SearchDocumentsResponses];

export type GetStatusTransitionsData = {
  body?: never;
  path: {
    uuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{uuid}/status-transitions';
};

export type GetStatusTransitionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetStatusTransitionsError =
  GetStatusTransitionsErrors[keyof GetStatusTransitionsErrors];

export type GetStatusTransitionsResponses = {
  /**
   * Available transitions retrieved successfully
   */
  200: ApiResponseListContentStatus;
};

export type GetStatusTransitionsResponse =
  GetStatusTransitionsResponses[keyof GetStatusTransitionsResponses];

export type GetCourseEnrollmentsData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/{courseUuid}/enrollments';
};

export type GetCourseEnrollmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseEnrollmentsError =
  GetCourseEnrollmentsErrors[keyof GetCourseEnrollmentsErrors];

export type GetCourseEnrollmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseEnrollment;
};

export type GetCourseEnrollmentsResponse =
  GetCourseEnrollmentsResponses[keyof GetCourseEnrollmentsResponses];

export type GetCourseCompletionRateData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/completion-rate';
};

export type GetCourseCompletionRateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseCompletionRateError =
  GetCourseCompletionRateErrors[keyof GetCourseCompletionRateErrors];

export type GetCourseCompletionRateResponses = {
  /**
   * OK
   */
  200: ApiResponseDouble;
};

export type GetCourseCompletionRateResponse =
  GetCourseCompletionRateResponses[keyof GetCourseCompletionRateResponses];

export type RemoveAllCategoriesFromCourseData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/categories';
};

export type RemoveAllCategoriesFromCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type RemoveAllCategoriesFromCourseError =
  RemoveAllCategoriesFromCourseErrors[keyof RemoveAllCategoriesFromCourseErrors];

export type RemoveAllCategoriesFromCourseResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type RemoveAllCategoriesFromCourseResponse =
  RemoveAllCategoriesFromCourseResponses[keyof RemoveAllCategoriesFromCourseResponses];

export type GetCourseCategoriesData = {
  body?: never;
  path: {
    courseUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/categories';
};

export type GetCourseCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseCategoriesError = GetCourseCategoriesErrors[keyof GetCourseCategoriesErrors];

export type GetCourseCategoriesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCourseCategoryMapping;
};

export type GetCourseCategoriesResponse =
  GetCourseCategoriesResponses[keyof GetCourseCategoriesResponses];

export type SearchCoursesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/search';
};

export type SearchCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchCoursesError = SearchCoursesErrors[keyof SearchCoursesErrors];

export type SearchCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type SearchCoursesResponse = SearchCoursesResponses[keyof SearchCoursesResponses];

export type SearchRequirementsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/requirements/search';
};

export type SearchRequirementsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchRequirementsError = SearchRequirementsErrors[keyof SearchRequirementsErrors];

export type SearchRequirementsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseRequirement;
};

export type SearchRequirementsResponse =
  SearchRequirementsResponses[keyof SearchRequirementsResponses];

export type GetPublishedCoursesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/published';
};

export type GetPublishedCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetPublishedCoursesError = GetPublishedCoursesErrors[keyof GetPublishedCoursesErrors];

export type GetPublishedCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type GetPublishedCoursesResponse =
  GetPublishedCoursesResponses[keyof GetPublishedCoursesResponses];

export type GetCourseMediaData = {
  body?: never;
  path: {
    /**
     * Name of the media file to retrieve. This is typically returned from the upload endpoints.
     */
    fileName: string;
  };
  query?: never;
  url: '/api/v1/courses/media/{fileName}';
};

export type GetCourseMediaErrors = {
  /**
   * Media file not found
   */
  404: ApiResponse;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseMediaError = GetCourseMediaErrors[keyof GetCourseMediaErrors];

export type GetCourseMediaResponses = {
  /**
   * Media file retrieved successfully
   */
  200: Blob | File;
};

export type GetCourseMediaResponse = GetCourseMediaResponses[keyof GetCourseMediaResponses];

export type SearchLessonsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/lessons/search';
};

export type SearchLessonsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchLessonsError = SearchLessonsErrors[keyof SearchLessonsErrors];

export type SearchLessonsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoLesson;
};

export type SearchLessonsResponse = SearchLessonsResponses[keyof SearchLessonsResponses];

export type GetCoursesByInstructorData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/instructor/{instructorUuid}';
};

export type GetCoursesByInstructorErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCoursesByInstructorError =
  GetCoursesByInstructorErrors[keyof GetCoursesByInstructorErrors];

export type GetCoursesByInstructorResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type GetCoursesByInstructorResponse =
  GetCoursesByInstructorResponses[keyof GetCoursesByInstructorResponses];

export type SearchEnrollmentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/enrollments/search';
};

export type SearchEnrollmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchEnrollmentsError = SearchEnrollmentsErrors[keyof SearchEnrollmentsErrors];

export type SearchEnrollmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseEnrollment;
};

export type SearchEnrollmentsResponse =
  SearchEnrollmentsResponses[keyof SearchEnrollmentsResponses];

export type SearchLessonContentData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/content/search';
};

export type SearchLessonContentErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchLessonContentError = SearchLessonContentErrors[keyof SearchLessonContentErrors];

export type SearchLessonContentResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoLessonContent;
};

export type SearchLessonContentResponse =
  SearchLessonContentResponses[keyof SearchLessonContentResponses];

export type GetCoursesByCategoryData = {
  body?: never;
  path: {
    categoryUuid: string;
  };
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/category/{categoryUuid}';
};

export type GetCoursesByCategoryErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCoursesByCategoryError =
  GetCoursesByCategoryErrors[keyof GetCoursesByCategoryErrors];

export type GetCoursesByCategoryResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type GetCoursesByCategoryResponse =
  GetCoursesByCategoryResponses[keyof GetCoursesByCategoryResponses];

export type SearchCategoryMappingsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/category-mappings/search';
};

export type SearchCategoryMappingsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchCategoryMappingsError =
  SearchCategoryMappingsErrors[keyof SearchCategoryMappingsErrors];

export type SearchCategoryMappingsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseCategoryMapping;
};

export type SearchCategoryMappingsResponse =
  SearchCategoryMappingsResponses[keyof SearchCategoryMappingsResponses];

export type SearchAssessmentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/assessments/search';
};

export type SearchAssessmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchAssessmentsError = SearchAssessmentsErrors[keyof SearchAssessmentsErrors];

export type SearchAssessmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourseAssessment;
};

export type SearchAssessmentsResponse =
  SearchAssessmentsResponses[keyof SearchAssessmentsResponses];

export type GetActiveCoursesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/courses/active';
};

export type GetActiveCoursesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetActiveCoursesError = GetActiveCoursesErrors[keyof GetActiveCoursesErrors];

export type GetActiveCoursesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCourse;
};

export type GetActiveCoursesResponse = GetActiveCoursesResponses[keyof GetActiveCoursesResponses];

export type SearchContentTypesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/config/content-types/search';
};

export type SearchContentTypesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchContentTypesError = SearchContentTypesErrors[keyof SearchContentTypesErrors];

export type SearchContentTypesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoContentType;
};

export type SearchContentTypesResponse =
  SearchContentTypesResponses[keyof SearchContentTypesResponses];

export type CheckMimeTypeSupportData = {
  body?: never;
  path: {
    mimeType: string;
  };
  query?: never;
  url: '/api/v1/config/content-types/mime-support/{mimeType}';
};

export type CheckMimeTypeSupportErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CheckMimeTypeSupportError =
  CheckMimeTypeSupportErrors[keyof CheckMimeTypeSupportErrors];

export type CheckMimeTypeSupportResponses = {
  /**
   * OK
   */
  200: ApiResponseBoolean;
};

export type CheckMimeTypeSupportResponse =
  CheckMimeTypeSupportResponses[keyof CheckMimeTypeSupportResponses];

export type GetMediaContentTypesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/config/content-types/media';
};

export type GetMediaContentTypesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetMediaContentTypesError =
  GetMediaContentTypesErrors[keyof GetMediaContentTypesErrors];

export type GetMediaContentTypesResponses = {
  /**
   * OK
   */
  200: ApiResponseListContentType;
};

export type GetMediaContentTypesResponse =
  GetMediaContentTypesResponses[keyof GetMediaContentTypesResponses];

export type GetSubCategoriesData = {
  body?: never;
  path: {
    parentUuid: string;
  };
  query?: never;
  url: '/api/v1/config/categories/{parentUuid}/subcategories';
};

export type GetSubCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetSubCategoriesError = GetSubCategoriesErrors[keyof GetSubCategoriesErrors];

export type GetSubCategoriesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCategory;
};

export type GetSubCategoriesResponse = GetSubCategoriesResponses[keyof GetSubCategoriesResponses];

export type SearchCategoriesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/config/categories/search';
};

export type SearchCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchCategoriesError = SearchCategoriesErrors[keyof SearchCategoriesErrors];

export type SearchCategoriesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCategory;
};

export type SearchCategoriesResponse = SearchCategoriesResponses[keyof SearchCategoriesResponses];

export type GetRootCategoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/config/categories/root';
};

export type GetRootCategoriesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetRootCategoriesError = GetRootCategoriesErrors[keyof GetRootCategoriesErrors];

export type GetRootCategoriesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCategory;
};

export type GetRootCategoriesResponse =
  GetRootCategoriesResponses[keyof GetRootCategoriesResponses];

export type VerifyCertificateData = {
  body?: never;
  path: {
    certificateNumber: string;
  };
  query?: never;
  url: '/api/v1/certificates/verify/{certificateNumber}';
};

export type VerifyCertificateErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type VerifyCertificateError = VerifyCertificateErrors[keyof VerifyCertificateErrors];

export type VerifyCertificateResponses = {
  /**
   * Certificate verification result
   */
  200: ApiResponseBoolean;
};

export type VerifyCertificateResponse =
  VerifyCertificateResponses[keyof VerifyCertificateResponses];

export type SearchCertificateTemplatesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/certificates/templates/search';
};

export type SearchCertificateTemplatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchCertificateTemplatesError =
  SearchCertificateTemplatesErrors[keyof SearchCertificateTemplatesErrors];

export type SearchCertificateTemplatesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCertificateTemplate;
};

export type SearchCertificateTemplatesResponse =
  SearchCertificateTemplatesResponses[keyof SearchCertificateTemplatesResponses];

export type GetStudentCertificatesData = {
  body?: never;
  path: {
    studentUuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/student/{studentUuid}';
};

export type GetStudentCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetStudentCertificatesError =
  GetStudentCertificatesErrors[keyof GetStudentCertificatesErrors];

export type GetStudentCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCertificate;
};

export type GetStudentCertificatesResponse =
  GetStudentCertificatesResponses[keyof GetStudentCertificatesResponses];

export type GetDownloadableCertificatesData = {
  body?: never;
  path: {
    studentUuid: string;
  };
  query?: never;
  url: '/api/v1/certificates/student/{studentUuid}/downloadable';
};

export type GetDownloadableCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetDownloadableCertificatesError =
  GetDownloadableCertificatesErrors[keyof GetDownloadableCertificatesErrors];

export type GetDownloadableCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCertificate;
};

export type GetDownloadableCertificatesResponse =
  GetDownloadableCertificatesResponses[keyof GetDownloadableCertificatesResponses];

export type SearchCertificatesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/certificates/search';
};

export type SearchCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchCertificatesError = SearchCertificatesErrors[keyof SearchCertificatesErrors];

export type SearchCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoCertificate;
};

export type SearchCertificatesResponse =
  SearchCertificatesResponses[keyof SearchCertificatesResponses];

export type GetRevokedCertificatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/certificates/revoked';
};

export type GetRevokedCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetRevokedCertificatesError =
  GetRevokedCertificatesErrors[keyof GetRevokedCertificatesErrors];

export type GetRevokedCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCertificate;
};

export type GetRevokedCertificatesResponse =
  GetRevokedCertificatesResponses[keyof GetRevokedCertificatesResponses];

export type GetProgramCertificates1Data = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/certificates/program-certificates';
};

export type GetProgramCertificates1Errors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetProgramCertificates1Error =
  GetProgramCertificates1Errors[keyof GetProgramCertificates1Errors];

export type GetProgramCertificates1Responses = {
  /**
   * OK
   */
  200: ApiResponseListCertificate;
};

export type GetProgramCertificates1Response =
  GetProgramCertificates1Responses[keyof GetProgramCertificates1Responses];

export type GetCertificateByNumberData = {
  body?: never;
  path: {
    certificateNumber: string;
  };
  query?: never;
  url: '/api/v1/certificates/number/{certificateNumber}';
};

export type GetCertificateByNumberErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCertificateByNumberError =
  GetCertificateByNumberErrors[keyof GetCertificateByNumberErrors];

export type GetCertificateByNumberResponses = {
  /**
   * OK
   */
  200: ApiResponseCertificate;
};

export type GetCertificateByNumberResponse =
  GetCertificateByNumberResponses[keyof GetCertificateByNumberResponses];

export type GetCourseCertificatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/v1/certificates/course-certificates';
};

export type GetCourseCertificatesErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetCourseCertificatesError =
  GetCourseCertificatesErrors[keyof GetCourseCertificatesErrors];

export type GetCourseCertificatesResponses = {
  /**
   * OK
   */
  200: ApiResponseListCertificate;
};

export type GetCourseCertificatesResponse =
  GetCourseCertificatesResponses[keyof GetCourseCertificatesResponses];

export type GetAssignmentSubmissionsData = {
  body?: never;
  path: {
    assignmentUuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{assignmentUuid}/submissions';
};

export type GetAssignmentSubmissionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAssignmentSubmissionsError =
  GetAssignmentSubmissionsErrors[keyof GetAssignmentSubmissionsErrors];

export type GetAssignmentSubmissionsResponses = {
  /**
   * OK
   */
  200: ApiResponseListAssignmentSubmission;
};

export type GetAssignmentSubmissionsResponse =
  GetAssignmentSubmissionsResponses[keyof GetAssignmentSubmissionsResponses];

export type GetHighPerformanceSubmissionsData = {
  body?: never;
  path: {
    assignmentUuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{assignmentUuid}/high-performance';
};

export type GetHighPerformanceSubmissionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetHighPerformanceSubmissionsError =
  GetHighPerformanceSubmissionsErrors[keyof GetHighPerformanceSubmissionsErrors];

export type GetHighPerformanceSubmissionsResponses = {
  /**
   * OK
   */
  200: ApiResponseListAssignmentSubmission;
};

export type GetHighPerformanceSubmissionsResponse =
  GetHighPerformanceSubmissionsResponses[keyof GetHighPerformanceSubmissionsResponses];

export type GetAverageScoreData = {
  body?: never;
  path: {
    assignmentUuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{assignmentUuid}/average-score';
};

export type GetAverageScoreErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetAverageScoreError = GetAverageScoreErrors[keyof GetAverageScoreErrors];

export type GetAverageScoreResponses = {
  /**
   * OK
   */
  200: ApiResponseDouble;
};

export type GetAverageScoreResponse = GetAverageScoreResponses[keyof GetAverageScoreResponses];

export type GetSubmissionAnalyticsData = {
  body?: never;
  path: {
    assignmentUuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/{assignmentUuid}/analytics';
};

export type GetSubmissionAnalyticsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetSubmissionAnalyticsError =
  GetSubmissionAnalyticsErrors[keyof GetSubmissionAnalyticsErrors];

export type GetSubmissionAnalyticsResponses = {
  /**
   * OK
   */
  200: ApiResponseMapStringLong;
};

export type GetSubmissionAnalyticsResponse =
  GetSubmissionAnalyticsResponses[keyof GetSubmissionAnalyticsResponses];

export type SearchSubmissionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/assignments/submissions/search';
};

export type SearchSubmissionsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchSubmissionsError = SearchSubmissionsErrors[keyof SearchSubmissionsErrors];

export type SearchSubmissionsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoAssignmentSubmission;
};

export type SearchSubmissionsResponse =
  SearchSubmissionsResponses[keyof SearchSubmissionsResponses];

export type SearchAssignmentsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Optional search parameters for filtering
     */
    searchParams: {
      [key: string]: unknown;
    };
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>;
  };
  url: '/api/v1/assignments/search';
};

export type SearchAssignmentsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type SearchAssignmentsError = SearchAssignmentsErrors[keyof SearchAssignmentsErrors];

export type SearchAssignmentsResponses = {
  /**
   * OK
   */
  200: ApiResponsePagedDtoAssignment;
};

export type SearchAssignmentsResponse =
  SearchAssignmentsResponses[keyof SearchAssignmentsResponses];

export type GetPendingGradingData = {
  body?: never;
  path: {
    instructorUuid: string;
  };
  query?: never;
  url: '/api/v1/assignments/instructor/{instructorUuid}/pending-grading';
};

export type GetPendingGradingErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type GetPendingGradingError = GetPendingGradingErrors[keyof GetPendingGradingErrors];

export type GetPendingGradingResponses = {
  /**
   * OK
   */
  200: ApiResponseListAssignmentSubmission;
};

export type GetPendingGradingResponse =
  GetPendingGradingResponses[keyof GetPendingGradingResponses];

export type CancelInvitationData = {
  body?: never;
  path: {
    /**
     * UUID of the organization that owns the invitation. Must be an existing organization.
     */
    uuid: string;
    /**
     * UUID of the invitation to cancel. Must be a pending invitation that hasn't been accepted, declined, or expired.
     */
    invitationUuid: string;
  };
  query: {
    /**
     * UUID of the user requesting to cancel the invitation. Must be either the original inviter or an administrator of the organization.
     */
    canceller_uuid: string;
  };
  url: '/api/v1/organisations/{uuid}/invitations/{invitationUuid}';
};

export type CancelInvitationErrors = {
  /**
   * Invitation is not pending, or user lacks permission to cancel
   */
  400: ApiResponseVoid;
  /**
   * Invitation not found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CancelInvitationError = CancelInvitationErrors[keyof CancelInvitationErrors];

export type CancelInvitationResponses = {
  /**
   * Invitation cancelled successfully
   */
  200: ApiResponseVoid;
};

export type CancelInvitationResponse = CancelInvitationResponses[keyof CancelInvitationResponses];

export type CleanupOldInvitationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Delete invitations older than this many days. Default is 90 days.
     */
    daysOld?: number;
  };
  url: '/api/v1/invitations/maintenance/cleanup';
};

export type CleanupOldInvitationsErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type CleanupOldInvitationsError =
  CleanupOldInvitationsErrors[keyof CleanupOldInvitationsErrors];

export type CleanupOldInvitationsResponses = {
  /**
   * Old invitations cleaned up successfully
   */
  200: ApiResponseInteger;
};

export type CleanupOldInvitationsResponse =
  CleanupOldInvitationsResponses[keyof CleanupOldInvitationsResponses];

export type RemoveCategoryFromCourseData = {
  body?: never;
  path: {
    courseUuid: string;
    categoryUuid: string;
  };
  query?: never;
  url: '/api/v1/courses/{courseUuid}/categories/{categoryUuid}';
};

export type RemoveCategoryFromCourseErrors = {
  /**
   * Not Found
   */
  404: ResponseDtoVoid;
  /**
   * Internal Server Error
   */
  500: ResponseDtoVoid;
};

export type RemoveCategoryFromCourseError =
  RemoveCategoryFromCourseErrors[keyof RemoveCategoryFromCourseErrors];

export type RemoveCategoryFromCourseResponses = {
  /**
   * OK
   */
  200: ApiResponseString;
};

export type RemoveCategoryFromCourseResponse =
  RemoveCategoryFromCourseResponses[keyof RemoveCategoryFromCourseResponses];

export type ClientOptions = {
  baseUrl: 'https://api.elimika.sarafrika.com' | (string & {});
};
