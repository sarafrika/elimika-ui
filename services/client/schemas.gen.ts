// This file is auto-generated by @hey-api/openapi-ts

export const ResponseDTOVoidSchema = {
  type: 'object',
  properties: {
    data: {
      type: 'object',
    },
    status: {
      type: 'integer',
      format: 'int32',
    },
    message: {
      type: 'string',
    },
    errors: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
    },
  },
} as const;

export const UserSchema = {
  type: 'object',
  description:
    'Complete user profile information including personal details, authentication, and organizational data',
  example: {
    uuid: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
    first_name: 'Jane',
    middle_name: 'A.',
    last_name: 'Doe',
    email: 'jane.doe@example.com',
    phone_number: '+254712345678',
    profile_image_url: 'https://example.com/images/jane.jpg',
    dob: '1990-01-01',
    username: 'janedoe',
    active: true,
    keycloak_id: 'keycloak-user-123',
    created_date: '2024-04-01T12:00:00',
    updated_date: '2024-04-15T15:30:00',
    created_by: 'system',
    updated_by: 'admin',
    gender: 'FEMALE',
    user_domain: ['Student', 'Instructor'],
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system and cannot be modified.',
      example: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
      readOnly: true,
    },
    first_name: {
      type: 'string',
      description:
        "**[REQUIRED]** User's given/first name. Used for display purposes and official documentation. Must not be blank.",
      example: 'Jane',
      maxLength: 50,
      minLength: 0,
    },
    middle_name: {
      type: 'string',
      description:
        "**[OPTIONAL]** User's middle name or initial. Can be null or empty if not applicable.",
      example: 'A.',
      maxLength: 50,
      minLength: 0,
    },
    last_name: {
      type: 'string',
      description:
        "**[REQUIRED]** User's family/last name. Used for display purposes and official documentation. Must not be blank.",
      example: 'Doe',
      maxLength: 50,
      minLength: 0,
    },
    email: {
      type: 'string',
      format: 'email',
      description:
        "**[REQUIRED]** User's primary email address. Must be unique across the system and follow valid email format. Used for authentication and notifications.",
      example: 'jane.doe@example.com',
      maxLength: 100,
      minLength: 0,
    },
    username: {
      type: 'string',
      description:
        '**[REQUIRED]** Unique username for system login. Must be unique across the system and cannot be changed after account creation.',
      example: 'janedoe',
      maxLength: 50,
      minLength: 0,
    },
    dob: {
      type: 'string',
      format: 'date',
      description:
        "**[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization features.",
      example: '1990-01-01',
    },
    phone_number: {
      type: 'string',
      description:
        "**[REQUIRED]** User's contact phone number. Should include country code for international numbers. Used for notifications and verification.",
      example: '+254712345678',
      maxLength: 20,
      minLength: 0,
      pattern: '^(\\+254|0)?[17]\\d{8}$',
    },
    active: {
      type: 'boolean',
      description:
        '**[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in or perform any operations.',
      example: true,
    },
    keycloak_id: {
      type: 'string',
      description:
        '**[OPTIONAL]** Keycloak user identifier for authentication integration. Links the user to their Keycloak identity for SSO functionality.',
      example: 'keycloak-user-123',
      maxLength: 255,
      minLength: 0,
    },
    gender: {
      $ref: '#/components/schemas/GenderEnum',
    },
    user_domain: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ItemsEnum',
      },
    },
    profile_image_url: {
      type: 'string',
      format: 'uri',
      description:
        "**[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload and cannot be directly modified.",
      example: 'https://example.com/images/jane.jpg',
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system and cannot be modified.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes and cannot be directly modified.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Identifier of the user who created this account. Automatically set by the system for audit purposes.',
      example: 'system',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Identifier of the user who last updated this account. Automatically set by the system for audit purposes.',
      example: 'admin',
      readOnly: true,
    },
    display_name: {
      type: 'string',
      description:
        "**[READ-ONLY]** User's display name for UI purposes, consisting of first name and last name only (excludes middle name). Automatically computed from name components.",
      example: 'Jane Doe',
      readOnly: true,
    },
    full_name: {
      type: 'string',
      description:
        "**[READ-ONLY]** User's complete full name including first, middle (if present), and last names concatenated together. Automatically computed from individual name components.",
      example: 'Jane A. Doe',
      readOnly: true,
    },
  },
  required: ['active', 'dob', 'email', 'first_name', 'last_name', 'phone_number', 'username'],
} as const;

export const ApiResponseUserSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/User',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const TrainingBranchSchema = {
  type: 'object',
  description: 'Training branch information including location details and point of contact',
  example: {
    uuid: 'c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw',
    organisation_uuid: 'b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv',
    branch_name: 'Nairobi Main Campus',
    address: '123 University Way, Nairobi',
    poc_user_uuid: 'd1e2f3g4-h5i6-j7k8-l9m0-nopqrstuvwx',
    active: true,
    created_date: '2024-01-01T09:00:00',
    updated_date: '2024-04-15T14:30:00',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the training branch. Auto-generated by the system and cannot be modified.',
      example: 'c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw',
      readOnly: true,
    },
    organisation_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** UUID of the parent organisation this branch belongs to.',
      example: 'b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv',
    },
    branch_name: {
      type: 'string',
      description: '**[REQUIRED]** Name of the training branch or location. Must not be blank.',
      example: 'Nairobi Main Campus',
      maxLength: 200,
      minLength: 0,
    },
    address: {
      type: 'string',
      description: '**[OPTIONAL]** Physical address of the training branch.',
      example: 123,
    },
    poc_user_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** UUID of the user who serves as point of contact for this branch.',
      example: 'd1e2f3g4-h5i6-j7k8-l9m0-nopqrstuvwx',
    },
    active: {
      type: 'boolean',
      description:
        '**[REQUIRED]** Indicates whether the training branch is active and operational.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the training branch was first created. Automatically set by the system and cannot be modified.',
      example: '2024-01-01T09:00:00',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the training branch was last updated. Automatically updated by the system on any changes and cannot be directly modified.',
      example: '2024-04-15T14:30:00',
      readOnly: true,
    },
  },
  required: ['active', 'branch_name', 'organisation_uuid'],
} as const;

export const ApiResponseTrainingBranchSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/TrainingBranch',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const StudentSchema = {
  type: 'object',
  description:
    'Student profile information including guardian contacts and academic details. Links to a base user account.',
  example: {
    uuid: 's1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv',
    user_uuid: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
    first_guardian_name: 'John Doe',
    first_guardian_mobile: '+254712345678',
    second_guardian_name: 'Jane Doe',
    second_guardian_mobile: '+254787654321',
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the student profile. Auto-generated by the system.',
      example: 's1e2d3c4-5f6g-7h8i-9j0k-lmnopqrstuv',
      readOnly: true,
    },
    user_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the base user account UUID. Links student profile to user authentication and personal details.',
      example: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
    },
    first_guardian_name: {
      type: 'string',
      description:
        '**[OPTIONAL]** Full name of the primary guardian/parent. This is the main emergency contact for the student.',
      example: 'John Doe',
      maxLength: 100,
      minLength: 0,
    },
    first_guardian_mobile: {
      type: 'string',
      description:
        '**[OPTIONAL]** Mobile phone number of the primary guardian. Used for emergency contacts and notifications. Should include country code.',
      example: '+254712345678',
      maxLength: 20,
      minLength: 0,
      pattern: '^(\\+254|0)?[17]\\d{8}$',
    },
    second_guardian_name: {
      type: 'string',
      description:
        '**[OPTIONAL]** Full name of the secondary guardian/parent. Additional emergency contact for the student.',
      example: 'Jane Doe',
      maxLength: 100,
      minLength: 0,
    },
    second_guardian_mobile: {
      type: 'string',
      description:
        '**[OPTIONAL]** Mobile phone number of the secondary guardian. Alternative contact for emergencies and notifications. Should include country code.',
      example: '+254787654321',
      maxLength: 20,
      minLength: 0,
      pattern: '^(\\+254|0)?[17]\\d{8}$',
    },
    secondaryGuardianContact: {
      type: 'string',
    },
    primaryGuardianContact: {
      type: 'string',
    },
    allGuardianContacts: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the student profile was first created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this student profile. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the student profile was last modified. Automatically updated by the system on any changes.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this student profile. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
  },
  required: ['user_uuid'],
} as const;

export const QuizSchema = {
  type: 'object',
  description: 'Quiz assessment with configurable questions, timing, and scoring',
  example: {
    uuid: 'q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl',
    lesson_uuid: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
    title: 'OOP Concepts Quiz',
    description: 'Test your understanding of object-oriented programming fundamentals',
    instructions: 'Answer all questions. You have 30 minutes to complete this quiz.',
    time_limit_minutes: 30,
    attempts_allowed: 3,
    passing_score: 70,
    rubric_uuid: 'r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl',
    status: 'PUBLISHED',
    active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    time_limit_display: '30 minutes',
    is_timed: true,
    is_published: true,
    has_multiple_attempts: true,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the quiz. Auto-generated by the system.',
      example: 'q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl',
      readOnly: true,
    },
    lesson_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the lesson UUID that contains this quiz.',
      example: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
    },
    title: {
      type: 'string',
      description: '**[REQUIRED]** Quiz title that clearly describes the assessment content.',
      example: 'OOP Concepts Quiz',
      maxLength: 255,
      minLength: 0,
    },
    description: {
      type: 'string',
      description: '**[OPTIONAL]** Detailed description of the quiz purpose and content coverage.',
      example:
        'Test your understanding of object-oriented programming fundamentals including classes, inheritance, and polymorphism',
      maxLength: 1000,
      minLength: 0,
    },
    instructions: {
      type: 'string',
      description: '**[OPTIONAL]** Instructions for students on how to complete the quiz.',
      example:
        'Answer all questions carefully. You have 30 minutes to complete this quiz. Make sure to review your answers before submitting.',
      maxLength: 1000,
      minLength: 0,
    },
    time_limit_minutes: {
      type: 'integer',
      format: 'int32',
      description:
        '**[OPTIONAL]** Time limit for completing the quiz in minutes. Null means no time limit.',
      example: 30,
      minimum: 1,
    },
    attempts_allowed: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Number of attempts allowed for this quiz. Set to 1 for single attempt.',
      example: 3,
      minimum: 1,
    },
    passing_score: {
      type: 'number',
      description: '**[REQUIRED]** Minimum score percentage required to pass the quiz.',
      example: 70,
      maximum: 100,
      minimum: 0,
    },
    rubric_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.',
      example: 'r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl',
    },
    status: {
      $ref: '#/components/schemas/StatusEnum',
    },
    active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the quiz is actively available to students. Can only be true for published quizzes.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the quiz was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this quiz. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the quiz was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this quiz. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    is_published: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the quiz is published and accessible to students.',
      example: true,
      readOnly: true,
    },
    time_limit_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of quiz time limit.',
      example: 30,
      readOnly: true,
    },
    is_timed: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the quiz has a time limit.',
      example: true,
      readOnly: true,
    },
    has_multiple_attempts: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if students can take the quiz multiple times.',
      example: true,
      readOnly: true,
    },
  },
  required: ['attempts_allowed', 'lesson_uuid', 'passing_score', 'status', 'title'],
} as const;

export const ApiResponseQuizSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Quiz',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const QuizQuestionSchema = {
  type: 'object',
  description: 'Individual question within a quiz supporting multiple question types',
  example: {
    uuid: 'q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl',
    quiz_uuid: 'q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl',
    question_text:
      'What is the main principle of object-oriented programming that allows a class to inherit properties from another class?',
    question_type: 'MULTIPLE_CHOICE',
    points: 2,
    display_order: 1,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    question_category: 'Multiple Choice Question',
    points_display: '2.0 points',
    requires_options: true,
    question_number: 'Question 1',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the quiz question. Auto-generated by the system.',
      example: 'q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl',
      readOnly: true,
    },
    quiz_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the quiz UUID that contains this question.',
      example: 'q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl',
    },
    question_text: {
      type: 'string',
      description: '**[REQUIRED]** The actual question text that students will see and answer.',
      example:
        'What is the main principle of object-oriented programming that allows a class to inherit properties from another class?',
      maxLength: 2000,
      minLength: 0,
    },
    question_type: {
      $ref: '#/components/schemas/QuestionTypeEnum',
    },
    points: {
      type: 'number',
      description: '**[REQUIRED]** Point value for this question when answered correctly.',
      example: 2,
      minimum: 0.01,
    },
    display_order: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Display order of the question within the quiz for sequential presentation.',
      example: 1,
      minimum: 1,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the question was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this question. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the question was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this question. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    requires_options: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if this question type requires predefined answer options.',
      example: true,
      readOnly: true,
    },
    question_category: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable category of the question type.',
      example: 'Multiple Choice Question',
      readOnly: true,
    },
    points_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of the points value.',
      example: 2,
      readOnly: true,
    },
    question_number: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted question number for display in quiz interface.',
      example: 'Question 1',
      readOnly: true,
    },
  },
  required: ['display_order', 'points', 'question_text', 'question_type', 'quiz_uuid'],
} as const;

export const ApiResponseQuizQuestionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/QuizQuestion',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const QuizQuestionOptionSchema = {
  type: 'object',
  description:
    'Individual answer option for quiz questions with correctness and ordering information',
  example: {
    uuid: 'o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl',
    question_uuid: 'q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl',
    option_text:
      'A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.',
    is_correct: true,
    display_order: 2,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-03T10:15:00',
    updated_by: 'instructor@sarafrika.com',
    option_category: 'Correct Answer Option',
    is_incorrect: false,
    position_display: 'Option 2',
    correctness_status: 'Correct Answer',
    option_summary: 'Correct answer option in position 2',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the quiz question option. Auto-generated by the system.',
      example: 'o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl',
      readOnly: true,
    },
    question_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the quiz question UUID this option belongs to.',
      example: 'q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl',
    },
    option_text: {
      type: 'string',
      description: '**[REQUIRED]** Text content of the answer option displayed to students.',
      example:
        'A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.',
      maxLength: 1000,
      minLength: 0,
    },
    is_correct: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if this option is the correct answer for the question.',
      example: true,
    },
    display_order: {
      type: 'integer',
      format: 'int32',
      description:
        "**[OPTIONAL]** Display order of this option within the question's answer choices.",
      example: 2,
      minimum: 1,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the option was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this option. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the option was last modified. Automatically updated by the system.',
      example: '2024-04-03T10:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this option. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    option_category: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted category of the option based on its correctness status.',
      example: 'Correct Answer Option',
      readOnly: true,
    },
    is_incorrect: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this option is an incorrect answer choice.',
      example: false,
      readOnly: true,
    },
    position_display: {
      type: 'string',
      description:
        "**[READ-ONLY]** Formatted display of the option's position within the question.",
      example: 'Option 2',
      readOnly: true,
    },
    correctness_status: {
      type: 'string',
      description:
        '**[READ-ONLY]** Status description indicating whether this option is correct or incorrect.',
      example: 'Correct Answer',
      readOnly: true,
    },
    option_summary: {
      type: 'string',
      description:
        '**[READ-ONLY]** Comprehensive summary of the option including correctness and position.',
      example: 'Correct answer option in position 2',
      readOnly: true,
    },
  },
  required: ['option_text', 'question_uuid'],
} as const;

export const ApiResponseQuizQuestionOptionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/QuizQuestionOption',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ProgramRequirementSchema = {
  type: 'object',
  description: 'Program requirement with type classification and mandatory status',
  example: {
    uuid: 'r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl',
    program_uuid: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    requirement_type: 'STUDENT',
    requirement_text:
      'Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.',
    is_mandatory: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-05T14:30:00',
    updated_by: 'admin@sarafrika.com',
    requirement_category: 'Mandatory Student Requirement',
    is_optional: false,
    requirement_priority: 'High Priority',
    compliance_level: 'Mandatory Compliance',
    requirement_summary: 'Student requirement with mandatory compliance',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the program requirement. Auto-generated by the system.',
      example: 'r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl',
      readOnly: true,
    },
    program_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the program UUID this requirement applies to.',
      example: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    },
    requirement_type: {
      $ref: '#/components/schemas/RequirementTypeEnum',
    },
    requirement_text: {
      type: 'string',
      description:
        '**[REQUIRED]** Detailed text describing the specific requirement and its criteria.',
      example:
        'Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.',
      maxLength: 2000,
      minLength: 0,
    },
    is_mandatory: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if this requirement is mandatory for program completion.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.',
      example: '2024-04-05T14:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    is_optional: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the requirement is optional (not mandatory).',
      example: false,
      readOnly: true,
    },
    requirement_priority: {
      type: 'string',
      description:
        '**[READ-ONLY]** Priority level of the requirement based on type and mandatory status.',
      example: 'High Priority',
      readOnly: true,
    },
    requirement_summary: {
      type: 'string',
      description:
        '**[READ-ONLY]** Comprehensive summary of the requirement including type and compliance level.',
      example: 'Student requirement with mandatory compliance',
      readOnly: true,
    },
    requirement_category: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted category of the requirement based on type and mandatory status.',
      example: 'Mandatory Student Requirement',
      readOnly: true,
    },
    compliance_level: {
      type: 'string',
      description:
        '**[READ-ONLY]** Compliance level indicating how strictly the requirement must be followed.',
      example: 'Mandatory Compliance',
      readOnly: true,
    },
  },
  required: ['program_uuid', 'requirement_text', 'requirement_type'],
} as const;

export const ApiResponseProgramRequirementSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/ProgramRequirement',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ProgramCourseSchema = {
  type: 'object',
  description:
    'Association between programs and courses with sequencing and requirement information',
  example: {
    uuid: 'p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl',
    program_uuid: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    sequence_order: 3,
    is_required: true,
    prerequisite_course_uuid: 'c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl',
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-02T09:30:00',
    updated_by: 'admin@sarafrika.com',
    association_category: 'Required Course',
    has_prerequisites: true,
    sequence_display: 'Course 3 of Program',
    requirement_status: 'Mandatory Course',
    curriculum_summary: 'Required course with prerequisites in sequence position 3',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the program-course association. Auto-generated by the system.',
      example: 'p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl',
      readOnly: true,
    },
    program_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the program UUID that contains this course.',
      example: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the course UUID that is part of this program.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    sequence_order: {
      type: 'integer',
      format: 'int32',
      description: '**[OPTIONAL]** Sequential order of this course within the program curriculum.',
      example: 3,
      minimum: 1,
    },
    is_required: {
      type: 'boolean',
      description: '**[OPTIONAL]** Indicates if this course is required for program completion.',
      example: true,
    },
    prerequisite_course_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to the prerequisite course UUID that must be completed before this course.',
      example: 'c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the program-course association was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this association. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the association was last modified. Automatically updated by the system.',
      example: '2024-04-02T09:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this association. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    has_prerequisites: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this course has prerequisite requirements.',
      example: true,
      readOnly: true,
    },
    association_category: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted category of the course association based on requirement status.',
      example: 'Required Course',
      readOnly: true,
    },
    sequence_display: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted display of the course position within the program sequence.',
      example: 'Course 3 of Program',
      readOnly: true,
    },
    requirement_status: {
      type: 'string',
      description: '**[READ-ONLY]** Requirement status of the course within the program.',
      example: 'Mandatory Course',
      readOnly: true,
    },
    curriculum_summary: {
      type: 'string',
      description:
        "**[READ-ONLY]** Comprehensive summary of the course's role within the program curriculum.",
      example: 'Required course with prerequisites in sequence position 3',
      readOnly: true,
    },
  },
  required: ['course_uuid', 'program_uuid'],
} as const;

export const ApiResponseProgramCourseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/ProgramCourse',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const OrganisationSchema = {
  type: 'object',
  description:
    'Complete organisation profile information including basic details, configuration, and metadata',
  example: {
    uuid: 'b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv',
    name: 'Sarafrika University',
    description: 'Leading educational institution in Kenya',
    active: true,
    code: 'SARU',
    licence_no: 'EDU-2024-001',
    domain: 'sarafrika.edu.ke',
    user_uuid: 'a1b2c3d4-e5f6-g7h8-i9j0-klmnopqrstuv',
    location: 'Nairobi, Kenya',
    country: 'Kenya',
    created_date: '2024-01-01T09:00:00',
    updated_date: '2024-04-15T14:30:00',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the organisation. Auto-generated by the system and cannot be modified.',
      example: 'b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        "**[REQUIRED]** Organisation's official name. Used for display purposes and official documentation. Must not be blank.",
      example: 'Sarafrika University',
      maxLength: 50,
      minLength: 0,
    },
    description: {
      type: 'string',
      description:
        "**[OPTIONAL]** Detailed description of the organisation. Provides additional context about the organisation's purpose and activities.",
      example: 'Leading educational institution in Kenya',
    },
    active: {
      type: 'boolean',
      description:
        '**[REQUIRED]** Indicates whether the organisation is active and can access the system. Inactive organisations cannot perform any operations.',
      example: true,
    },
    code: {
      type: 'string',
      description:
        '**[OPTIONAL]** Short code or abbreviation for the organisation. Used for quick identification and referencing.',
      example: 'SARU',
    },
    licence_no: {
      type: 'string',
      description:
        '**[OPTIONAL]** Official licence number or registration number for the organisation. Used for regulatory compliance and verification.',
      example: 'EDU-2024-001',
      maxLength: 100,
    },
    domain: {
      type: 'string',
      description:
        "**[OPTIONAL]** Organisation's domain name. Used for email validation and system integration.",
      example: 'sarafrika.edu.ke',
      maxLength: 255,
    },
    user_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[OPTIONAL]** Reference to the primary contact user for this organisation.',
      example: 'a1b2c3d4-e5f6-g7h8-i9j0-klmnopqrstuv',
    },
    location: {
      type: 'string',
      description: '**[OPTIONAL]** Physical location or address of the organisation.',
      example: 'Nairobi, Kenya',
      maxLength: 200,
    },
    country: {
      type: 'string',
      description: '**[OPTIONAL]** Country where the organisation is located.',
      example: 'Kenya',
      maxLength: 100,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the organisation was first created. Automatically set by the system and cannot be modified.',
      example: '2024-01-01T09:00:00',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the organisation was last updated. Automatically updated by the system on any changes and cannot be directly modified.',
      example: '2024-04-15T14:30:00',
      readOnly: true,
    },
  },
  required: ['active', 'name'],
} as const;

export const ApiResponseOrganisationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Organisation',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseVoidSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'object',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InstructorSchema = {
  type: 'object',
  description: 'Instructor profile including location data for educational service delivery',
  example: {
    uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    user_uuid: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
    full_name: 'Dr. Jane Smith',
    latitude: -1.2921,
    longitude: 36.8219,
    website: 'https://drjanesmith.com',
    bio: 'Experienced educator with 10+ years in software development training and mentorship.',
    professional_headline: 'Senior Software Development Instructor & Tech Consultant',
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
    has_location_coordinates: true,
    formatted_location: '-1.292100, 36.821900',
    is_profile_complete: true,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
      readOnly: true,
    },
    user_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.',
      example: 'd2e6f6c4-3d44-11ee-be56-0242ac120002',
    },
    latitude: {
      type: 'number',
      description:
        "**[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
      example: -1.2921,
      maximum: 90,
      minimum: -90,
    },
    longitude: {
      type: 'number',
      description:
        "**[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
      example: 36.8219,
      maximum: 180,
      minimum: -180,
    },
    website: {
      type: 'string',
      format: 'uri',
      description:
        "**[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.",
      example: 'https://drjanesmith.com',
      maxLength: 255,
      minLength: 0,
    },
    bio: {
      type: 'string',
      description:
        "**[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.",
      example:
        'Experienced educator with 10+ years in software development training and mentorship. Specializes in full-stack development, cloud architecture, and agile methodologies.',
      maxLength: 2000,
      minLength: 0,
    },
    professional_headline: {
      type: 'string',
      description:
        "**[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.",
      example: 'Senior Software Development Instructor & Tech Consultant',
      maxLength: 150,
      minLength: 0,
    },
    full_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.',
      example: 'Dr. Jane Smith',
      readOnly: true,
    },
    admin_verified: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates whether the instructor has been verified by an administrator. True if verified, false if not verified, null if verification status is unknown or pending.',
      example: true,
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    has_location_coordinates: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the instructor has both latitude and longitude coordinates configured.',
      example: true,
      readOnly: true,
    },
    formatted_location: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted location coordinates as a string. Returns null if location coordinates are not available.',
      example: '-1.292100, 36.821900',
      readOnly: true,
    },
    is_profile_complete: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the instructor profile is considered complete. Requires bio and professional headline.',
      example: true,
      readOnly: true,
    },
  },
  required: ['user_uuid'],
} as const;

export const InstructorSkillSchema = {
  type: 'object',
  description:
    'Technical and professional skill record for instructors with proficiency levels and competency classifications',
  example: {
    uuid: 'skill123-4567-89ab-cdef-0123456789ab',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    skill_name: 'Java Programming',
    proficiency_level: 'EXPERT',
    created_date: '2024-06-15T14:30:22',
    created_by: 'instructor@example.com',
    updated_date: '2024-06-16T09:15:00',
    updated_by: 'instructor@example.com',
    skill_category: 'PROGRAMMING_LANGUAGE',
    proficiency_description: 'Expert level with 7+ years of experience',
    proficiency_percentage: 95,
    is_core_skill: true,
    is_teaching_qualified: true,
    skill_level_numeric: 4,
    certification_recommended: false,
    market_demand: 'HIGH',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the skill record. Auto-generated by the system.',
      example: 'skill123-4567-89ab-cdef-0123456789ab',
      readOnly: true,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the instructor profile UUID. Links skill record to specific instructor.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    skill_name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the technical or professional skill. Should be specific and standardized for consistency.',
      example: 'Java Programming',
      maxLength: 100,
      minLength: 0,
    },
    proficiency_level: {
      $ref: '#/components/schemas/ProficiencyLevelEnum',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the skill record was first created. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description: '**[READ-ONLY]** Email or username of the user who created this skill record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the skill record was last modified. Automatically updated by the system.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this skill record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    display_name: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted skill name for display in UI components.',
      example: 'Java Programming (Expert)',
      readOnly: true,
    },
    summary: {
      type: 'string',
      description: '**[READ-ONLY]** Brief summary of the skill for display in skill lists.',
      example: 'Java Programming - Expert level, High market demand, Teaching qualified',
      readOnly: true,
    },
    proficiency_description: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable description of the proficiency level.',
      example: 'Expert level with 7+ years of experience',
      readOnly: true,
    },
  },
  required: ['instructor_uuid', 'proficiency_level', 'skill_name'],
} as const;

export const ApiResponseInstructorSkillSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/InstructorSkill',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InstructorProfessionalMembershipSchema = {
  type: 'object',
  description:
    'Professional membership record for instructors including associations, industry bodies, and certification organizations',
  example: {
    uuid: 'mem12345-6789-abcd-ef01-234567890abc',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    organization_name: 'Institute of Electrical and Electronics Engineers (IEEE)',
    membership_number: 'IEEE-92345678',
    start_date: '2020-03-15',
    end_date: null,
    is_active: true,
    created_date: '2024-06-15T14:30:22',
    created_by: 'instructor@example.com',
    updated_date: '2024-06-16T09:15:00',
    updated_by: 'instructor@example.com',
    membership_duration_months: 51,
    formatted_duration: '4 years, 3 months',
    membership_period: 'Mar 2020 - Present',
    is_long_standing_member: true,
    has_membership_number: true,
    membership_status: 'ACTIVE',
    organization_type: 'PROFESSIONAL_INSTITUTE',
    years_of_membership: 4.25,
    is_recent_membership: true,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the membership record. Auto-generated by the system.',
      example: 'mem12345-6789-abcd-ef01-234567890abc',
      readOnly: true,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the instructor profile UUID. Links membership record to specific instructor.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    organization_name: {
      type: 'string',
      description:
        '**[REQUIRED]** Full name of the professional organization, association, or certification body.',
      example: 'Institute of Electrical and Electronics Engineers (IEEE)',
      maxLength: 255,
      minLength: 0,
    },
    membership_number: {
      type: 'string',
      description:
        '**[OPTIONAL]** Official membership number or identifier issued by the organization.',
      example: 'IEEE-92345678',
      maxLength: 100,
      minLength: 0,
    },
    start_date: {
      type: 'string',
      format: 'date',
      description: '**[OPTIONAL]** Date when the membership began or was first obtained.',
      example: '2020-03-15',
    },
    end_date: {
      type: 'string',
      format: 'date',
      description:
        '**[OPTIONAL]** Date when the membership ended or expired. Should be null for active memberships.',
      example: null,
    },
    is_active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates whether the membership is currently active. True for active memberships, false for inactive or expired.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the membership record was first created. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this membership record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the membership record was last modified. Automatically updated by the system.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this membership record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    is_valid: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the membership is currently valid and active.',
      example: true,
      readOnly: true,
    },
    summary: {
      type: 'string',
      description: '**[READ-ONLY]** Brief summary of the membership for display in listings.',
      example: 'IEEE Member (4 years, 3 months) - Active',
      readOnly: true,
    },
    formatted_duration: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable formatted duration of membership.',
      example: 4,
      readOnly: true,
    },
    membership_status: {
      $ref: '#/components/schemas/MembershipStatusEnum',
    },
    membership_period: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted membership period showing start and end dates.',
      example: 'Mar 2020 - Present',
      readOnly: true,
    },
    is_long_standing_member: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if this membership has been held for 5 years or more.',
      example: true,
      readOnly: true,
    },
    has_membership_number: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the membership has a membership number documented.',
      example: true,
      readOnly: true,
    },
    organization_type: {
      $ref: '#/components/schemas/OrganizationTypeEnum',
    },
    years_of_membership: {
      type: 'number',
      format: 'double',
      description: '**[READ-ONLY]** Years of membership calculated with decimal precision.',
      example: 4.25,
      readOnly: true,
    },
    is_recent_membership: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if this membership was started within the last 3 years.',
      example: true,
      readOnly: true,
    },
    membership_duration_months: {
      type: 'integer',
      format: 'int32',
      description:
        '**[READ-ONLY]** Duration of membership calculated from start and end dates, in months.',
      example: 51,
      readOnly: true,
    },
    is_complete: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the membership record has all essential information.',
      example: true,
      readOnly: true,
    },
  },
  required: ['instructor_uuid', 'organization_name'],
} as const;

export const ApiResponseInstructorProfessionalMembershipSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/InstructorProfessionalMembership',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InstructorExperienceSchema = {
  type: 'object',
  description:
    'Professional work experience record for instructors including positions, organizations, responsibilities, and employment duration',
  example: {
    uuid: 'exp12345-6789-abcd-ef01-234567890abc',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    position: 'Senior Software Developer',
    organization_name: 'Safaricom PLC',
    responsibilities:
      'Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.',
    years_of_experience: 5.5,
    start_date: '2019-01-15',
    end_date: '2024-06-30',
    is_current_position: false,
    created_date: '2024-06-15T14:30:22',
    created_by: 'instructor@example.com',
    updated_date: '2024-06-16T09:15:00',
    updated_by: 'instructor@example.com',
    duration_in_months: 66,
    formatted_duration: '5 years, 5 months',
    employment_period: 'Jan 2019 - Jun 2024',
    is_long_term_position: true,
    has_responsibilities: true,
    experience_level: 'SENIOR',
    is_recent_experience: true,
    calculated_years: 5.46,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the experience record. Auto-generated by the system.',
      example: 'exp12345-6789-abcd-ef01-234567890abc',
      readOnly: true,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the instructor profile UUID. Links experience record to specific instructor.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    position: {
      type: 'string',
      description: '**[REQUIRED]** Job title or position held by the instructor in this role.',
      example: 'Senior Software Developer',
      maxLength: 255,
      minLength: 0,
    },
    organization_name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the organization, company, or institution where the instructor worked.',
      example: 'Safaricom PLC',
      maxLength: 255,
      minLength: 0,
    },
    responsibilities: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed description of key responsibilities, achievements, and duties performed in this position.',
      example:
        'Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.',
      maxLength: 2000,
      minLength: 0,
    },
    years_of_experience: {
      type: 'number',
      description:
        '**[OPTIONAL]** Total years of experience in this position, including fractional years for more precise representation.',
      example: 5.5,
      maximum: 50,
      minimum: 0,
    },
    start_date: {
      type: 'string',
      format: 'date',
      description: '**[OPTIONAL]** Date when employment in this position began.',
      example: '2019-01-15',
    },
    end_date: {
      type: 'string',
      format: 'date',
      description:
        '**[OPTIONAL]** Date when employment in this position ended. Should be null for current positions.',
      example: '2024-06-30',
    },
    is_current_position: {
      type: 'boolean',
      description:
        "**[OPTIONAL]** Indicates whether this is the instructor's current position. True for ongoing employment.",
      example: false,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the experience record was first created. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this experience record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the experience record was last modified. Automatically updated by the system.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this experience record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    summary: {
      type: 'string',
      description: '**[READ-ONLY]** Brief summary of the experience for display in listings.',
      example: 'Senior Software Developer at Safaricom PLC (5 years, 5 months)',
      readOnly: true,
    },
    duration_in_months: {
      type: 'integer',
      format: 'int32',
      description:
        '**[READ-ONLY]** Duration of employment calculated from start and end dates, in months.',
      example: 66,
      readOnly: true,
    },
    formatted_duration: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable formatted duration of employment.',
      example: 5,
      readOnly: true,
    },
    employment_period: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted employment period showing start and end dates.',
      example: 'Jan 2019 - Jun 2024',
      readOnly: true,
    },
    is_long_term_position: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this position was held for 2 years or more.',
      example: true,
      readOnly: true,
    },
    has_responsibilities: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the position has responsibilities documented.',
      example: true,
      readOnly: true,
    },
    experience_level: {
      $ref: '#/components/schemas/ExperienceLevelEnum',
    },
    is_recent_experience: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if this experience is recent (within the last 5 years).',
      example: true,
      readOnly: true,
    },
    calculated_years: {
      type: 'number',
      format: 'double',
      description: '**[READ-ONLY]** Calculated years of experience based on start and end dates.',
      example: 5.46,
      readOnly: true,
    },
    is_complete: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the experience record has all essential information.',
      example: true,
      readOnly: true,
    },
  },
  required: ['instructor_uuid', 'organization_name', 'position'],
} as const;

export const ApiResponseInstructorExperienceSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/InstructorExperience',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InstructorEducationSchema = {
  type: 'object',
  description:
    'Educational qualification record for instructors including degrees, diplomas, certificates, and academic credentials',
  example: {
    uuid: 'edu12345-6789-abcd-ef01-234567890abc',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    qualification: 'Master of Science in Computer Science',
    school_name: 'University of Nairobi',
    year_completed: 2020,
    certificate_number: 'MSC/CS/2020/0456',
    created_date: '2024-06-15T14:30:22',
    created_by: 'instructor@example.com',
    updated_date: '2024-06-16T09:15:00',
    updated_by: 'instructor@example.com',
    is_recent_qualification: true,
    years_since_completion: 4,
    education_level: 'POSTGRADUATE',
    has_certificate_number: true,
    formatted_completion: '2020 - University of Nairobi',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the education record. Auto-generated by the system.',
      example: 'edu12345-6789-abcd-ef01-234567890abc',
      readOnly: true,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the instructor profile UUID. Links education record to specific instructor.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    qualification: {
      type: 'string',
      description:
        '**[REQUIRED]** Name or title of the academic qualification, degree, diploma, or certificate obtained.',
      example: 'Master of Science in Computer Science',
      maxLength: 255,
      minLength: 0,
    },
    school_name: {
      type: 'string',
      description:
        '**[REQUIRED]** Full name of the educational institution, university, college, or training organization.',
      example: 'University of Nairobi',
      maxLength: 255,
      minLength: 0,
    },
    year_completed: {
      type: 'integer',
      format: 'int32',
      description:
        '**[OPTIONAL]** Year when the qualification was completed or awarded. Must be a valid year not in the future.',
      example: 2020,
      maximum: 2030,
      minimum: 1950,
    },
    certificate_number: {
      type: 'string',
      description:
        '**[OPTIONAL]** Official certificate, diploma, or degree number issued by the educational institution.',
      example: 'MSC/CS/2020/0456',
      maxLength: 100,
      minLength: 0,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the education record was first created. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this education record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the education record was last modified. Automatically updated by the system.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this education record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    full_description: {
      type: 'string',
      description:
        '**[READ-ONLY]** Complete description combining qualification, school, and year.',
      example: 'Master of Science in Computer Science from University of Nairobi (2020)',
      readOnly: true,
    },
    is_recent_qualification: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if this qualification was completed within the last 10 years.',
      example: true,
      readOnly: true,
    },
    years_since_completion: {
      type: 'integer',
      format: 'int32',
      description: '**[READ-ONLY]** Number of years since the qualification was completed.',
      example: 4,
      readOnly: true,
    },
    education_level: {
      $ref: '#/components/schemas/EducationLevelEnum',
    },
    has_certificate_number: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the education record has a certificate number provided.',
      example: true,
      readOnly: true,
    },
    formatted_completion: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted string showing year of completion and school name.',
      example: 2020,
      readOnly: true,
    },
    is_complete: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the education record has all essential information.',
      example: true,
      readOnly: true,
    },
  },
  required: ['instructor_uuid', 'qualification', 'school_name'],
} as const;

export const ApiResponseInstructorEducationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/InstructorEducation',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InstructorDocumentSchema = {
  type: 'object',
  description:
    'Document record for instructor credential verification including educational certificates, experience documents, and professional memberships',
  example: {
    uuid: 'doc12345-6789-abcd-ef01-234567890abc',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    document_type_uuid: 'dt123456-7890-abcd-ef01-234567890abc',
    education_uuid: 'edu12345-6789-abcd-ef01-234567890abc',
    experience_uuid: null,
    membership_uuid: null,
    original_filename: 'AWS_Solutions_Architect_Certificate.pdf',
    stored_filename: 'instructor_doc_20240615_143022_abc123.pdf',
    file_path: '/documents/instructors/2024/06/instructor_doc_20240615_143022_abc123.pdf',
    file_size_bytes: 2048576,
    mime_type: 'application/pdf',
    file_hash: 'sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6',
    title: 'AWS Certified Solutions Architect - Professional Certificate',
    description: 'Professional certification in cloud architecture and solutions design',
    upload_date: '2024-06-15T14:30:22',
    is_verified: true,
    verified_by: 'admin@sarafrika.com',
    verified_at: '2024-06-16T09:15:00',
    verification_notes: 'Certificate verified against AWS official database',
    status: 'APPROVED',
    expiry_date: '2027-06-15',
    created_date: '2024-06-15T14:30:22',
    created_by: 'instructor@example.com',
    updated_date: '2024-06-16T09:15:00',
    updated_by: 'admin@sarafrika.com',
    file_size_formatted: '2.0 MB',
    is_expired: false,
    days_until_expiry: 1095,
    is_pending_verification: false,
    has_expiry_date: true,
    verification_status: 'VERIFIED',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the document record. Auto-generated by the system.',
      example: 'doc12345-6789-abcd-ef01-234567890abc',
      readOnly: true,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the instructor profile UUID. Links document to specific instructor.',
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    document_type_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the document type UUID. Defines the category and validation rules for this document.',
      example: 'dt123456-7890-abcd-ef01-234567890abc',
    },
    education_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to specific education record UUID if this document supports an educational qualification.',
      example: 'edu12345-6789-abcd-ef01-234567890abc',
    },
    experience_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to specific experience record UUID if this document supports work experience.',
      example: 'exp12345-6789-abcd-ef01-234567890abc',
    },
    membership_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to specific membership record UUID if this document supports professional body membership.',
      example: 'mem12345-6789-abcd-ef01-234567890abc',
    },
    original_filename: {
      type: 'string',
      description:
        '**[REQUIRED]** Original filename as uploaded by the user. Preserved for user reference and display purposes.',
      example: 'AWS_Solutions_Architect_Certificate.pdf',
      maxLength: 255,
      minLength: 0,
    },
    title: {
      type: 'string',
      description:
        '**[REQUIRED]** Descriptive title for the document. Used for identification and display in document lists.',
      example: 'AWS Certified Solutions Architect - Professional Certificate',
      maxLength: 255,
      minLength: 0,
    },
    description: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed description of the document content and its relevance to instructor qualifications.',
      example:
        'Professional certification in cloud architecture and solutions design, demonstrating expertise in AWS services and best practices.',
      maxLength: 2000,
      minLength: 0,
    },
    status: {
      $ref: '#/components/schemas/StatusEnum2',
    },
    expiry_date: {
      type: 'string',
      format: 'date',
      description:
        '**[OPTIONAL]** Expiry date of the document if applicable. Used for certificates and time-limited credentials.',
      example: '2027-06-15',
    },
    stored_filename: {
      type: 'string',
      description:
        '**[READ-ONLY]** System-generated filename for secure storage. Used internally for file system operations.',
      example: 'instructor_doc_20240615_143022_abc123.pdf',
      readOnly: true,
    },
    file_path: {
      type: 'string',
      description:
        '**[READ-ONLY]** Full file system path where the document is stored. Used for internal file operations.',
      example: '/documents/instructors/2024/06/instructor_doc_20240615_143022_abc123.pdf',
      readOnly: true,
    },
    file_size_bytes: {
      type: 'integer',
      format: 'int64',
      description: '**[READ-ONLY]** File size in bytes. Automatically calculated during upload.',
      example: 2048576,
      minimum: 1,
      readOnly: true,
    },
    mime_type: {
      type: 'string',
      description:
        '**[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.',
      example: 'application/pdf',
      readOnly: true,
    },
    file_hash: {
      type: 'string',
      description:
        '**[READ-ONLY]** SHA-256 hash of the file content. Used for integrity verification and duplicate detection.',
      example: 'sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6',
      readOnly: true,
    },
    upload_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the document was uploaded. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    is_verified: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Verification status of the document. True if verified by admin, false if not verified, null if pending.',
      example: true,
      readOnly: true,
    },
    verified_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the administrator who verified this document.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    verified_at: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the document was verified. Set automatically when verification is completed.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    verification_notes: {
      type: 'string',
      description:
        '**[READ-ONLY]** Notes or comments from the verification process. Includes details about verification outcome.',
      example: 'Certificate verified against AWS official database. Valid credential confirmed.',
      maxLength: 2000,
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the document record was first created. Automatically set by the system.',
      example: '2024-06-15T14:30:22',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this document record.',
      example: 'instructor@example.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the document record was last modified. Automatically updated by the system.',
      example: '2024-06-16T09:15:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this document record.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    is_expired: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the document has expired based on the expiry date.',
      example: false,
      readOnly: true,
    },
    file_size_formatted: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable formatted file size.',
      example: 2,
      readOnly: true,
    },
    days_until_expiry: {
      type: 'integer',
      format: 'int32',
      description:
        '**[READ-ONLY]** Number of days until document expiry. Returns null if no expiry date or already expired.',
      example: 1095,
      readOnly: true,
    },
    is_pending_verification: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the document is pending verification.',
      example: false,
      readOnly: true,
    },
    has_expiry_date: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the document has an expiry date configured.',
      example: true,
      readOnly: true,
    },
    verification_status: {
      $ref: '#/components/schemas/VerificationStatusEnum',
    },
  },
  required: ['document_type_uuid', 'instructor_uuid', 'original_filename', 'title'],
} as const;

export const ApiResponseInstructorDocumentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/InstructorDocument',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CourseSchema = {
  type: 'object',
  description:
    'Complete course with metadata, content organization, and publication status supporting multiple categories',
  example: {
    uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    name: 'Advanced Java Programming',
    instructor_uuid: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    category_uuids: [
      'c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl',
      'p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl',
    ],
    difficulty_uuid: 'd1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl',
    description: 'Comprehensive course covering advanced Java concepts and enterprise development',
    objectives: 'Master advanced Java features, design patterns, and enterprise frameworks',
    prerequisites: 'Basic Java knowledge and OOP concepts',
    duration_hours: 40,
    duration_minutes: 30,
    class_limit: 25,
    price: 299.99,
    age_lower_limit: 18,
    age_upper_limit: 65,
    thumbnail_url: 'https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg',
    intro_video_url: 'https://cdn.sarafrika.com/courses/java-advanced-intro.mp4',
    banner_url: 'https://cdn.sarafrika.com/courses/java-advanced-banner.jpg',
    status: 'PUBLISHED',
    active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    category_names: ['Programming', 'Advanced Java'],
    total_duration_display: '40 hours 30 minutes',
    is_free: false,
    is_published: true,
    is_draft: false,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the course. Auto-generated by the system.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        '**[REQUIRED]** Course title. Should be descriptive and engaging for potential students.',
      example: 'Advanced Java Programming',
      maxLength: 255,
      minLength: 0,
    },
    instructor_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        "**[REQUIRED]** Reference to the instructor's UUID who created and owns this course.",
      example: 'i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl',
    },
    category_uuids: {
      type: 'array',
      description:
        '**[OPTIONAL]** List of category UUIDs for organizing the course. A course can belong to multiple categories.',
      example: ['c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl', 'p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl'],
      items: {
        type: 'string',
        format: 'uuid',
      },
      uniqueItems: true,
    },
    difficulty_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to the difficulty level UUID indicating course complexity.',
      example: 'd1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl',
    },
    description: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed course description explaining content, approach, and outcomes.',
      example:
        'Comprehensive course covering advanced Java concepts including concurrency, design patterns, and enterprise development frameworks',
      maxLength: 2000,
      minLength: 0,
    },
    objectives: {
      type: 'string',
      description:
        '**[OPTIONAL]** Learning objectives and goals students will achieve upon completion.',
      example:
        'Master advanced Java features, understand design patterns, implement enterprise solutions',
      maxLength: 1000,
      minLength: 0,
    },
    prerequisites: {
      type: 'string',
      description:
        '**[OPTIONAL]** Required knowledge and skills students should have before taking this course.',
      example:
        'Basic Java knowledge, understanding of OOP concepts, familiarity with development tools',
      maxLength: 1000,
      minLength: 0,
    },
    duration_hours: {
      type: 'integer',
      format: 'int32',
      description: '**[REQUIRED]** Course duration in hours.',
      example: 40,
      minimum: 0,
    },
    duration_minutes: {
      type: 'integer',
      format: 'int32',
      description: '**[REQUIRED]** Additional course duration in minutes (0-59).',
      example: 30,
      maximum: 59,
      minimum: 0,
    },
    class_limit: {
      type: 'integer',
      format: 'int32',
      description: '**[OPTIONAL]** Maximum number of students that can enroll in the course.',
      example: 25,
      minimum: 1,
    },
    price: {
      type: 'number',
      description:
        '**[OPTIONAL]** Course price in the system currency. Set to null or 0 for free courses.',
      example: 299.99,
      minimum: 0,
    },
    age_lower_limit: {
      type: 'integer',
      format: 'int32',
      description: '**[OPTIONAL]** Minimum age requirement for course enrollment.',
      example: 18,
      maximum: 120,
      minimum: 1,
    },
    age_upper_limit: {
      type: 'integer',
      format: 'int32',
      description: '**[OPTIONAL]** Maximum age requirement for course enrollment.',
      example: 65,
      maximum: 120,
      minimum: 1,
    },
    thumbnail_url: {
      type: 'string',
      format: 'uri',
      description: '**[OPTIONAL]** URL to course thumbnail image for course listings and previews.',
      example: 'https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg',
      maxLength: 500,
      minLength: 0,
    },
    intro_video_url: {
      type: 'string',
      format: 'uri',
      description:
        '**[OPTIONAL]** URL to course introduction video for marketing and preview purposes.',
      example: 'https://cdn.sarafrika.com/courses/java-advanced-intro.mp4',
      maxLength: 500,
      minLength: 0,
    },
    banner_url: {
      type: 'string',
      format: 'uri',
      description: '**[OPTIONAL]** URL to course banner image for detailed course pages.',
      example: 'https://cdn.sarafrika.com/courses/java-advanced-banner.jpg',
      maxLength: 500,
      minLength: 0,
    },
    status: {
      $ref: '#/components/schemas/StatusEnum3',
    },
    active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the course is actively available to students. Can only be true for published courses.',
      example: true,
    },
    category_names: {
      type: 'array',
      description:
        '**[READ-ONLY]** List of category names this course belongs to. Computed from category mappings.',
      example: ['Programming', 'Advanced Java'],
      items: {
        type: 'string',
      },
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the course was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this course. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the course was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this course. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    is_free: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course is offered for free.',
      example: false,
      readOnly: true,
    },
    is_published: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course is published and discoverable.',
      example: true,
      readOnly: true,
    },
    is_archived: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course is archived and no longer available.',
      example: false,
      readOnly: true,
    },
    is_in_review: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course is currently under review.',
      example: false,
      readOnly: true,
    },
    is_draft: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course is still in draft mode.',
      example: false,
      readOnly: true,
    },
    total_duration_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of total course duration.',
      example: 40,
      readOnly: true,
    },
    has_multiple_categories: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the course belongs to multiple categories.',
      example: true,
      readOnly: true,
    },
    category_count: {
      type: 'integer',
      format: 'int32',
      description: '**[READ-ONLY]** Number of categories this course belongs to.',
      example: 2,
      readOnly: true,
    },
    lifecycle_stage: {
      type: 'string',
      description:
        "**[READ-ONLY]** Human-readable description of the course's current lifecycle stage.",
      example: 'Published and Active',
      readOnly: true,
    },
    accepts_new_enrollments: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the course is currently accepting new student enrollments.',
      example: true,
      readOnly: true,
    },
  },
  required: ['duration_hours', 'duration_minutes', 'instructor_uuid', 'name', 'status'],
} as const;

export const ApiResponseCourseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Course',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CourseRequirementSchema = {
  type: 'object',
  description: 'Course prerequisites and participation requirements',
  example: {
    uuid: 'r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    requirement_type: 'STUDENT',
    requirement_text: 'Basic knowledge of Java programming and object-oriented concepts',
    is_mandatory: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    requirement_category: 'Student Prerequisite',
    is_technical_requirement: true,
    priority_level: 'High',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the course requirement. Auto-generated by the system.',
      example: 'r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl',
      readOnly: true,
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the course UUID that this requirement applies to.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    requirement_type: {
      $ref: '#/components/schemas/RequirementTypeEnum',
    },
    requirement_text: {
      type: 'string',
      description:
        '**[REQUIRED]** Detailed description of the specific requirement or prerequisite.',
      example:
        'Basic knowledge of Java programming and object-oriented concepts including classes, inheritance, and polymorphism',
      maxLength: 1000,
      minLength: 0,
    },
    is_mandatory: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if this requirement is mandatory or optional for course participation.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
  },
  required: ['course_uuid', 'requirement_text', 'requirement_type'],
} as const;

export const ApiResponseCourseRequirementSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/CourseRequirement',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const LessonSchema = {
  type: 'object',
  description: 'Individual lesson within a course containing structured learning content',
  example: {
    uuid: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    lesson_number: 3,
    title: 'Object-Oriented Programming Fundamentals',
    duration_hours: 2,
    duration_minutes: 30,
    description:
      'Introduction to OOP concepts including classes, objects, inheritance, and polymorphism',
    learning_objectives:
      'Understand OOP principles, implement classes and objects, apply inheritance concepts',
    status: 'PUBLISHED',
    active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    duration_display: '2 hours 30 minutes',
    is_published: true,
    lesson_sequence: 'Lesson 3',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the lesson. Auto-generated by the system.',
      example: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
      readOnly: true,
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the parent course UUID that contains this lesson.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    lesson_number: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Sequential number of the lesson within the course. Must be unique per course.',
      example: 3,
      minimum: 1,
    },
    title: {
      type: 'string',
      description:
        '**[REQUIRED]** Descriptive title of the lesson that clearly indicates the learning content.',
      example: 'Object-Oriented Programming Fundamentals',
      maxLength: 255,
      minLength: 0,
    },
    duration_hours: {
      type: 'integer',
      format: 'int32',
      description: '**[REQUIRED]** Estimated lesson duration in hours.',
      example: 2,
      minimum: 0,
    },
    duration_minutes: {
      type: 'integer',
      format: 'int32',
      description: '**[REQUIRED]** Additional lesson duration in minutes (0-59).',
      example: 30,
      maximum: 59,
      minimum: 0,
    },
    description: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed description of the lesson content and what students will learn.',
      example:
        'Introduction to Object-Oriented Programming concepts including classes, objects, inheritance, and polymorphism with practical examples',
      maxLength: 1000,
      minLength: 0,
    },
    learning_objectives: {
      type: 'string',
      description: '**[OPTIONAL]** Specific learning objectives and outcomes for this lesson.',
      example:
        'Understand OOP principles, implement classes and objects, apply inheritance concepts in practical scenarios',
      maxLength: 500,
      minLength: 0,
    },
    status: {
      $ref: '#/components/schemas/StatusEnum',
    },
    active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the lesson is actively available to students. Can only be true for published lessons.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the lesson was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this lesson. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the lesson was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this lesson. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    is_published: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the lesson is published and accessible to students.',
      example: true,
      readOnly: true,
    },
    duration_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of lesson duration.',
      example: 2,
      readOnly: true,
    },
    lesson_sequence: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted lesson sequence for display purposes.',
      example: 'Lesson 3',
      readOnly: true,
    },
  },
  required: [
    'course_uuid',
    'duration_hours',
    'duration_minutes',
    'lesson_number',
    'status',
    'title',
  ],
} as const;

export const ApiResponseLessonSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Lesson',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const LessonContentSchema = {
  type: 'object',
  description: 'Individual content item within a lesson supporting various media types',
  example: {
    uuid: 'l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl',
    lesson_uuid: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
    content_type_uuid: 'c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl',
    title: 'Introduction to Classes and Objects',
    description: 'Comprehensive video explanation of OOP fundamentals with examples',
    content_text: null,
    file_url: 'https://cdn.sarafrika.com/lessons/oop-intro.mp4',
    file_size_bytes: 157286400,
    mime_type: 'video/mp4',
    display_order: 1,
    is_required: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    file_size_display: '150 MB',
    content_category: 'Video Content',
    is_downloadable: true,
    estimated_duration: '15 minutes',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the lesson content. Auto-generated by the system.',
      example: 'l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl',
      readOnly: true,
    },
    lesson_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the lesson UUID that contains this content.',
      example: 'l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl',
    },
    content_type_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the content type UUID defining the format and restrictions.',
      example: 'c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl',
    },
    title: {
      type: 'string',
      description: '**[REQUIRED]** Descriptive title of the content item for student navigation.',
      example: 'Introduction to Classes and Objects',
      maxLength: 255,
      minLength: 0,
    },
    description: {
      type: 'string',
      description: '**[OPTIONAL]** Detailed description of the content and its learning purpose.',
      example:
        'Comprehensive video explanation of object-oriented programming fundamentals with practical examples and code demonstrations',
      maxLength: 1000,
      minLength: 0,
    },
    content_text: {
      type: 'string',
      description:
        '**[OPTIONAL]** Text content for text-based content types. Null for file-based content.',
      example: null,
    },
    file_url: {
      type: 'string',
      format: 'uri',
      description: '**[OPTIONAL]** URL to the uploaded content file. Null for text-based content.',
      example: 'https://cdn.sarafrika.com/lessons/oop-intro.mp4',
      maxLength: 500,
      minLength: 0,
    },
    display_order: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Display order of content within the lesson for sequential presentation.',
      example: 1,
      minimum: 1,
    },
    is_required: {
      type: 'boolean',
      description: '**[OPTIONAL]** Indicates if this content is required for lesson completion.',
      example: true,
    },
    file_size_bytes: {
      type: 'integer',
      format: 'int64',
      description: '**[READ-ONLY]** Size of the uploaded file in bytes. Null for text content.',
      example: 157286400,
      minimum: 0,
      readOnly: true,
    },
    mime_type: {
      type: 'string',
      description:
        '**[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.',
      example: 'video/mp4',
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the content was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this content. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the content was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this content. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    content_category: {
      type: 'string',
      description: '**[READ-ONLY]** Category of content based on its type and format.',
      example: 'Video Content',
      readOnly: true,
    },
    file_size_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of file size.',
      example: 150,
      readOnly: true,
    },
  },
  required: ['content_type_uuid', 'display_order', 'lesson_uuid', 'title'],
} as const;

export const ApiResponseLessonContentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/LessonContent',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CourseAssessmentSchema = {
  type: 'object',
  description: 'Course-level assessment component with weighting for final grade calculation',
  example: {
    uuid: 'c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    assessment_type: 'Attendance',
    title: 'Class Attendance and Participation',
    description: 'Regular attendance and active participation in class discussions and activities',
    weight_percentage: 20,
    rubric_uuid: 'a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl',
    is_required: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'instructor@sarafrika.com',
    assessment_category: 'Participation Component',
    weight_display: '20% of final grade',
    is_major_assessment: false,
    contribution_level: 'Standard Contribution',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the course assessment. Auto-generated by the system.',
      example: 'c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl',
      readOnly: true,
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the course UUID that this assessment belongs to.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    assessment_type: {
      type: 'string',
      description: '**[REQUIRED]** Type of assessment component for categorization and processing.',
      example: 'Attendance',
      maxLength: 50,
      minLength: 0,
    },
    title: {
      type: 'string',
      description:
        '**[REQUIRED]** Title of the assessment component that clearly describes its purpose.',
      example: 'Class Attendance and Participation',
      maxLength: 255,
      minLength: 0,
    },
    description: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed description of the assessment criteria and expectations.',
      example:
        'Regular attendance and active participation in class discussions, group activities, and collaborative learning sessions',
      maxLength: 1000,
      minLength: 0,
    },
    weight_percentage: {
      type: 'number',
      description:
        '**[REQUIRED]** Percentage weight of this assessment in the final grade calculation.',
      example: 20,
      maximum: 100,
      minimum: 0,
    },
    rubric_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.',
      example: 'a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl',
    },
    is_required: {
      type: 'boolean',
      description: '**[OPTIONAL]** Indicates if this assessment is required for course completion.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the assessment was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this assessment. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the assessment was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this assessment. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    assessment_category: {
      type: 'string',
      description: '**[READ-ONLY]** Category classification of the assessment type.',
      example: 'Participation Component',
      readOnly: true,
    },
    weight_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of the weight percentage.',
      example: '20% of final grade',
      readOnly: true,
    },
    is_major_assessment: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this is a major assessment component.',
      example: false,
      readOnly: true,
    },
    contribution_level: {
      type: 'string',
      description: '**[READ-ONLY]** Level of contribution to final grade based on weight.',
      example: 'Standard Contribution',
      readOnly: true,
    },
  },
  required: ['assessment_type', 'course_uuid', 'title', 'weight_percentage'],
} as const;

export const ApiResponseCourseAssessmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/CourseAssessment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const GradingLevelSchema = {
  type: 'object',
  description: 'Grading scale level with points and ordering for assessments',
  example: {
    uuid: 'g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl',
    name: 'Distinction',
    points: 5,
    level_order: 1,
    created_date: '2024-04-01T12:00:00',
    created_by: 'system',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
    grade_display: 'Level 1: Distinction (5 points)',
    is_passing_grade: true,
    grade_category: 'Excellent',
    percentage_range: '90-100%',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the grading level. Auto-generated by the system.',
      example: 'g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the grading level. Must be unique across all grading levels.',
      example: 'Distinction',
      maxLength: 50,
      minLength: 0,
    },
    points: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Point value assigned to this grading level for scoring calculations.',
      example: 5,
      maximum: 10,
      minimum: 1,
    },
    level_order: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Numeric order defining the grade hierarchy. Lower numbers indicate higher grades.',
      example: 1,
      maximum: 10,
      minimum: 1,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the grading level was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this grading level. Used for audit trails.',
      example: 'system',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the grading level was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this grading level. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    grade_display: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted display of grade level with complete information.',
      example: 'Level 1: Distinction (5 points)',
      readOnly: true,
    },
  },
  required: ['level_order', 'name', 'points'],
} as const;

export const ApiResponseGradingLevelSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/GradingLevel',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const DifficultyLevelSchema = {
  type: 'object',
  description: 'Course difficulty level defining learning progression stages',
  example: {
    uuid: 'd1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl',
    name: 'Intermediate',
    level_order: 3,
    description: 'For learners with basic knowledge seeking to develop intermediate skills',
    created_date: '2024-04-01T12:00:00',
    created_by: 'system',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
    display_name: 'Level 3: Intermediate',
    is_entry_level: false,
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the difficulty level. Auto-generated by the system.',
      example: 'd1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the difficulty level. Must be unique across all difficulty levels.',
      example: 'Intermediate',
      maxLength: 50,
      minLength: 0,
    },
    level_order: {
      type: 'integer',
      format: 'int32',
      description:
        '**[REQUIRED]** Numeric order defining the progression sequence. Lower numbers indicate easier levels.',
      example: 3,
      maximum: 10,
      minimum: 1,
    },
    description: {
      type: 'string',
      description:
        '**[OPTIONAL]** Detailed description of the difficulty level and target audience.',
      example:
        'For learners with basic knowledge seeking to develop intermediate skills and tackle more complex challenges',
      maxLength: 500,
      minLength: 0,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the difficulty level was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this difficulty level. Used for audit trails.',
      example: 'system',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the difficulty level was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this difficulty level. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    display_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted display name including level order for UI presentation.',
      example: 'Level 3: Intermediate',
      readOnly: true,
    },
    is_entry_level: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this is the entry-level difficulty for beginners.',
      example: false,
      readOnly: true,
    },
  },
  required: ['level_order', 'name'],
} as const;

export const ApiResponseDifficultyLevelSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/DifficultyLevel',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ContentTypeSchema = {
  type: 'object',
  description: 'Supported content type with file format specifications and size limits',
  example: {
    uuid: 'c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl',
    name: 'Video',
    mime_types: ['video/mp4', 'video/webm', 'video/mpeg'],
    max_file_size_mb: 500,
    created_date: '2024-04-01T12:00:00',
    created_by: 'system',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
    supported_formats: 'MP4, WebM, MPEG',
    size_limit_display: '500 MB',
    is_media_type: true,
    upload_category: 'Large Media Files',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the content type. Auto-generated by the system.',
      example: 'c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the content type. Must be unique across all content types.',
      example: 'Video',
      maxLength: 50,
      minLength: 0,
    },
    mime_types: {
      type: 'array',
      description: '**[REQUIRED]** Array of supported MIME types for this content type.',
      example: ['video/mp4', 'video/webm', 'video/mpeg'],
      items: {
        type: 'string',
      },
      maxItems: 2147483647,
      minItems: 1,
    },
    max_file_size_mb: {
      type: 'integer',
      format: 'int32',
      description:
        '**[OPTIONAL]** Maximum file size allowed in megabytes. Null means no size limit.',
      example: 500,
      minimum: 1,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the content type was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this content type. Used for audit trails.',
      example: 'system',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the content type was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this content type. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    upload_category: {
      type: 'string',
      description: '**[READ-ONLY]** Category for organizing uploads in the user interface.',
      example: 'Large Media Files',
      readOnly: true,
    },
    is_media_type: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this content type is for media files.',
      example: true,
      readOnly: true,
    },
    supported_formats: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable list of supported file formats.',
      example: 'MP4, WebM, MPEG',
      readOnly: true,
    },
    size_limit_display: {
      type: 'string',
      description: '**[READ-ONLY]** Human-readable format of maximum file size.',
      example: 500,
      readOnly: true,
    },
  },
  required: ['mime_types', 'name'],
} as const;

export const ApiResponseContentTypeSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/ContentType',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CategorySchema = {
  type: 'object',
  description: 'Course category supporting hierarchical organization',
  example: {
    uuid: 'c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl',
    name: 'Programming',
    description: 'Software development and programming courses',
    parent_uuid: 't1e2c3h4-5n6o-7l8o-9g10-abcdefghijkl',
    is_active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-15T15:30:00',
    updated_by: 'admin@sarafrika.com',
    is_root_category: false,
    category_path: 'Technology > Programming',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the category. Auto-generated by the system.',
      example: 'c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description: '**[REQUIRED]** Category name. Must be unique within the same parent category.',
      example: 'Programming',
      maxLength: 100,
      minLength: 0,
    },
    description: {
      type: 'string',
      description: '**[OPTIONAL]** Detailed description of the category and its scope.',
      example:
        'Software development and programming courses covering various languages and frameworks',
      maxLength: 500,
      minLength: 0,
    },
    parent_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to parent category UUID for hierarchical organization. Null for root categories.',
      example: 't1e2c3h4-5n6o-7l8o-9g10-abcdefghijkl',
    },
    is_active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the category is active and available for course assignment.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the category was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this category. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the category was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this category. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    is_root_category: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if this is a root category with no parent.',
      example: false,
      readOnly: true,
    },
    category_path: {
      type: 'string',
      description:
        '**[READ-ONLY]** Hierarchical path showing category position in the tree structure.',
      example: 'Technology > Programming',
      readOnly: true,
    },
  },
  required: ['name'],
} as const;

export const ApiResponseCategorySchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Category',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CertificateSchema = {
  type: 'object',
  description: 'Issued certificate documenting course or program completion',
  example: {
    uuid: 'c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl',
    certificate_number: 'CERT-2024-JAV-001234',
    student_uuid: 's1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    program_uuid: null,
    template_uuid: 't1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl',
    issued_date: '2024-05-15T16:30:00',
    completion_date: '2024-05-15T15:45:00',
    final_grade: 87.5,
    certificate_url: 'https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf',
    is_valid: true,
    revoked_at: null,
    revoked_reason: null,
    created_date: '2024-05-15T16:30:00',
    created_by: 'system',
    updated_date: '2024-05-15T16:30:00',
    updated_by: 'system',
    certificate_type: 'Course Completion',
    grade_letter: 'B+',
    is_downloadable: true,
    validity_status: 'Valid Certificate',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the certificate. Auto-generated by the system.',
      example: 'c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl',
      readOnly: true,
    },
    student_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the student UUID who earned this certificate.',
      example: 's1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl',
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to the course UUID if this is a course completion certificate. Mutually exclusive with program_uuid.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    program_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** Reference to the program UUID if this is a program completion certificate. Mutually exclusive with course_uuid.',
      example: null,
    },
    template_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the certificate template UUID used for generating this certificate.',
      example: 't1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl',
    },
    completion_date: {
      type: 'string',
      format: 'date-time',
      description: '**[REQUIRED]** Date when the course or program was completed by the student.',
      example: '2024-05-15T15:45:00',
    },
    final_grade: {
      type: 'number',
      description: '**[OPTIONAL]** Final grade percentage achieved by the student.',
      example: 87.5,
      maximum: 100,
      minimum: 0,
    },
    is_valid: {
      type: 'boolean',
      description: '**[OPTIONAL]** Indicates if the certificate is valid and has not been revoked.',
      example: true,
    },
    certificate_number: {
      type: 'string',
      description:
        '**[READ-ONLY]** Unique certificate number for verification and reference purposes.',
      example: 'CERT-2024-JAV-001234',
      readOnly: true,
    },
    issued_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the certificate was issued. Automatically set by the system.',
      example: '2024-05-15T16:30:00',
      readOnly: true,
    },
    certificate_url: {
      type: 'string',
      format: 'uri',
      description: '**[READ-ONLY]** URL to the generated certificate PDF file for download.',
      example: 'https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf',
      readOnly: true,
    },
    revoked_at: {
      type: 'string',
      format: 'date-time',
      description: '**[READ-ONLY]** Timestamp when the certificate was revoked, if applicable.',
      example: null,
      readOnly: true,
    },
    revoked_reason: {
      type: 'string',
      description: '**[READ-ONLY]** Reason for certificate revocation, if applicable.',
      example: null,
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the certificate record was created. Automatically set by the system.',
      example: '2024-05-15T16:30:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this certificate. Used for audit trails.',
      example: 'system',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the certificate was last modified. Automatically updated by the system.',
      example: '2024-05-15T16:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this certificate. Used for audit trails.',
      example: 'system',
      readOnly: true,
    },
    certificate_type: {
      type: 'string',
      description: '**[READ-ONLY]** Type of certificate based on completion achievement.',
      example: 'Course Completion',
      readOnly: true,
    },
    is_downloadable: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the certificate can be downloaded by the student.',
      example: true,
      readOnly: true,
    },
    grade_letter: {
      type: 'string',
      description: '**[READ-ONLY]** Letter grade representation of the final grade.',
      example: 'B+',
      readOnly: true,
    },
    validity_status: {
      type: 'string',
      description: '**[READ-ONLY]** Current validity status of the certificate.',
      example: 'Valid Certificate',
      readOnly: true,
    },
  },
  required: ['completion_date', 'student_uuid', 'template_uuid'],
} as const;

export const ApiResponseCertificateSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Certificate',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CertificateTemplateSchema = {
  type: 'object',
  description: 'Certificate template with design elements and layout configuration',
  example: {
    uuid: 'c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl',
    name: 'Music Course Completion Certificate',
    template_type: 'COURSE_COMPLETION',
    template_html:
      "<div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>",
    template_css:
      ".certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }",
    background_image_url: 'https://storage.sarafrika.com/templates/music_cert_bg.jpg',
    status: 'PUBLISHED',
    active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'admin@sarafrika.com',
    updated_date: '2024-04-05T14:20:00',
    updated_by: 'design@sarafrika.com',
    template_category: 'Course Completion Template',
    is_published: true,
    design_complexity: 'Standard Design',
    template_scope: 'General Use Template',
    usage_summary: 'Active Public Template',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the certificate template. Auto-generated by the system.',
      example: 'c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl',
      readOnly: true,
    },
    name: {
      type: 'string',
      description:
        '**[REQUIRED]** Name of the certificate template that clearly describes its purpose.',
      example: 'Music Course Completion Certificate',
      maxLength: 255,
      minLength: 0,
    },
    template_type: {
      $ref: '#/components/schemas/TemplateTypeEnum',
    },
    template_html: {
      type: 'string',
      description: '**[OPTIONAL]** HTML content defining the certificate layout and structure.',
      example:
        "<div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>",
      maxLength: 20000,
      minLength: 0,
    },
    template_css: {
      type: 'string',
      description: '**[OPTIONAL]** CSS styles for the certificate template design.',
      example:
        ".certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }",
      maxLength: 50000,
      minLength: 0,
    },
    background_image_url: {
      type: 'string',
      description: '**[OPTIONAL]** URL to the background image for the certificate.',
      example: 'https://storage.sarafrika.com/templates/music_cert_bg.jpg',
      maxLength: 500,
      minLength: 0,
    },
    active: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the template is actively available for use. Can only be true for published templates.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the template was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this template. Used for audit trails.',
      example: 'admin@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the template was last modified. Automatically updated by the system.',
      example: '2024-04-05T14:20:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this template. Used for audit trails.',
      example: 'design@sarafrika.com',
      readOnly: true,
    },
    design_complexity: {
      type: 'string',
      description:
        "**[READ-ONLY]** Assessment of the template's design complexity based on HTML and CSS content.",
      example: 'Standard Design',
      readOnly: true,
    },
  },
  required: ['name', 'template_type'],
} as const;

export const ApiResponseCertificateTemplateSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/CertificateTemplate',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const AssignmentSchema = {
  type: 'object',
  description: 'Assignment with learning activities and assessment criteria',
  example: {
    uuid: 'a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl',
    lesson_uuid: 'l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl',
    title: 'Music Theory Fundamentals Assignment',
    description:
      'Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions',
    instructions:
      'Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.',
    due_date: '2024-04-15T23:59:59',
    max_points: 100,
    rubric_uuid: 'r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl',
    submission_types: ['PDF', 'AUDIO', 'TEXT'],
    status: 'PUBLISHED',
    active: true,
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
    updated_date: '2024-04-05T10:30:00',
    updated_by: 'instructor@sarafrika.com',
    assignment_category: 'Theory Assignment',
    is_published: true,
    points_display: '100.00 points',
    assignment_scope: 'Lesson-Specific',
    submission_summary: '3 submission types accepted',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the assignment. Auto-generated by the system.',
      example: 'a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl',
      readOnly: true,
    },
    lesson_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the lesson UUID this assignment belongs to.',
      example: 'l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl',
    },
    title: {
      type: 'string',
      description: '**[REQUIRED]** Title of the assignment that clearly describes its purpose.',
      example: 'Music Theory Fundamentals Assignment',
      maxLength: 255,
      minLength: 0,
    },
    description: {
      type: 'string',
      description: "**[OPTIONAL]** Detailed description of the assignment's objectives and scope.",
      example:
        'Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions',
      maxLength: 2000,
      minLength: 0,
    },
    instructions: {
      type: 'string',
      description: '**[OPTIONAL]** Detailed instructions for completing the assignment.',
      example:
        'Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.',
      maxLength: 5000,
      minLength: 0,
    },
    due_date: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Due date and time for assignment submission.',
      example: '2024-04-15T23:59:59',
    },
    max_points: {
      type: 'number',
      description: '**[OPTIONAL]** Maximum points that can be earned for this assignment.',
      example: 100,
      minimum: 0,
    },
    rubric_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[OPTIONAL]** Reference to the rubric UUID used for grading this assignment.',
      example: 'r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl',
    },
    submission_types: {
      type: 'array',
      description: '**[OPTIONAL]** Array of accepted submission types for this assignment.',
      example: ['PDF', 'AUDIO', 'TEXT'],
      items: {
        type: 'string',
      },
    },
    is_published: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the assignment is actively available for students. Can only be true for published assignments.',
      example: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the assignment was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this assignment. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the assignment was last modified. Automatically updated by the system.',
      example: '2024-04-05T10:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this assignment. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    assignment_category: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted category of the assignment based on its characteristics.',
      example: 'Theory Assignment',
      readOnly: true,
    },
    points_display: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted display of the maximum points for this assignment.',
      example: 100,
      readOnly: true,
    },
    assignment_scope: {
      type: 'string',
      description: '**[READ-ONLY]** Scope of the assignment - lesson-specific or standalone.',
      example: 'Lesson-Specific',
      readOnly: true,
    },
    submission_summary: {
      type: 'string',
      description: '**[READ-ONLY]** Summary of accepted submission types for this assignment.',
      example: 3,
      readOnly: true,
    },
  },
  required: ['lesson_uuid', 'title'],
} as const;

export const ApiResponseAssignmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Assignment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseStudentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Student',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseStringSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'string',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseInvitationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Invitation',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const InvitationSchema = {
  type: 'object',
  description:
    'Complete invitation information including recipient details, organization/branch assignment, invitation status, and lifecycle tracking',
  example: {
    uuid: '550e8400-e29b-41d4-a716-446655440000',
    token: 'abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd',
    recipient_email: 'john.doe@example.com',
    recipient_name: 'John Doe',
    organisation_uuid: '550e8400-e29b-41d4-a716-446655440001',
    organisation_name: 'Acme Training Institute',
    branch_uuid: '550e8400-e29b-41d4-a716-446655440002',
    branch_name: 'Downtown Branch',
    domain_uuid: '550e8400-e29b-41d4-a716-446655440003',
    domain_name: 'instructor',
    inviter_uuid: '550e8400-e29b-41d4-a716-446655440004',
    inviter_name: 'Jane Smith',
    status: 'PENDING',
    expires_at: '2025-07-16T14:30:00',
    accepted_at: null,
    declined_at: null,
    user_uuid: null,
    notes: "Welcome to our training program! We're excited to have you join our team.",
    created_date: '2025-07-09T09:00:00',
    updated_date: '2025-07-09T09:00:00',
    created_by: 'admin@organization.com',
    updated_by: 'admin@organization.com',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the invitation. Auto-generated by the system and cannot be modified.',
      example: '550e8400-e29b-41d4-a716-446655440000',
      readOnly: true,
    },
    token: {
      type: 'string',
      description:
        '**[READ-ONLY]** Unique token used for invitation acceptance and decline links. Generated by the system and used in email URLs for secure invitation processing.',
      example: 'abc123def456ghi789jkl012mno345pqr678stu901vwx234yz0123456789abcd',
      maxLength: 64,
      minLength: 64,
      readOnly: true,
    },
    recipient_email: {
      type: 'string',
      format: 'email',
      description:
        '**[REQUIRED]** Email address of the invitation recipient. Must be a valid email format and will be used to send invitation emails.',
      example: 'john.doe@example.com',
      maxLength: 100,
      minLength: 0,
    },
    recipient_name: {
      type: 'string',
      description:
        '**[REQUIRED]** Full name of the invitation recipient. Used in email templates and for display purposes throughout the invitation process.',
      example: 'John Doe',
      maxLength: 150,
      minLength: 0,
    },
    organisation_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** UUID of the organization the user is being invited to join. References the target organization for this invitation.',
      example: '550e8400-e29b-41d4-a716-446655440001',
    },
    branch_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[OPTIONAL]** UUID of the training branch for branch-specific invitations. When provided, the invitation is for a specific branch within the organization.',
      example: '550e8400-e29b-41d4-a716-446655440002',
    },
    domain_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** UUID of the user domain/role being offered to the recipient. Determines what permissions and access the user will have upon acceptance.',
      example: '550e8400-e29b-41d4-a716-446655440003',
    },
    inviter_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** UUID of the user who sent the invitation. References the user who initiated this invitation process.',
      example: '550e8400-e29b-41d4-a716-446655440004',
    },
    status: {
      $ref: '#/components/schemas/StatusEnum4',
    },
    notes: {
      type: 'string',
      description:
        '**[OPTIONAL]** Optional notes or message included with the invitation. Can contain welcoming text, instructions, or other relevant information for the recipient.',
      example: "Welcome to our training program! We're excited to have you join our team.",
      maxLength: 500,
      minLength: 0,
    },
    organisation_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Name of the organization for display purposes. Populated by the system based on the organisation_uuid and cannot be directly modified.',
      example: 'Acme Training Institute',
      readOnly: true,
    },
    branch_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Name of the training branch for display purposes. Populated by the system based on the branch_uuid and cannot be directly modified.',
      example: 'Downtown Branch',
      readOnly: true,
    },
    domain_name: {
      $ref: '#/components/schemas/DomainNameEnum',
    },
    inviter_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Full name of the user who sent the invitation. Cached for performance and email template purposes, automatically populated by the system.',
      example: 'Jane Smith',
      maxLength: 150,
      readOnly: true,
    },
    expires_at: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Date and time when the invitation expires in ISO 8601 format. After this time, the invitation cannot be accepted and will be marked as expired.',
      example: '2025-07-16T14:30:00',
      readOnly: true,
    },
    accepted_at: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Date and time when the invitation was accepted in ISO 8601 format. Only populated when the invitation status is ACCEPTED.',
      example: '2025-07-10T10:15:30',
      readOnly: true,
    },
    declined_at: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Date and time when the invitation was declined in ISO 8601 format. Only populated when the invitation status is DECLINED.',
      example: '2025-07-10T16:45:00',
      readOnly: true,
    },
    user_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** UUID of the user who accepted the invitation. Only populated when the invitation status is ACCEPTED, linking to the actual user account.',
      example: '550e8400-e29b-41d4-a716-446655440005',
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the invitation was first created in ISO 8601 format. Automatically set by the system and cannot be modified.',
      example: '2025-07-09T09:00:00',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the invitation was last modified in ISO 8601 format. Automatically updated by the system on any changes and cannot be directly modified.',
      example: '2025-07-09T09:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or identifier of who created the invitation. Used for audit trail purposes and automatically populated by the system.',
      example: 'admin@organization.com',
      maxLength: 50,
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or identifier of who last modified the invitation. Used for audit trail purposes and automatically updated by the system on changes.',
      example: 'admin@organization.com',
      maxLength: 50,
      readOnly: true,
    },
  },
  required: [
    'domain_uuid',
    'inviter_uuid',
    'organisation_uuid',
    'recipient_email',
    'recipient_name',
  ],
} as const;

export const ApiResponseIntegerSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'integer',
      format: 'int32',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseInstructorSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/Instructor',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'object',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseAssignmentSubmissionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/AssignmentSubmission',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const AssignmentSubmissionSchema = {
  type: 'object',
  description: 'Student submission for an assignment with grading and feedback information',
  example: {
    uuid: 's1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl',
    enrollment_uuid: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
    assignment_uuid: 'a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl',
    submission_text:
      'This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.',
    file_urls: [
      'https://storage.sarafrika.com/submissions/audio_example.mp3',
      'https://storage.sarafrika.com/submissions/written_analysis.pdf',
    ],
    submitted_at: '2024-04-10T14:30:00',
    status: 'GRADED',
    score: 85,
    max_score: 100,
    percentage: 85,
    instructor_comments:
      'Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.',
    graded_at: '2024-04-12T16:45:00',
    graded_by_uuid: 'i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl',
    created_date: '2024-04-10T14:30:00',
    created_by: 'student@sarafrika.com',
    updated_date: '2024-04-12T16:45:00',
    updated_by: 'instructor@sarafrika.com',
    submission_category: 'Mixed Media Submission',
    is_graded: true,
    grade_display: '85.00 / 100.00 (85%)',
    submission_status_display: 'Graded - Instructor Feedback Available',
    file_count_display: '2 files attached',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the assignment submission. Auto-generated by the system.',
      example: 's1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl',
      readOnly: true,
    },
    enrollment_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the enrollment UUID of the student making this submission.',
      example: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
    },
    assignment_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the assignment UUID this submission is for.',
      example: 'a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl',
    },
    submission_text: {
      type: 'string',
      description: "**[OPTIONAL]** Text content of the student's submission.",
      example:
        'This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.',
      maxLength: 10000,
      minLength: 0,
    },
    file_urls: {
      type: 'array',
      description: '**[OPTIONAL]** Array of file URLs attached to this submission.',
      example: [
        'https://storage.sarafrika.com/submissions/audio_example.mp3',
        'https://storage.sarafrika.com/submissions/written_analysis.pdf',
      ],
      items: {
        type: 'string',
      },
    },
    submitted_at: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the submission was made by the student.',
      example: '2024-04-10T14:30:00',
    },
    status: {
      $ref: '#/components/schemas/StatusEnum5',
    },
    score: {
      type: 'number',
      description: '**[OPTIONAL]** Score awarded to this submission by the instructor.',
      example: 85,
      minimum: 0,
    },
    max_score: {
      type: 'number',
      description: '**[OPTIONAL]** Maximum possible score for this submission.',
      example: 100,
      minimum: 0,
    },
    percentage: {
      type: 'number',
      description: '**[OPTIONAL]** Percentage score calculated from score and max_score.',
      example: 85,
      maximum: 100,
      minimum: 0,
    },
    instructor_comments: {
      type: 'string',
      description: "**[OPTIONAL]** Instructor's feedback and comments on the submission.",
      example:
        'Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.',
      maxLength: 5000,
      minLength: 0,
    },
    graded_at: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the submission was graded by the instructor.',
      example: '2024-04-12T16:45:00',
    },
    graded_by_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[OPTIONAL]** Reference to the instructor UUID who graded this submission.',
      example: 'i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the submission was created. Automatically set by the system.',
      example: '2024-04-10T14:30:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the student who created this submission. Used for audit trails.',
      example: 'student@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the submission was last modified. Automatically updated by the system.',
      example: '2024-04-12T16:45:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this submission. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    is_graded: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the submission has been graded by an instructor.',
      example: true,
      readOnly: true,
    },
    submission_category: {
      type: 'string',
      description:
        '**[READ-ONLY]** Formatted category of the submission based on its content type.',
      example: 'Mixed Media Submission',
      readOnly: true,
    },
    grade_display: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted display of the grade information.',
      example: 85,
      readOnly: true,
    },
    submission_status_display: {
      type: 'string',
      description:
        '**[READ-ONLY]** Comprehensive status indicating submission state and availability of feedback.',
      example: 'Graded - Instructor Feedback Available',
      readOnly: true,
    },
    file_count_display: {
      type: 'string',
      description: '**[READ-ONLY]** Summary of files attached to this submission.',
      example: 2,
      readOnly: true,
    },
  },
  required: ['assignment_uuid', 'enrollment_uuid', 'status'],
} as const;

export const ApiResponsePagedDTOUserSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOUser',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PageLinksSchema = {
  type: 'object',
  properties: {
    first: {
      type: 'string',
    },
    previous: {
      type: 'string',
    },
    self: {
      type: 'string',
    },
    next: {
      type: 'string',
    },
    last: {
      type: 'string',
    },
  },
} as const;

export const PageMetadataSchema = {
  type: 'object',
  properties: {
    pageNumber: {
      type: 'integer',
      format: 'int32',
    },
    pageSize: {
      type: 'integer',
      format: 'int32',
    },
    totalElements: {
      type: 'integer',
      format: 'int64',
    },
    totalPages: {
      type: 'integer',
      format: 'int32',
    },
    hasNext: {
      type: 'boolean',
    },
    hasPrevious: {
      type: 'boolean',
    },
    first: {
      type: 'boolean',
    },
    last: {
      type: 'boolean',
    },
  },
} as const;

export const PagedDTOUserSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/User',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListInvitationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Invitation',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOTrainingBranchSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOTrainingBranch',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOTrainingBranchSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TrainingBranch',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOStudentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOStudent',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOStudentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Student',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const PageSchema = {
  type: 'object',
  properties: {
    totalElements: {
      type: 'integer',
      format: 'int64',
    },
    totalPages: {
      type: 'integer',
      format: 'int32',
    },
    first: {
      type: 'boolean',
    },
    last: {
      type: 'boolean',
    },
    pageable: {
      $ref: '#/components/schemas/PageableObject',
    },
    size: {
      type: 'integer',
      format: 'int32',
    },
    content: {
      type: 'array',
      items: {
        type: 'object',
      },
    },
    number: {
      type: 'integer',
      format: 'int32',
    },
    sort: {
      $ref: '#/components/schemas/SortObject',
    },
    numberOfElements: {
      type: 'integer',
      format: 'int32',
    },
    empty: {
      type: 'boolean',
    },
  },
} as const;

export const PageableObjectSchema = {
  type: 'object',
  properties: {
    paged: {
      type: 'boolean',
    },
    pageNumber: {
      type: 'integer',
      format: 'int32',
    },
    pageSize: {
      type: 'integer',
      format: 'int32',
    },
    offset: {
      type: 'integer',
      format: 'int64',
    },
    sort: {
      $ref: '#/components/schemas/SortObject',
    },
    unpaged: {
      type: 'boolean',
    },
  },
} as const;

export const SortObjectSchema = {
  type: 'object',
  properties: {
    sorted: {
      type: 'boolean',
    },
    empty: {
      type: 'boolean',
    },
    unsorted: {
      type: 'boolean',
    },
  },
} as const;

export const ApiResponsePagedDTOQuizSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOQuiz',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOQuizSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Quiz',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseBigDecimalSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'number',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseListQuizQuestionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/QuizQuestion',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOQuizQuestionOptionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOQuizQuestionOption',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOQuizQuestionOptionSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/QuizQuestionOption',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseMapStringLongSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'object',
      additionalProperties: {
        type: 'integer',
        format: 'int64',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOQuizAttemptSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOQuizAttempt',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOQuizAttemptSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/QuizAttempt',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const QuizAttemptSchema = {
  type: 'object',
  description: 'Student quiz attempt with timing, scoring, and completion tracking',
  example: {
    uuid: 'q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl',
    enrollment_uuid: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
    quiz_uuid: 'q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl',
    attempt_number: 2,
    started_at: '2024-04-10T14:15:00',
    submitted_at: '2024-04-10T15:30:00',
    time_taken_minutes: 75,
    score: 85,
    max_score: 100,
    percentage: 85,
    is_passed: true,
    status: 'GRADED',
    created_date: '2024-04-10T14:15:00',
    created_by: 'student@sarafrika.com',
    updated_date: '2024-04-10T15:30:00',
    updated_by: 'system@sarafrika.com',
    attempt_category: 'Graded Attempt',
    is_completed: true,
    grade_display: '85.00 / 100.00 (85%)',
    time_display: '1 hour 15 minutes',
    performance_summary: 'Passed on attempt 2 with 85% score',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the quiz attempt. Auto-generated by the system.',
      example: 'q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl',
      readOnly: true,
    },
    enrollment_uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[REQUIRED]** Reference to the enrollment UUID of the student taking the quiz.',
      example: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
    },
    quiz_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the quiz UUID being attempted.',
      example: 'q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl',
    },
    attempt_number: {
      type: 'integer',
      format: 'int32',
      description:
        '**[OPTIONAL]** Sequential number of this attempt for the same quiz by the same student.',
      example: 2,
      minimum: 1,
    },
    started_at: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the student started the quiz attempt.',
      example: '2024-04-10T14:15:00',
    },
    submitted_at: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the student submitted the quiz attempt.',
      example: '2024-04-10T15:30:00',
    },
    time_taken_minutes: {
      type: 'integer',
      format: 'int32',
      description: '**[OPTIONAL]** Total time taken to complete the quiz in minutes.',
      example: 75,
      minimum: 0,
    },
    score: {
      type: 'number',
      description: '**[OPTIONAL]** Score achieved by the student on this quiz attempt.',
      example: 85,
      minimum: 0,
    },
    max_score: {
      type: 'number',
      description: '**[OPTIONAL]** Maximum possible score for this quiz.',
      example: 100,
      minimum: 0,
    },
    percentage: {
      type: 'number',
      description: '**[OPTIONAL]** Percentage score calculated from score and max_score.',
      example: 85,
      maximum: 100,
      minimum: 0,
    },
    is_passed: {
      type: 'boolean',
      description:
        '**[OPTIONAL]** Indicates if the student passed the quiz based on passing criteria.',
      example: true,
    },
    status: {
      $ref: '#/components/schemas/StatusEnum6',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the attempt was created. Automatically set by the system.',
      example: '2024-04-10T14:15:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this attempt. Used for audit trails.',
      example: 'student@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the attempt was last modified. Automatically updated by the system.',
      example: '2024-04-10T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this attempt. Used for audit trails.',
      example: 'system@sarafrika.com',
      readOnly: true,
    },
    is_completed: {
      type: 'boolean',
      description:
        '**[READ-ONLY]** Indicates if the quiz attempt has been completed (submitted or graded).',
      example: true,
      readOnly: true,
    },
    grade_display: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted display of the grade information.',
      example: 85,
      readOnly: true,
    },
    attempt_category: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted category of the attempt based on outcome and status.',
      example: 'Graded Attempt',
      readOnly: true,
    },
    performance_summary: {
      type: 'string',
      description: '**[READ-ONLY]** Comprehensive summary of the quiz attempt performance.',
      example: 'Passed on attempt 2 with 85% score',
      readOnly: true,
    },
    time_display: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted display of the time taken to complete the quiz.',
      example: 1,
      readOnly: true,
    },
  },
  required: ['enrollment_uuid', 'quiz_uuid', 'status'],
} as const;

export const ApiResponsePagedDTOQuizQuestionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOQuizQuestion',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOQuizQuestionSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/QuizQuestion',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOProgramRequirementSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOProgramRequirement',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOProgramRequirementSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProgramRequirement',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOProgramEnrollmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOProgramEnrollment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOProgramEnrollmentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProgramEnrollment',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ProgramEnrollmentSchema = {
  type: 'object',
  description:
    'Student enrollment in an educational program with progress tracking and completion details',
  example: {
    uuid: 'p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl',
    student_uuid: 's1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl',
    program_uuid: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    enrollment_date: '2024-04-01T09:00:00',
    completion_date: '2024-06-30T16:45:00',
    status: 'COMPLETED',
    progress_percentage: 100,
    final_grade: 87.25,
    created_date: '2024-04-01T09:00:00',
    created_by: 'student@sarafrika.com',
    updated_date: '2024-06-30T16:45:00',
    updated_by: 'system@sarafrika.com',
    enrollment_category: 'Completed Program Enrollment',
    is_active: false,
    progress_display: '100.00% Complete',
    enrollment_duration: '90 days',
    status_summary: 'Successfully completed program with final grade of 87.25',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the program enrollment. Auto-generated by the system.',
      example: 'p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl',
      readOnly: true,
    },
    student_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the student UUID who is enrolled in the program.',
      example: 's1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl',
    },
    program_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the program UUID the student is enrolled in.',
      example: 'p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl',
    },
    enrollment_date: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the student enrolled in the program.',
      example: '2024-04-01T09:00:00',
    },
    completion_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[OPTIONAL]** Timestamp when the student completed the program. Null if not yet completed.',
      example: '2024-06-30T16:45:00',
    },
    status: {
      $ref: '#/components/schemas/StatusEnum7',
    },
    progress_percentage: {
      type: 'number',
      description: '**[OPTIONAL]** Percentage of program content completed by the student.',
      example: 100,
      maximum: 100,
      minimum: 0,
    },
    final_grade: {
      type: 'number',
      description: '**[OPTIONAL]** Final grade achieved by the student in the program.',
      example: 87.25,
      maximum: 100,
      minimum: 0,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.',
      example: '2024-04-01T09:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.',
      example: 'student@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.',
      example: '2024-06-30T16:45:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.',
      example: 'system@sarafrika.com',
      readOnly: true,
    },
    is_active: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.',
      example: false,
      readOnly: true,
    },
    enrollment_category: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted category of the enrollment based on current status.',
      example: 'Completed Program Enrollment',
      readOnly: true,
    },
    progress_display: {
      type: 'string',
      description: "**[READ-ONLY]** Formatted display of the student's progress in the program.",
      example: '100.00% Complete',
      readOnly: true,
    },
    enrollment_duration: {
      type: 'string',
      description:
        '**[READ-ONLY]** Duration of the enrollment from start to completion or current date.',
      example: 90,
      readOnly: true,
    },
    status_summary: {
      type: 'string',
      description:
        '**[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.',
      example: 'Successfully completed program with final grade of 87.25',
      readOnly: true,
    },
  },
  required: ['program_uuid', 'status', 'student_uuid'],
} as const;

export const ApiResponseListCourseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Course',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseDoubleSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'number',
      format: 'double',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOCertificateSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCertificate',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCertificateSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Certificate',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOProgramCourseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOProgramCourse',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOProgramCourseSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ProgramCourse',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOOrganisationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOOrganisation',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOOrganisationSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Organisation',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListUserSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/User',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseBooleanSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'boolean',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructor',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Instructor',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorSkillSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructorSkill',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorSkillSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorSkill',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorProfessionalMembershipSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructorProfessionalMembership',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorProfessionalMembershipSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorProfessionalMembership',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorExperienceSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructorExperience',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorExperienceSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorExperience',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListInstructorEducationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorEducation',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponseListInstructorDocumentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorDocument',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorEducationSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructorEducation',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorEducationSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorEducation',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOInstructorDocumentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOInstructorDocument',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOInstructorDocumentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InstructorDocument',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOCourseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCourse',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCourseSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Course',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListContentStatusSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StatusEnum3',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOCourseRequirementSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCourseRequirement',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCourseRequirementSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CourseRequirement',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOLessonSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOLesson',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOLessonSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Lesson',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListLessonContentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/LessonContent',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOCourseEnrollmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCourseEnrollment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CourseEnrollmentSchema = {
  type: 'object',
  description: 'Student enrollment in a course with progress tracking and completion details',
  example: {
    uuid: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
    student_uuid: 's1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    enrollment_date: '2024-04-01T09:00:00',
    completion_date: '2024-04-30T16:45:00',
    status: 'COMPLETED',
    progress_percentage: 100,
    final_grade: 85.5,
    created_date: '2024-04-01T09:00:00',
    created_by: 'student@sarafrika.com',
    updated_date: '2024-04-30T16:45:00',
    updated_by: 'system@sarafrika.com',
    enrollment_category: 'Completed Enrollment',
    is_active: false,
    progress_display: '100.00% Complete',
    enrollment_duration: '29 days',
    status_summary: 'Successfully completed with final grade of 85.50',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the course enrollment. Auto-generated by the system.',
      example: 'e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl',
      readOnly: true,
    },
    student_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the student UUID who is enrolled in the course.',
      example: 's1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl',
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the course UUID the student is enrolled in.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    enrollment_date: {
      type: 'string',
      format: 'date-time',
      description: '**[OPTIONAL]** Timestamp when the student enrolled in the course.',
      example: '2024-04-01T09:00:00',
    },
    completion_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[OPTIONAL]** Timestamp when the student completed the course. Null if not yet completed.',
      example: '2024-04-30T16:45:00',
    },
    status: {
      $ref: '#/components/schemas/StatusEnum7',
    },
    progress_percentage: {
      type: 'number',
      description: '**[OPTIONAL]** Percentage of course content completed by the student.',
      example: 100,
      maximum: 100,
      minimum: 0,
    },
    final_grade: {
      type: 'number',
      description: '**[OPTIONAL]** Final grade achieved by the student in the course.',
      example: 85.5,
      maximum: 100,
      minimum: 0,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.',
      example: '2024-04-01T09:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.',
      example: 'student@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.',
      example: '2024-04-30T16:45:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.',
      example: 'system@sarafrika.com',
      readOnly: true,
    },
    is_active: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.',
      example: false,
      readOnly: true,
    },
    enrollment_category: {
      type: 'string',
      description: '**[READ-ONLY]** Formatted category of the enrollment based on current status.',
      example: 'Completed Enrollment',
      readOnly: true,
    },
    progress_display: {
      type: 'string',
      description: "**[READ-ONLY]** Formatted display of the student's progress in the course.",
      example: '100.00% Complete',
      readOnly: true,
    },
    enrollment_duration: {
      type: 'string',
      description:
        '**[READ-ONLY]** Duration of the enrollment from start to completion or current date.',
      example: 29,
      readOnly: true,
    },
    status_summary: {
      type: 'string',
      description:
        '**[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.',
      example: 'Successfully completed with final grade of 85.50',
      readOnly: true,
    },
  },
  required: ['course_uuid', 'status', 'student_uuid'],
} as const;

export const PagedDTOCourseEnrollmentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CourseEnrollment',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListCourseCategoryMappingSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CourseCategoryMapping',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const CourseCategoryMappingSchema = {
  type: 'object',
  description: 'Represents the many-to-many relationship between courses and categories',
  example: {
    uuid: 'm1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl',
    course_uuid: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    category_uuid: 'c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl',
    course_name: 'Advanced Java Programming',
    category_name: 'Programming',
    created_date: '2024-04-01T12:00:00',
    created_by: 'instructor@sarafrika.com',
  },
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      description:
        '**[READ-ONLY]** Unique system identifier for the mapping. Auto-generated by the system.',
      example: 'm1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl',
      readOnly: true,
    },
    course_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the course UUID in this mapping.',
      example: 'c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl',
    },
    category_uuid: {
      type: 'string',
      format: 'uuid',
      description: '**[REQUIRED]** Reference to the category UUID in this mapping.',
      example: 'c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl',
    },
    course_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Name of the course for display purposes. Fetched from the course entity.',
      example: 'Advanced Java Programming',
      readOnly: true,
    },
    category_name: {
      type: 'string',
      description:
        '**[READ-ONLY]** Name of the category for display purposes. Fetched from the category entity.',
      example: 'Programming',
      readOnly: true,
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the mapping was created. Automatically set by the system.',
      example: '2024-04-01T12:00:00',
      readOnly: true,
    },
    created_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who created this mapping. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    updated_date: {
      type: 'string',
      format: 'date-time',
      description:
        '**[READ-ONLY]** Timestamp when the mapping was last modified. Automatically updated by the system.',
      example: '2024-04-15T15:30:00',
      readOnly: true,
    },
    updated_by: {
      type: 'string',
      description:
        '**[READ-ONLY]** Email or username of the user who last modified this mapping. Used for audit trails.',
      example: 'instructor@sarafrika.com',
      readOnly: true,
    },
    has_names: {
      type: 'boolean',
      description: '**[READ-ONLY]** Indicates if both course and category names are populated.',
      example: true,
      readOnly: true,
    },
    display_text: {
      type: 'string',
      description:
        '**[READ-ONLY]** Human-readable text representing this course-category relationship.',
      example: 'Advanced Java Programming → Programming',
      readOnly: true,
    },
  },
  required: ['category_uuid', 'course_uuid'],
} as const;

export const ApiResponsePagedDTOCourseAssessmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCourseAssessment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCourseAssessmentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CourseAssessment',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOLessonContentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOLessonContent',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOLessonContentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/LessonContent',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOCourseCategoryMappingSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCourseCategoryMapping',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCourseCategoryMappingSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CourseCategoryMapping',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponsePagedDTOGradingLevelSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOGradingLevel',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOGradingLevelSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/GradingLevel',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListDifficultyLevelSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/DifficultyLevel',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOContentTypeSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOContentType',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOContentTypeSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ContentType',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListContentTypeSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ContentType',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOCategorySchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCategory',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCategorySchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Category',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListCategorySchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Category',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOCertificateTemplateSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOCertificateTemplate',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOCertificateTemplateSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/CertificateTemplate',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListCertificateSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Certificate',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOAssignmentSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOAssignment',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOAssignmentSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Assignment',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const ApiResponseListAssignmentSubmissionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AssignmentSubmission',
      },
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const ApiResponsePagedDTOAssignmentSubmissionSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
    data: {
      $ref: '#/components/schemas/PagedDTOAssignmentSubmission',
    },
    message: {
      type: 'string',
    },
    error: {
      type: 'object',
    },
  },
} as const;

export const PagedDTOAssignmentSubmissionSchema = {
  type: 'object',
  properties: {
    content: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AssignmentSubmission',
      },
    },
    metadata: {
      $ref: '#/components/schemas/PageMetadata',
    },
    links: {
      $ref: '#/components/schemas/PageLinks',
    },
  },
} as const;

export const AfricanPhoneNumberSchema = {
  format: 'phone',
  description: 'Valid African phone number in international or local format',
  example: '+254712345678',
  pattern: '^\\+?[1-9]\\d{7,14}$',
} as const;

export const KenyanPhoneNumberSchema = {
  format: 'phone',
  description: 'Valid Kenyan mobile phone number (Safaricom, Airtel formats)',
  example: '+254712345678',
  pattern: '^(\\+254|0)?[17]\\d{8}$',
} as const;

export const NigerianPhoneNumberSchema = {
  format: 'phone',
  description: 'Valid Nigerian mobile phone number (MTN, Glo, Airtel, 9mobile formats)',
  example: '+2348012345678',
  pattern: '^(\\+234|0)?[789]\\d{9}$',
} as const;

export const EastAfricanPhoneNumberSchema = {
  format: 'phone',
  description:
    'Valid East African phone number (Kenya, Uganda, Tanzania, Rwanda, Burundi, South Sudan)',
  example: '+254712345678',
  pattern: '^(\\+25[0-6]|0)?[1-9]\\d{7,9}$',
} as const;

export const WestAfricanPhoneNumberSchema = {
  format: 'phone',
  description: 'Valid West African phone number (Nigeria, Ghana, Senegal, Mali, etc.)',
  example: '+2348012345678',
  pattern: '^(\\+2[2-3][0-9]|0)?[1-9]\\d{6,9}$',
} as const;

export const SouthernAfricanPhoneNumberSchema = {
  format: 'phone',
  description:
    'Valid Southern African phone number (South Africa, Zimbabwe, Zambia, Botswana, etc.)',
  example: '+27821234567',
  pattern: '^(\\+2[67]\\d|0)?[1-9]\\d{6,9}$',
} as const;

export const InternationalPhoneNumberSchema = {
  format: 'phone',
  description: 'Valid international phone number in E.164 format',
  example: '+1234567890',
  pattern: '^\\+?[1-9]\\d{7,14}$',
} as const;

export const ValidUrlSchema = {
  format: 'uri',
  description: 'A valid URL with HTTP or HTTPS protocol',
  example: 'https://example.com',
  pattern: '^https?://[^\\s/$.?#].[^\\s]*$',
} as const;

export const WebsiteUrlSchema = {
  format: 'uri',
  description: 'A valid website URL for personal or business websites',
  example: 'https://sarafrika.com',
  pattern: '^https?://[^\\s/$.?#].[^\\s]*$',
} as const;

export const ApiUrlSchema = {
  format: 'uri',
  description: 'A secure HTTPS URL for API endpoints',
  example: 'https://api.elimika.sarafrika.com',
  pattern: '^https://[^\\s/$.?#].[^\\s]*$',
} as const;

export const ImageUrlSchema = {
  format: 'uri',
  description: 'A valid URL pointing to an image file',
  example: 'https://images.sarafrika.com/logo.png',
  pattern: '^https?://[^\\s/$.?#].[^\\s]*\\.(jpg|jpeg|png|gif|webp|svg)$',
} as const;

export const DocumentUrlSchema = {
  format: 'uri',
  description: 'A valid URL pointing to a document file',
  example: 'https://docs.sarafrika.com/manual.pdf',
  pattern: '^https?://[^\\s/$.?#].[^\\s]*\\.(pdf|doc|docx|xls|xlsx|ppt|pptx)$',
} as const;

export const SocialMediaUrlSchema = {
  format: 'uri',
  description: 'A valid social media profile URL',
  example: 'https://linkedin.com/company/sarafrika',
  pattern: '^https?://(www\\.)?(facebook|twitter|instagram|linkedin|youtube|tiktok)\\.com/[^\\s]*$',
} as const;

export const GenderEnumSchema = {
  type: 'string',
  description:
    "**[OPTIONAL]** User's gender information. Used for demographic analytics and personalization. Can be null if not specified or preferred not to disclose.",
  enum: ['MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY'],
  example: 'FEMALE',
} as const;

export const ItemsEnumSchema = {
  description: "Domain roles that define the user's functional areas within the system",
  enum: ['student', 'instructor', 'admin', 'organisation_user'],
} as const;

export const StatusEnumSchema = {
  type: 'string',
  description: '**[REQUIRED]** Quiz publication status in the content workflow.',
  enum: ['DRAFT', 'IN_REVIEW', 'PUBLISHED', 'ARCHIVED'],
  example: 'PUBLISHED',
} as const;

export const QuestionTypeEnumSchema = {
  type: 'string',
  description: '**[REQUIRED]** Type of question determining the answer format and validation.',
  enum: ['MULTIPLE_CHOICE', 'TRUE_FALSE', 'SHORT_ANSWER', 'ESSAY'],
  example: 'MULTIPLE_CHOICE',
} as const;

export const RequirementTypeEnumSchema = {
  type: 'string',
  description: '**[REQUIRED]** Type of requirement classification for this program element.',
  enum: ['STUDENT', 'TRAINING_CENTER', 'INSTRUCTOR'],
  example: 'STUDENT',
} as const;

export const ProficiencyLevelEnumSchema = {
  type: 'string',
  description:
    "**[REQUIRED]** Level of proficiency in this skill. Indicates instructor's competency and teaching capability.",
  enum: ['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT'],
  example: 'EXPERT',
} as const;

export const MembershipStatusEnumSchema = {
  type: 'string',
  description: '**[READ-ONLY]** Current status of the membership.',
  enum: ['ACTIVE', 'INACTIVE', 'EXPIRED', 'UNKNOWN'],
  example: 'ACTIVE',
  readOnly: true,
} as const;

export const OrganizationTypeEnumSchema = {
  type: 'string',
  description: '**[READ-ONLY]** Classification of organization type based on name keywords.',
  enum: [
    'PROFESSIONAL_INSTITUTE',
    'CERTIFICATION_BODY',
    'INDUSTRY_ASSOCIATION',
    'ACADEMIC_SOCIETY',
    'TRADE_ORGANIZATION',
    'OTHER',
  ],
  example: 'PROFESSIONAL_INSTITUTE',
  readOnly: true,
} as const;

export const ExperienceLevelEnumSchema = {
  type: 'string',
  description:
    '**[READ-ONLY]** Classification of experience level based on position title and duration.',
  enum: ['ENTRY', 'JUNIOR', 'MID', 'SENIOR', 'LEAD', 'EXECUTIVE'],
  example: 'SENIOR',
  readOnly: true,
} as const;

export const EducationLevelEnumSchema = {
  type: 'string',
  description: '**[READ-ONLY]** Classification of education level based on qualification type.',
  enum: ['CERTIFICATE', 'DIPLOMA', 'UNDERGRADUATE', 'POSTGRADUATE', 'DOCTORAL', 'OTHER'],
  example: 'POSTGRADUATE',
  readOnly: true,
} as const;

export const StatusEnum2Schema = {
  type: 'string',
  description: '**[READ-ONLY]** Current status of the document in the verification workflow.',
  enum: ['PENDING', 'APPROVED', 'REJECTED', 'EXPIRED', 'UNDER_REVIEW'],
  example: 'APPROVED',
  readOnly: true,
} as const;

export const VerificationStatusEnumSchema = {
  type: 'string',
  description: '**[READ-ONLY]** Human-readable verification status of the document.',
  enum: ['VERIFIED', 'PENDING', 'REJECTED'],
  example: 'VERIFIED',
  readOnly: true,
} as const;

export const StatusEnum3Schema = {
  type: 'string',
  description: '**[REQUIRED]** Course publication status in the content workflow.',
  enum: ['draft', 'in_review', 'published', 'archived'],
  example: 'published',
} as const;

export const TemplateTypeEnumSchema = {
  type: 'string',
  description: '**[REQUIRED]** Type of certificate this template is designed for.',
  enum: ['COURSE_COMPLETION', 'PARTICIPATION', 'ACHIEVEMENT', 'CUSTOM'],
  example: 'COURSE_COMPLETION',
} as const;

export const StatusEnum4Schema = {
  type: 'string',
  default: 'PENDING',
  description:
    '**[READ-ONLY]** Current status of the invitation in its lifecycle. Automatically managed by the system based on user actions and expiration rules.',
  enum: ['PENDING', 'ACCEPTED', 'DECLINED', 'EXPIRED', 'CANCELLED'],
  example: 'PENDING',
  readOnly: true,
} as const;

export const DomainNameEnumSchema = {
  type: 'string',
  description:
    '**[READ-ONLY]** Name of the user domain/role for display purposes. Populated by the system based on the domain_uuid and indicates the role being offered.',
  enum: ['student', 'instructor', 'admin', 'organisation_user'],
  example: 'instructor',
  readOnly: true,
} as const;

export const StatusEnum5Schema = {
  type: 'string',
  description: '**[REQUIRED]** Current status of the submission in the grading workflow.',
  enum: ['DRAFT', 'SUBMITTED', 'IN_REVIEW', 'GRADED', 'RETURNED'],
  example: 'GRADED',
} as const;

export const StatusEnum6Schema = {
  type: 'string',
  description: '**[REQUIRED]** Current status of the quiz attempt.',
  enum: ['IN_PROGRESS', 'SUBMITTED', 'GRADED'],
  example: 'GRADED',
} as const;

export const StatusEnum7Schema = {
  type: 'string',
  description: "**[REQUIRED]** Current status of the student's enrollment in the program.",
  enum: ['ACTIVE', 'COMPLETED', 'DROPPED', 'SUSPENDED'],
  example: 'COMPLETED',
} as const;
