'use client';

import { Button } from '@/components/ui/button';
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogHeader,
    DialogTitle,
} from '@/components/ui/dialog';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import Spinner from '@/components/ui/spinner';
import { Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { useBreadcrumb } from '@/context/breadcrumb-provider';
import { useInstructor } from '@/context/instructor-context';
import { deleteAssessmentRubricMutation, searchAssessmentRubricsOptions, searchAssessmentRubricsQueryKey } from '@/services/client/@tanstack/react-query.gen';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { EllipsisVertical, PenIcon, PlusIcon, Square, TrashIcon } from 'lucide-react';
import { useSearchParams } from 'next/navigation';
import React, { useEffect, useState } from 'react';
import { toast } from 'sonner';
import { RubricDialog } from '../_components/new-rubric-form';
import { RubricFormValues, Visibility } from '../_components/rubric-management-form';
import { useRubricsWithCriteriaAndScoring } from './rubric-chaining';

export default function RubricsCreationPage() {
    const searchParams = useSearchParams();
    const courseId = searchParams.get('id');

    const instructor = useInstructor();
    const queryClient = useQueryClient();
    const { replaceBreadcrumbs } = useBreadcrumb();

    useEffect(() => {
        if (!courseId) return;

        replaceBreadcrumbs([
            { id: 'dashboard', title: 'Dashboard', url: '/dashboard/overview' },
            {
                id: 'course-management',
                title: 'Course Management',
                url: '/dashboard/course-management/drafts',
            },
            {
                id: 'rubrics',
                title: 'Rubrics',
                url: `/dashboard/course-management/add-rubrics?id=${courseId}`,
                isLast: true,
            },
        ]);
    }, [courseId, replaceBreadcrumbs]);

    // rubrics update
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
    const openCreateRubricModal = () => setIsCreateModalOpen(true)

    const { data: allRubrics } = useQuery(searchAssessmentRubricsOptions({ query: { pageable: {}, searchParams: { instructor_uuid_eq: instructor?.uuid as string, } } }))

    console.log("created rubric data", allRubrics?.data)
    // rubrics update



    const { rubricsWithDetails, isLoading: rubricDataIsLoading } = useRubricsWithCriteriaAndScoring(instructor?.uuid);

    const [rubrics, setRubrics] = useState(rubricsWithDetails || []);
    const [modalOpen, setModalOpen] = useState(false);
    const [editingRubric, setEditingRubric] = useState<RubricFormValues | null>(null);
    const [editingRubricId, setEditingRubricId] = useState<string | null>(null);

    const openAddModal = () => {
        setEditingRubric(null);
        setEditingRubricId(null);
        setModalOpen(true);
    };

    const openEditModal = (rubricId: string) => {
        const rubricItem = rubricsWithDetails.find((r) => r.rubric.uuid === rubricId);
        if (!rubricItem) return;

        const rubric = rubricItem.rubric;
        const criteria = rubricItem.criteria ?? [];

        setEditingRubric({
            title: rubric.title,
            description: rubric.description,
            type: rubric.rubric_type,
            visibility: rubric.is_public ? Visibility.Public : Visibility.Private,
            components: criteria.map((c) => ({
                name: c.component_name,
                uuid: c.uuid,
                grading: c.scoring.map((s: any) => ({
                    name: s.performance_expectation,
                    description: s.description,
                    points: parseInt(s.score_range),
                    uuid: s.uuid,
                    grading_level_uuid: s.grading_level_uuid,
                    scoring_uuid: s.uuid
                })),
            })),
        });

        setEditingRubricId(rubricId);
        setModalOpen(true);
    };

    const deleteAssessment = useMutation(deleteAssessmentRubricMutation());

    const [rubricToDelete, setRubricToDelete] = useState<string | null>(null);
    const [deleteModalOpen, setDeleteModalOpen] = useState(false);

    const handleAskDeleteRubric = (rubricId: string) => {
        setRubricToDelete(rubricId);
        setDeleteModalOpen(true);
    };

    const confirmDeleteRubric = () => {
        if (!rubricToDelete) return;
        // Optimistic UI update
        setRubrics((prev) => prev.filter((r) => r.rubric.uuid !== rubricToDelete));

        deleteAssessment.mutate(
            { path: { uuid: rubricToDelete } },
            {
                onSuccess: () => {
                    queryClient.invalidateQueries({
                        queryKey: searchAssessmentRubricsQueryKey({
                            query: {
                                searchParams: { instructor_uuid_eq: instructor?.uuid as string }, pageable: {}
                            }
                        })
                    });
                    toast.success('Rubric deleted successfully.');
                },
                onError: () => {
                    toast.error('Failed to delete rubric.');
                },
                onSettled: () => {
                    setDeleteModalOpen(false);
                    setRubricToDelete(null);
                },
            }
        );
    };

    const handleFormSubmit = (values: RubricFormValues) => {
        if (editingRubricId) {
            setRubrics((prev: any) =>
                prev.map((r: any) =>
                    r.uuid === editingRubricId
                        ? { ...r, ...values }
                        : r
                )
            );
            toast.success('Rubric updated');
        } else {
            setRubrics((prev: any) => [
                ...prev,
                {
                    uuid: (prev.length + 1).toString(),
                    ...values,
                },
            ]);
            toast.success('Rubric created');
        }
        setModalOpen(false);
    };

    if (rubricDataIsLoading) {
        return <div className="flex flex-col gap-4 text-[12px] sm:text-[14px]">
            <div className="h-20 bg-gray-200 rounded animate-pulse w-full"></div>

            <div className="h-16 bg-gray-200 rounded animate-pulse w-full"></div>
            <div className="h-12 bg-gray-200 rounded animate-pulse w-full"></div>

        </div>
    }

    return (
        <div className="space-y-6">
            <div className="mb-6 flex items-end justify-between">
                <div>
                    <h1 className="text-2xl font-semibold">Your Rubrics</h1>
                    <p className="text-muted-foreground mt-1 text-base">
                        You have {rubricsWithDetails.length} rubric{rubricsWithDetails.length !== 1 ? 's' : ''} created.
                    </p>
                </div>
                <Button type="button" onClick={openCreateRubricModal} className="px-4 py-2 text-sm cursor-pointer">
                    <PlusIcon className="h-4 w-4 mr-1" />
                    New Rubric
                </Button>
            </div>

            {!rubricDataIsLoading && rubricsWithDetails.length === 0 ? (
                <div className="bg-muted/20 rounded-md border py-12 text-center">
                    <p className="text-muted-foreground mt-2">No rubrics created yet.</p>
                    <Button className="mt-4" onClick={openCreateRubricModal}>
                        Create Your First Rubric
                    </Button>
                </div>
            ) : (
                <div className="rounded-t-lg border border-gray-200 overflow-hidden">
                    <Table>
                        <TableCaption className="py-4">A list of your rubrics</TableCaption>

                        <TableHeader className="bg-muted">
                            <TableRow>
                                <TableHead className="w-4 text-center">
                                    <Square
                                        size={20}
                                        strokeWidth={1}
                                        className="mx-auto text-muted-foreground"
                                    />
                                </TableHead>
                                <TableHead className="w-[300px]">Title</TableHead>
                                <TableHead className="w-[200px]">Component</TableHead>
                                <TableHead>Grading</TableHead>
                                <TableHead className="text-center">Actions</TableHead>
                            </TableRow>
                        </TableHeader>

                        <TableBody>
                            {rubricDataIsLoading ? (
                                <TableRow>
                                    <TableCell colSpan={10} className="py-6">
                                        <div className="flex w-full items-center justify-center">
                                            <Spinner />
                                        </div>
                                    </TableCell>
                                </TableRow>
                            ) : (
                                <>
                                    {rubricsWithDetails.map((rubricItem: any) => {
                                        const rubric = rubricItem.rubric;
                                        const criteriaList = rubricItem.criteria ?? [];

                                        return (
                                            <React.Fragment key={rubric.uuid}>
                                                <TableRow>
                                                    {/* Checkbox */}
                                                    <TableCell rowSpan={criteriaList.length} className="w-4 text-center align-top">
                                                        <Square size={20} strokeWidth={1} className="mx-auto text-muted-foreground" />
                                                    </TableCell>

                                                    {/* Title */}
                                                    <TableCell rowSpan={criteriaList.length} className="font-medium align-top">
                                                        <div className="flex flex-col gap-1">
                                                            <div>{rubric.title}</div>
                                                            <div className="text-sm text-muted-foreground">{rubric.description}</div>
                                                        </div>
                                                    </TableCell>

                                                    {/* First criteria/component */}
                                                    <TableCell className="align-top">
                                                        {criteriaList[0]?.component_name}
                                                    </TableCell>

                                                    {/* First criteria's scoring */}
                                                    <TableCell className="align-top">
                                                        <div className="space-y-2">
                                                            {criteriaList[0]?.scoring?.map((score: any, i: number) => (
                                                                <div key={i} className="border-b pb-2 last:border-none last:pb-0">
                                                                    <div className="text-sm font-medium">
                                                                        {score.performance_expectation}: {score.score_range}
                                                                    </div>

                                                                    {score.description && (
                                                                        <div className="text-sm text-muted-foreground">
                                                                            {score.description.length > 45
                                                                                ? `${score.description.slice(0, 45)}...`
                                                                                : score.description}
                                                                        </div>
                                                                    )}

                                                                </div>
                                                            ))}
                                                        </div>
                                                    </TableCell>

                                                    {/* Actions */}
                                                    <TableCell rowSpan={criteriaList.length} className="text-center align-top">
                                                        <DropdownMenu>
                                                            <DropdownMenuTrigger asChild>
                                                                <Button variant="ghost" size="icon" aria-label="Actions">
                                                                    <EllipsisVertical className='w-3 h-3' />
                                                                </Button>
                                                            </DropdownMenuTrigger>
                                                            <DropdownMenuContent align="end">
                                                                <DropdownMenuItem onClick={() => openEditModal(rubric.uuid)}>
                                                                    <PenIcon className="mr-2 h-4 w-4" />
                                                                    Edit Rubric
                                                                </DropdownMenuItem>
                                                                <DropdownMenuSeparator />
                                                                <DropdownMenuItem
                                                                    variant="destructive"
                                                                    onClick={() => handleAskDeleteRubric(rubric.uuid)}
                                                                >
                                                                    <TrashIcon className="mr-2 h-4 w-4" />
                                                                    Delete Rubric
                                                                </DropdownMenuItem>
                                                            </DropdownMenuContent>
                                                        </DropdownMenu>
                                                    </TableCell>
                                                </TableRow>

                                                {/* Remaining Criteria Rows */}
                                                {criteriaList.slice(1).map((criteria: any, idx: number) => (
                                                    <TableRow key={`${rubric.uuid}-criteria-${idx}`}>
                                                        <TableCell className="align-top">
                                                            {criteria.component_name}
                                                        </TableCell>
                                                        <TableCell className="align-top">
                                                            <div className="space-y-2">
                                                                {criteria.scoring?.map((score: any, i: number) => (
                                                                    <div key={i} className="border-b pb-2 last:border-none last:pb-0">
                                                                        <div className="text-sm font-medium">
                                                                            {score.performance_expectation}: {score.score_range}
                                                                        </div>
                                                                        {score.description && (
                                                                            <div className="text-sm text-muted-foreground">
                                                                                {score.description}
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </TableCell>
                                                    </TableRow>
                                                ))}
                                            </React.Fragment>
                                        );
                                    })}

                                </>
                            )}
                        </TableBody>
                    </Table>
                </div>
            )}

            {/* <Dialog open={modalOpen} onOpenChange={setModalOpen}>
                <DialogContent className="flex max-w-6xl flex-col p-0">
                    <DialogHeader className="border-b px-6 py-4">
                        <DialogTitle className="text-xl">
                            {editingRubricId ? 'Edit Rubric' : 'Add New Rubric'}
                        </DialogTitle>
                        <DialogDescription className="text-muted-foreground text-sm">
                            {editingRubric
                                ? "Update the existing rubric's title, description, and grading criteria."
                                : "Create a new rubric by providing its title, description, and grading criteria."}
                        </DialogDescription>

                    </DialogHeader>

                    <ScrollArea className="h-[calc(90vh-8rem)]">
                        <AddRubricForm
                            onCancel={() => setModalOpen(false)}
                            onSubmitSuccess={() => handleFormSubmit}
                            defaultValues={editingRubric || undefined}
                            className="px-6 pb-6"
                            courseId={courseId as string}
                            rubricId={editingRubricId as string}
                        />
                    </ScrollArea>
                </DialogContent>
            </Dialog> */}


            <Dialog open={deleteModalOpen} onOpenChange={setDeleteModalOpen}>
                <DialogContent className="max-w-md">
                    <DialogHeader>
                        <DialogTitle>Delete Rubric</DialogTitle>
                        <DialogDescription className='my-2' >
                            Are you sure you want to delete this rubric? This action cannot be undone.
                        </DialogDescription>
                    </DialogHeader>

                    <div className="flex justify-end gap-2 mt-4">
                        <Button variant="outline" onClick={() => setDeleteModalOpen(false)}>
                            Cancel
                        </Button>
                        <Button variant="destructive" className='min-w-[100px]' onClick={confirmDeleteRubric}>
                            {deleteAssessment.isPending ? <Spinner /> : "Delete"}
                        </Button>
                    </div>
                </DialogContent>
            </Dialog>

            {isCreateModalOpen && <RubricDialog
                open={isCreateModalOpen}
                setOpen={setIsCreateModalOpen}
                onSubmitSuccess={() => { }}
                // editingRubric={}
                editingRubricId=''
            />}
        </div>
    );
}
